AMBUSH:
  ambush NEEDS to have its damage lowered.  plan on using more
  awareness / defense (namely dodge) / etc. to lower the damage,
  not a direct intervention by changing constants.  do this NOW.
  it's IMPORTANT.
--
COMMAND INTERPRETER:
  in particular, needs a rewrite.  it should be clear and concise
  in what it does: what checks are made by the interpreter, and
  what checks are to be left to the functions that are called
  afterwards.  for example, an explanation comment above command_
  interpreter might be: command interpreter first deals with
  matching some input text with the list of known commands.  it
  then deals with the core concept of visibility: should this 
  command require a character to be visible to those in his room?
  should it send an echo to his room if he executes it?  then,
  should this command be sufficient to remove a prepared spell?
  should this command be executable by a mobile? etc, etc.  that
  way, we can cut all of this nonsense checking out of the ACMD
  functions.

  of course, i'm also thinking that we COULD remove the ACMD
  syntax for something like COMMAND, just so that we can move
  further away from default circlemud.
--
TRAP:
  needs a different target mask to work correctly; however, it
  uses the same skill index as ambush.  how do we make this work?
  maybe the actual command is what's really more important any-
  way? so we can just set the target mask on the command instead
  of the target mask of the skill..
--
SPELLS:
  mist of baazunga: sets dark flags on every room it affects.
  causes blindness on people without darkie-infra or infra spell,
  moves around.  needs an entrance message, needs the message
  that shows in the room where it is dependent on the sector type.

  freeze: freeze is part of the cold spec.  casting it on a
  door's name will cause the door to 'freeze' and thus be un-
  openable.  should be ~+60 INCREASED_MANA.  using aff_modifier,
  we need to keep track of freezes so that we lower a door's
  freeze level on every bash/break/etc assuming they fail.
  additionally, over time, the freeze affmod lowers and lowers
  until the ice is finally melted away, and the door is no
  longer frozen.  also, should freeze block a blink attempt
  through a frozen door? maybe this should depend on the freeze
  affmod, or maybe it shouldn't be possible at all.  to facili-
  tate the new freeze aspect of doors, we need to introduce an
  exit flag that flags certain doors as unfreezable. NO_FREEZE
  fits the current language standards.

  blaze: part of the fire spec, undoes a frozen door affection.
  every tick, it lowers the freeze affmod by some amount det-
  ermined by the blaze affmod (in addition to the normal freeze
  affmod) while damaging the hell out of everyone.  yet another
  note: blaze needs to be quick to cast and cost alot of mana.
--
SNEAK:
  since we set a delay on sneak, it deletes the old delay that
  was set with hunt.  this makes hunt REALLY fast.  this needs
  quick fixing.
--
KILLS/XP/TROPHY:
  tearendil reports a bug about firebolting phaet dead, and not
  getting any xp/trophy for the kill.  this is the same bug i'd
  imagine that deals with guardians causing kill losses.  maybe
  we should just give xp/trophy to every single person engaged
  with a player (or mob).  we could also tweak pkill records to
  award everyone who had a hand in the fight, though not award
  fame (should we?).
    tearendil says:
    - fierce troll case: killed troll, rip message, message that
      chill killed it, no exp, no corpse.  happened at room 24382,
      he stood there and chill rayed it to death.
    - if he's a group leader, and someone in his group kills a
      mob in his room, he gets no xp.
    - if he's not grouped with someone, and they're both fighting
      a plyer, both he and the player get a trophy and fame.  he
      says he isn't sure about XP in this case.
    - if you're a leader and a follower kills something, you get
      no xp (as with guardian bug).  if you're a follower, and
      the leader is engaged and you aren't, then you get xp.
    - from my own experience (mainly with the ice statue), if you
      cast a spell (or maybe only if you're letting out a prep)
      and then flee immediately after your prep goes off, you get
      a death message etc. but no experience.  i actually think
      you flee, and then you get a "deathcry from the <direction
      you fled from>" message.
  also note, tearendil claims that this stuff never happened prior
  to 'yesterday' - 5/01/04
--
PLANT:
  apparently you can spam score at the plant mobs, which causes
  you to gain an hp or what not on every score.  has something to
  do with affect_update.  probably a quick fix.
--
HELP FILES:
  write a structure that contains help file structures and maps
  them to keywords.  the keywords to be mapped, of course, would
  be the ones from the do_reload function in db.cc.  this way, a
  list could be generated of valid arguments to reload when some-
  one invokes it without argument.

  make a shapehlp.c file that allows in-game immortals to edit
  the help files.  this would -really- make the help files more
  useful.

  cause the skills/spells/power sections to generate everything
  but the spell description from the skills[] array; that way,
  we always have updated information in *that* respect.
--
RESET_Q_TYPE/ELEMENT
  what the hell do these do? they sound cool
--
MOUNTS:
  if there are multiple riders on one mount, and the main rider
  dismounts, and moves into a room which is no_ride, one of the
  remaining riders will get kicked off, but others will remain
  riding, and will enter the room on the mount.  the follower
  that was kicked off will be left in the original room.

  as a matter of fact, when multiple people ride a mount, if the
  leader dismounts, all sorts of things go to hell.  take a look
  at this.
--
ARMOR:
  we should have an armor.c too

  so what the hell is up with min abs and ab%?
--
FAME:
  change the strings in fame.c's warlord_stat

  move all of the db.cc pkill procedures/structures into fame.c
  and fame.h
--
UTILITY:
  make a break-prep function so that we don't have to have all of
  these 6-line prep-checking code blocks all over the place

  why do we have 'getrace{height,weight,perception}' as FUNCTIONS?
  let's just make them arrays.

  speaking of utility (not that this section deals literally with
  the utility.cc file), we need to either make utils.h utility.h,
  or utility.cc utils.cc.  having these different names is annoying
  and confusing.  i'd personally go with utility.cc->utils.cc, since
  all current *.cc files include utils.h.

  make latin-1 character sets work without the -funsigned-char hack.
  in addition, we need to figure out how to rape telnet codes so
  that we don't interpret player input as a telnet negotiation.
--
COMMAND PERMISSION CHECKING:
  move prep-busting commands into the main command_interpreter in 
  interpre.cc.

  check for hallucination in command_interpreter.  this does not
  refer to the 10% target forgetting, but to the certain commands
  that simply cannot be executed if you are affected by hall.
--
MYSTICS:
  fix mind block; right now it is just a flat 25% chance to block
  a mental attack

  make clerics.cc mystics.cc, since cleric is really an outdated
  word for rots.  if possible, it'd be nice to remove all refer-
  ences to 'clerics' throughout the code mnemonics, so as to make
  things easier to understand.
--
C++ TO C:
  try to remove as many .cc files as possible.  the main problem
  with just going straight to ANSI C is not classes; we don't
  really have many of those (if any).  the main problem is over-
  loaded functions and operators; we have a sparse few, but they
  deal with important things, so this will need alot of checking.

  db.cc (at the very top) has some very interesting scope decls,
  which i confirmed to be used in structs.h.  what the hell do
  these things mean? do these things allocate the stuff i'm
  looking at for EVERY room in the world? this is ludicrous, i
  am going to go get a sandwich.

  just try to gcc a .c file with the .h files associated with .cc
  files, and gcc will complain about all of the disgusting c++
--
WARRIORS:
  make bash DURATION depend on the warrior level of the bash and
  add the war level dependence to the bash probability calculations.
  this means lower leveled warriors will bash for shorter periods of
  time, so even if you do eat a bash, it won't matter so much
--
RANGERS:
  rework the hide/see hidden probability system into one quick
  function that takes into account skills such as awareness and
  stealth, the terrain, the viewer's awareness level, the hider's
  hide level, etc.  make this function output numbers on a global
  scale; that is, let it return numbers that could even be used for
  the `hide' command.  basically a 'stealth proficiency' function.

  above is basically the get_real_stealth command.  what is really
  needed is for all ranger-related abilities to be moved into a
  'rangers.c' file so that we can work with all of their skills and
  abilities in a cohesive manner.

  fix trap; has to do with the TAR_CHAR_GLOBAL target mask not
  exactly working.  i wonder why it doesn't, maybe it has to do with
  being cross-war?  the tell command used to work on mobs, so the
  global mask can definitely target non-players.

  fix pick lock. it sucks.  pick should be able to ENABLE locks as
  well as disable them.
--
SPAMMING:
  make engage commands cost moves if the command succeeds in being
  executed (i.e.: they're in the right position: not already fighting, 
  etc).  change the messages to reflect this.

  make spamming prepped spells cost a small amount of stamina if
  they're executed (as above).  change the messages to reflect this.
--
SCRIPTING:
  port ASIMA to any arbitrary structure
--
POLITICS:
  let the yahoo group know that we work in-game now, not out of game
--
WEAPONS:
  make decimals matter in weapon damages, if they don't already
--
MAGES:
  fix spellsave generation on mobs

