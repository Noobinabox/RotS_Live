!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/berserk/Repos/rots/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
../bin/ageland	Makefile	/^..\/bin\/ageland:	$(OBJFILES)$/;"	t
../bin/ageland	Makefile	/^..\/bin\/ageland:$/;"	t
ACMD	act_comm.cc	/^ACMD(do_afk)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_alias)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_ask)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_gen_com)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_gsay)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_page)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_petitio)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_pray)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_say)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_tell)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_whisper)$/;"	f
ACMD	act_comm.cc	/^ACMD(do_write)$/;"	f
ACMD	act_info.cc	/^ACMD(do_affections)$/;"	f
ACMD	act_info.cc	/^ACMD(do_autoexit)$/;"	f
ACMD	act_info.cc	/^ACMD(do_commands)$/;"	f
ACMD	act_info.cc	/^ACMD(do_compare)$/;"	f
ACMD	act_info.cc	/^ACMD(do_consider)$/;"	f
ACMD	act_info.cc	/^ACMD(do_diagnose)$/;"	f
ACMD	act_info.cc	/^ACMD(do_equipment)$/;"	f
ACMD	act_info.cc	/^ACMD(do_examine)$/;"	f
ACMD	act_info.cc	/^ACMD(do_exits)$/;"	f
ACMD	act_info.cc	/^ACMD(do_exploits)$/;"	f
ACMD	act_info.cc	/^ACMD(do_fame)$/;"	f
ACMD	act_info.cc	/^ACMD(do_gen_ps)$/;"	f
ACMD	act_info.cc	/^ACMD(do_help)$/;"	f
ACMD	act_info.cc	/^ACMD(do_info)$/;"	f
ACMD	act_info.cc	/^ACMD(do_inventory)$/;"	f
ACMD	act_info.cc	/^ACMD(do_levels)$/;"	f
ACMD	act_info.cc	/^ACMD(do_look)$/;"	f
ACMD	act_info.cc	/^ACMD(do_map)$/;"	f
ACMD	act_info.cc	/^ACMD(do_orc_delay)$/;"	f
ACMD	act_info.cc	/^ACMD(do_rank)$/;"	f
ACMD	act_info.cc	/^ACMD(do_read)$/;"	f
ACMD	act_info.cc	/^ACMD(do_score)$/;"	f
ACMD	act_info.cc	/^ACMD(do_search)$/;"	f
ACMD	act_info.cc	/^ACMD(do_small_map)$/;"	f
ACMD	act_info.cc	/^ACMD(do_spam)$/;"	f
ACMD	act_info.cc	/^ACMD(do_stat)$/;"	f
ACMD	act_info.cc	/^ACMD(do_time)$/;"	f
ACMD	act_info.cc	/^ACMD(do_toggle)$/;"	f
ACMD	act_info.cc	/^ACMD(do_users)$/;"	f
ACMD	act_info.cc	/^ACMD(do_weather)$/;"	f
ACMD	act_info.cc	/^ACMD(do_where)$/;"	f
ACMD	act_info.cc	/^ACMD(do_who)$/;"	f
ACMD	act_info.cc	/^ACMD(do_whois)$/;"	f
ACMD	act_move.cc	/^ACMD(do_close)$/;"	f
ACMD	act_move.cc	/^ACMD(do_enter)$/;"	f
ACMD	act_move.cc	/^ACMD(do_follow)$/;"	f
ACMD	act_move.cc	/^ACMD(do_lead)$/;"	f
ACMD	act_move.cc	/^ACMD(do_leave)$/;"	f
ACMD	act_move.cc	/^ACMD(do_lock)$/;"	f
ACMD	act_move.cc	/^ACMD(do_lose)$/;"	f
ACMD	act_move.cc	/^ACMD(do_move)$/;"	f
ACMD	act_move.cc	/^ACMD(do_open)$/;"	f
ACMD	act_move.cc	/^ACMD(do_pull)$/;"	f
ACMD	act_move.cc	/^ACMD(do_refollow)$/;"	f
ACMD	act_move.cc	/^ACMD(do_rest)$/;"	f
ACMD	act_move.cc	/^ACMD(do_sit)$/;"	f
ACMD	act_move.cc	/^ACMD(do_sleep)$/;"	f
ACMD	act_move.cc	/^ACMD(do_stand)$/;"	f
ACMD	act_move.cc	/^ACMD(do_unlock)$/;"	f
ACMD	act_move.cc	/^ACMD(do_wake)$/;"	f
ACMD	act_obj1.cc	/^ACMD(do_butcher)$/;"	f
ACMD	act_obj1.cc	/^ACMD(do_drop)$/;"	f
ACMD	act_obj1.cc	/^ACMD(do_get)$/;"	f
ACMD	act_obj1.cc	/^ACMD(do_give)$/;"	f
ACMD	act_obj1.cc	/^ACMD(do_put)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_blowout)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_drink)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_eat)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_grab)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_light)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_pour)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_remove)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_wear)$/;"	f
ACMD	act_obj2.cc	/^ACMD(do_wield)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_assist)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_bash)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_bite)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_defend)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_disengage)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_flee)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_hit)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_kick)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_maul)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_order)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_rend)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_rescue)$/;"	f
ACMD	act_offe.cc	/^ACMD(do_slay)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_apply)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_block)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_casting)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_fish)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_gen_tog)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_group)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_grouproll)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_inventory_sort)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_jig)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_knock)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_language)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_next)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_not_here)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_quit)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_recruit)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_report)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_save)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_set)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_shooting)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_specialize)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_split)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_syslog)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_tactics)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_title)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_ungroup)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_use)$/;"	f
ACMD	act_othe.cc	/^ACMD(do_wimpy)$/;"	f
ACMD	act_soci.cc	/^ACMD(do_action)$/;"	f
ACMD	act_soci.cc	/^ACMD(do_insult)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_advance)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_at)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_date)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_dc)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_delete)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_echo)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_emote)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_findzone)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_force)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_gecho)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_goto)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_invis)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_last)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_load)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_poofset)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_purge)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_register)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_rehash)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_restore)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_return)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_send)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_setfree)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_show)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_shutdown)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_snoop)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_switch)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_teleport)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_top)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_trans)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_uptime)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_vnum)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_vstat)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_wizlock)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_wiznet)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_wizset)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_wizstat)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_wizutil)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_zone)$/;"	f
ACMD	act_wiz.cc	/^ACMD(do_zreset)$/;"	f
ACMD	ban.cc	/^ACMD(do_ban)$/;"	f
ACMD	ban.cc	/^ACMD(do_unban)$/;"	f
ACMD	boards.cc	/^ACMD(do_board)$/;"	f
ACMD	clerics.cc	/^ACMD(do_concentrate)$/;"	f
ACMD	color.cc	/^ACMD(do_color)$/;"	f
ACMD	db.cc	/^ACMD(do_reload)$/;"	f
ACMD	fight.cc	/^ACMD(do_twohand)$/;"	f
ACMD	graph.cc	/^ACMD(do_wiztrack)$/;"	f
ACMD	interpre.h	/^#define ACMD(/;"	d
ACMD	modify.cc	/^ACMD(do_string)$/;"	f
ACMD	obj2html.cc	/^ACMD(do_obj2html)$/;"	f
ACMD	objsave.cc	/^ACMD(do_rent)$/;"	f
ACMD	olog_hai.cpp	/^ACMD(do_cleave)$/;"	f
ACMD	olog_hai.cpp	/^ACMD(do_frenzy)$/;"	f
ACMD	olog_hai.cpp	/^ACMD(do_overrun)$/;"	f
ACMD	olog_hai.cpp	/^ACMD(do_smash)$/;"	f
ACMD	olog_hai.cpp	/^ACMD(do_stomp)$/;"	f
ACMD	ranger.cc	/^ACMD(do_ambush)$/;"	f
ACMD	ranger.cc	/^ACMD(do_bendtime)$/;"	f
ACMD	ranger.cc	/^ACMD(do_blinding)$/;"	f
ACMD	ranger.cc	/^ACMD(do_calm)$/;"	f
ACMD	ranger.cc	/^ACMD(do_cover)$/;"	f
ACMD	ranger.cc	/^ACMD(do_dismount)$/;"	f
ACMD	ranger.cc	/^ACMD(do_gather_food)$/;"	f
ACMD	ranger.cc	/^ACMD(do_hide)$/;"	f
ACMD	ranger.cc	/^ACMD(do_hunt)$/;"	f
ACMD	ranger.cc	/^ACMD(do_mark)$/;"	f
ACMD	ranger.cc	/^ACMD(do_pick)$/;"	f
ACMD	ranger.cc	/^ACMD(do_ride)$/;"	f
ACMD	ranger.cc	/^ACMD(do_shoot)$/;"	f
ACMD	ranger.cc	/^ACMD(do_sneak)$/;"	f
ACMD	ranger.cc	/^ACMD(do_stalk)$/;"	f
ACMD	ranger.cc	/^ACMD(do_tame)$/;"	f
ACMD	ranger.cc	/^ACMD(do_track)$/;"	f
ACMD	ranger.cc	/^ACMD(do_trap)$/;"	f
ACMD	ranger.cc	/^ACMD(do_whistle)$/;"	f
ACMD	ranger.cc	/^ACMD(do_windblast)$/;"	f
ACMD	shapemob.cc	/^ACMD(do_shape)$/;"	f
ACMD	spec_pro.cc	/^ACMD(do_pracreset)$/;"	f
ACMD	spec_pro.cc	/^ACMD(do_practice)$/;"	f
ACMD	spell_pa.cc	/^ACMD(do_cast)$/;"	f
ACMD	spell_pa.cc	/^ACMD(do_prepare)$/;"	f
ADD_TARGET	interpre.cc	/^#define ADD_TARGET(/;"	d	file:
AFFECT_MODIFY_REMOVE	handler.h	/^#define AFFECT_MODIFY_REMOVE /;"	d
AFFECT_MODIFY_SET	handler.h	/^#define AFFECT_MODIFY_SET /;"	d
AFFECT_MODIFY_TIME	handler.h	/^#define AFFECT_MODIFY_TIME /;"	d
AFFECT_TOTAL_REMOVE	handler.h	/^#define AFFECT_TOTAL_REMOVE /;"	d
AFFECT_TOTAL_SET	handler.h	/^#define AFFECT_TOTAL_SET /;"	d
AFFECT_TOTAL_TIME	handler.h	/^#define AFFECT_TOTAL_TIME /;"	d
AFFECT_TOTAL_UPDATE	handler.h	/^#define AFFECT_TOTAL_UPDATE /;"	d
AFF_BASH	structs.h	/^#define AFF_BASH /;"	d
AFF_BLIND	structs.h	/^#define AFF_BLIND /;"	d
AFF_BREATHE	structs.h	/^#define AFF_BREATHE /;"	d
AFF_CHARM	structs.h	/^#define AFF_CHARM /;"	d
AFF_CONCENTRATION	structs.h	/^#define AFF_CONCENTRATION /;"	d
AFF_CONFUSE	structs.h	/^#define AFF_CONFUSE /;"	d
AFF_CURSE	structs.h	/^#define AFF_CURSE /;"	d
AFF_DETECT_HIDDEN	structs.h	/^#define AFF_DETECT_HIDDEN /;"	d
AFF_DETECT_INVISIBLE	structs.h	/^#define AFF_DETECT_INVISIBLE /;"	d
AFF_DETECT_MAGIC	structs.h	/^#define AFF_DETECT_MAGIC /;"	d
AFF_EVASION	structs.h	/^#define AFF_EVASION /;"	d
AFF_FEAR	structs.h	/^#define AFF_FEAR /;"	d
AFF_FLYING	structs.h	/^#define AFF_FLYING /;"	d
AFF_FOLLOW	structs.h	/^#define AFF_FOLLOW /;"	d
AFF_HALLUCINATE	structs.h	/^#define AFF_HALLUCINATE /;"	d
AFF_HAZE	structs.h	/^#define AFF_HAZE /;"	d
AFF_HIDE	structs.h	/^#define AFF_HIDE /;"	d
AFF_HUNT	structs.h	/^#define AFF_HUNT /;"	d
AFF_INFRARED	structs.h	/^#define AFF_INFRARED /;"	d
AFF_INVISIBLE	structs.h	/^#define AFF_INVISIBLE /;"	d
AFF_MOONVISION	structs.h	/^#define AFF_MOONVISION /;"	d
AFF_POISON	structs.h	/^#define AFF_POISON /;"	d
AFF_SANCTUARY	structs.h	/^#define AFF_SANCTUARY /;"	d
AFF_SHIELD	structs.h	/^#define AFF_SHIELD /;"	d
AFF_SLEEP	structs.h	/^#define AFF_SLEEP /;"	d
AFF_SNEAK	structs.h	/^#define AFF_SNEAK /;"	d
AFF_SWIM	structs.h	/^#define AFF_SWIM /;"	d
AFF_TWOHANDED	structs.h	/^#define AFF_TWOHANDED /;"	d
AFF_UNUSED	structs.h	/^#define AFF_UNUSED /;"	d
AFF_WAITING	structs.h	/^#define AFF_WAITING /;"	d
AFF_WAITWHEEL	structs.h	/^#define AFF_WAITWHEEL /;"	d
AGGRESSIVE_GUARDIAN	structs.h	/^const int constexpr AGGRESSIVE_GUARDIAN = 0;$/;"	v	typeref:typename:const int 
AN	utils.h	/^#define AN(/;"	d
ANA	utils.h	/^#define ANA(/;"	d
APPLY_AGE	structs.h	/^#define APPLY_AGE /;"	d
APPLY_ARMOR	structs.h	/^#define APPLY_ARMOR /;"	d
APPLY_BEND	structs.h	/^#define APPLY_BEND /;"	d
APPLY_BITVECTOR	structs.h	/^#define APPLY_BITVECTOR /;"	d
APPLY_CHAR_HEIGHT	structs.h	/^#define APPLY_CHAR_HEIGHT /;"	d
APPLY_CHAR_WEIGHT	structs.h	/^#define APPLY_CHAR_WEIGHT /;"	d
APPLY_CON	structs.h	/^#define APPLY_CON /;"	d
APPLY_DAMROLL	structs.h	/^#define APPLY_DAMROLL /;"	d
APPLY_DEX	structs.h	/^#define APPLY_DEX /;"	d
APPLY_DODGE	structs.h	/^#define APPLY_DODGE /;"	d
APPLY_EXP	structs.h	/^#define APPLY_EXP /;"	d
APPLY_GOLD	structs.h	/^#define APPLY_GOLD /;"	d
APPLY_HIT	structs.h	/^#define APPLY_HIT /;"	d
APPLY_INT	structs.h	/^#define APPLY_INT /;"	d
APPLY_LEA	structs.h	/^#define APPLY_LEA /;"	d
APPLY_LEVEL	structs.h	/^#define APPLY_LEVEL /;"	d
APPLY_MANA	structs.h	/^#define APPLY_MANA /;"	d
APPLY_MANA_REGEN	structs.h	/^#define APPLY_MANA_REGEN /;"	d
APPLY_MAUL	structs.h	/^#define APPLY_MAUL /;"	d
APPLY_MOVE	structs.h	/^#define APPLY_MOVE /;"	d
APPLY_NONE	structs.h	/^#define APPLY_NONE /;"	d
APPLY_OB	structs.h	/^#define APPLY_OB /;"	d
APPLY_PERCEPTION	structs.h	/^#define APPLY_PERCEPTION /;"	d
APPLY_PK_MAGE	structs.h	/^#define APPLY_PK_MAGE /;"	d
APPLY_PK_MYSTIC	structs.h	/^#define APPLY_PK_MYSTIC /;"	d
APPLY_PK_RANGER	structs.h	/^#define APPLY_PK_RANGER /;"	d
APPLY_PK_WARRIOR	structs.h	/^#define APPLY_PK_WARRIOR /;"	d
APPLY_PROF	structs.h	/^#define APPLY_PROF /;"	d
APPLY_REGEN	structs.h	/^#define APPLY_REGEN /;"	d
APPLY_RESIST	structs.h	/^#define APPLY_RESIST /;"	d
APPLY_SAVING_SPELL	structs.h	/^#define APPLY_SAVING_SPELL /;"	d
APPLY_SPEED	structs.h	/^#define APPLY_SPEED /;"	d
APPLY_SPELL	structs.h	/^#define APPLY_SPELL /;"	d
APPLY_SPELL_PEN	structs.h	/^#define APPLY_SPELL_PEN /;"	d
APPLY_SPELL_POW	structs.h	/^#define APPLY_SPELL_POW /;"	d
APPLY_STR	structs.h	/^#define APPLY_STR /;"	d
APPLY_VISION	structs.h	/^#define APPLY_VISION /;"	d
APPLY_VULN	structs.h	/^#define APPLY_VULN /;"	d
APPLY_WILL	structs.h	/^#define APPLY_WILL /;"	d
APPLY_WILLPOWER	structs.h	/^#define APPLY_WILLPOWER /;"	d
ASIMA_FILE	db.h	/^#define ASIMA_FILE /;"	d
ASPELL	mage.cc	/^ASPELL(spell_beacon)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_black_arrow)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_blaze)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_blink)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_chill_ray)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_cone_of_cold)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_create_light)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_cure_self)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_dark_bolt)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_detect_evil)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_earthquake)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_fireball)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_firebolt)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_flash)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_freeze)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_identify)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_leach)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_lightning_bolt)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_lightning_strike)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_locate_living)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_magic_missile)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_mist_of_baazunga)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_relocate)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_reveal_life)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_searing_darkness)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_shield)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_shout_of_pain)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_spear_of_darkness)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_summon)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_vitalize_self)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_word_of_agony)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_word_of_pain)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_word_of_shock)$/;"	f
ASPELL	mage.cc	/^ASPELL(spell_word_of_sight)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_attune)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_confuse)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_curing)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_curse)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_death_ward)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_detect_hidden)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_detect_magic)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_dispel_regeneration)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_divination)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_enchant_weapon)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_evasion)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_fear)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_guardian)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_hallucinate)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_haze)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_infravision)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_insight)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_mind_block)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_poison)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_pragmatism)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_protection)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_regeneration)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_remove_poison)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_resist_magic)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_resist_poison)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_restlessness)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_revive)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_sanctuary)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_shift)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_slow_digestion)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_terror)$/;"	f
ASPELL	mystic.cc	/^ASPELL(spell_vitality)$/;"	f
ASPELL	spells.h	/^#define ASPELL(/;"	d
ASSIGNMOB	interpre.h	/^#define ASSIGNMOB(/;"	d
ASSIGNOBJ	interpre.h	/^#define ASSIGNOBJ(/;"	d
ASSIGNREALMOB	interpre.h	/^#define ASSIGNREALMOB(/;"	d
ASSIGNREALOBJ	interpre.h	/^#define ASSIGNREALOBJ(/;"	d
ASSIGNROOM	interpre.h	/^#define ASSIGNROOM(/;"	d
AWAKE	utils.h	/^#define AWAKE(/;"	d
B	utility.cc	/^#define B(/;"	d	file:
BACKGROUND_FILE	db.h	/^#define BACKGROUND_FILE /;"	d
BANNED_SITE_LENGTH	db.h	/^#define BANNED_SITE_LENGTH /;"	d
BAN_ALL	db.h	/^#define BAN_ALL /;"	d
BAN_FILE	db.h	/^#define BAN_FILE /;"	d
BAN_NEW	db.h	/^#define BAN_NEW /;"	d
BAN_NOT	db.h	/^#define BAN_NOT /;"	d
BAN_SELECT	db.h	/^#define BAN_SELECT /;"	d
BAREHANDED_DAMAGE	structs.h	/^const int constexpr BAREHANDED_DAMAGE = 2;$/;"	v	typeref:typename:const int 
BASE_EXTENSION	db.cc	/^room_data_extension* room_data::BASE_EXTENSION = 0;$/;"	m	class:room_data	typeref:typename:room_data_extension *
BASE_EXTENSION	structs.h	/^    static room_data_extension* BASE_EXTENSION;$/;"	m	struct:room_data	typeref:typename:room_data_extension *
BASE_LENGTH	db.cc	/^int room_data::BASE_LENGTH = 0;$/;"	m	class:room_data	typeref:typename:int
BASE_LENGTH	structs.h	/^    static int BASE_LENGTH;$/;"	m	struct:room_data	typeref:typename:int
BASE_WORLD	db.cc	/^room_data* room_data::BASE_WORLD = 0;$/;"	m	class:room_data	typeref:typename:room_data *
BASE_WORLD	structs.h	/^    static room_data* BASE_WORLD;$/;"	m	struct:room_data	typeref:typename:room_data *
BFS_ALREADY_THERE	structs.h	/^#define BFS_ALREADY_THERE /;"	d
BFS_ERROR	structs.h	/^#define BFS_ERROR /;"	d
BFS_MARK	structs.h	/^#define BFS_MARK /;"	d
BFS_NO_PATH	structs.h	/^#define BFS_NO_PATH /;"	d
BIG_BROTHER_H	big_brother.h	/^#define BIG_BROTHER_H$/;"	d
BINARY	act_wiz.cc	/^#define BINARY /;"	d	file:
BLOCK_CHANCE	spec_pro.cc	/^#define BLOCK_CHANCE(/;"	d	file:
BLOCK_SIZE	mail.h	/^#define BLOCK_SIZE /;"	d
BLOCK_STR_LEN	structs.h	/^#define BLOCK_STR_LEN /;"	d
BOARDS_H	boards.h	/^#define BOARDS_H$/;"	d
BOARD_DIR	boards.h	/^#define BOARD_DIR /;"	d
BOARD_HTML_DIR	boards.h	/^#define BOARD_HTML_DIR /;"	d
BODYTYPE_ANIMAL	structs.h	/^#define BODYTYPE_ANIMAL /;"	d
BOTH	act_wiz.cc	/^#define BOTH /;"	d	file:
BRF	utils.h	/^#define BRF /;"	d
BUFSIZE	comm.cc	/^#define BUFSIZE /;"	d	file:
BUFSIZE	utility.cc	/^#define BUFSIZE /;"	d	file:
BUF_LEN	fight.cc	/^#define BUF_LEN /;"	d	file:
BUG_FILE	db.h	/^#define BUG_FILE /;"	d
CALL_MASK	utils.h	/^#define CALL_MASK(/;"	d
CALM_WAIT_BEATS	ranger.cc	/^#define CALM_WAIT_BEATS /;"	d	file:
CAN_CARRY_N	utils.h	/^#define CAN_CARRY_N(/;"	d
CAN_CARRY_OBJ	utils.h	/^#define CAN_CARRY_OBJ(/;"	d
CAN_CARRY_W	utils.h	/^#define CAN_CARRY_W(/;"	d
CAN_GET_OBJ	utils.h	/^#define CAN_GET_OBJ(/;"	d
CAN_GO	utility.cc	/^int CAN_GO(struct char_data* ch, int door)$/;"	f	typeref:typename:int
CAN_SEE	utility.cc	/^int CAN_SEE(struct char_data* sub)$/;"	f	typeref:typename:int
CAN_SEE	utility.cc	/^int CAN_SEE(struct char_data* sub, struct char_data* obj, int light_mode)$/;"	f	typeref:typename:int
CAN_SEE_OBJ	utility.cc	/^int CAN_SEE_OBJ(char_data* sub, obj_data* obj)$/;"	f	typeref:typename:int
CAN_WEAR	utils.h	/^#define CAN_WEAR(/;"	d
CAP	utils.h	/^#define CAP(/;"	d
CASH_REGEN	shop.cc	/^#define CASH_REGEN /;"	d	file:
CASTING_FAST	utils.h	/^#define CASTING_FAST /;"	d
CASTING_NORMAL	utils.h	/^#define CASTING_NORMAL /;"	d
CASTING_SLOW	utils.h	/^#define CASTING_SLOW /;"	d
CASTING_TIME	spells.h	/^#define CASTING_TIME(/;"	d
CBBLU	color.h	/^#define CBBLU /;"	d
CBCYN	color.h	/^#define CBCYN /;"	d
CBGRN	color.h	/^#define CBGRN /;"	d
CBLU	color.h	/^#define CBLU /;"	d
CBMAG	color.h	/^#define CBMAG /;"	d
CBRED	color.h	/^#define CBRED /;"	d
CBWHT	color.h	/^#define CBWHT /;"	d
CBYEL	color.h	/^#define CBYEL /;"	d
CC	Makefile	/^CC = g++ -m32 -w -std=c++1z$/;"	m
CCYN	color.h	/^#define CCYN /;"	d
CC_FIX	color.h	/^#define CC_FIX(/;"	d
CC_NORM	color.h	/^#define CC_NORM(/;"	d
CC_USE	color.h	/^#define CC_USE(/;"	d
CFLAGS	Makefile	/^CFLAGS = $(MYFLAGS) $(PROFILE) $(OSFLAGS)$/;"	m
CGRN	color.h	/^#define CGRN /;"	d
CHANCE	spec_pro.cc	/^#define CHANCE /;"	d	file:
CHAR_SIZE	mail.h	/^#define CHAR_SIZE /;"	d
CHECK_ARG_LETTER	mudlle.cc	/^#define CHECK_ARG_LETTER(/;"	d	file:
CHECK_LIST	mudlle2.cc	/^int CHECK_LIST(struct char_data* host, char val)$/;"	f	typeref:typename:int
CHECK_WAIT	utils.h	/^#define CHECK_WAIT(/;"	d
CLEAR	utils.h	/^#define CLEAR(/;"	d
CLEAVE_TIMER	olog_hai.cpp	/^const int constexpr CLEAVE_TIMER = 30;$/;"	v	typeref:typename:const int 
CLOCK_H	clock.h	/^#define CLOCK_H$/;"	d
CMAG	color.h	/^#define CMAG /;"	d
CMD_AFFECTIONS	interpre.h	/^#define CMD_AFFECTIONS /;"	d
CMD_AMBUSH	interpre.h	/^#define CMD_AMBUSH /;"	d
CMD_ASK	interpre.h	/^#define CMD_ASK /;"	d
CMD_ASSIST	interpre.h	/^#define CMD_ASSIST /;"	d
CMD_BASH	interpre.h	/^#define CMD_BASH /;"	d
CMD_BENDTIME	interpre.h	/^#define CMD_BENDTIME /;"	d
CMD_BLINDING	interpre.h	/^#define CMD_BLINDING /;"	d
CMD_BLOCK	interpre.h	/^#define CMD_BLOCK /;"	d
CMD_BUY	interpre.h	/^#define CMD_BUY /;"	d
CMD_CALM	interpre.h	/^#define CMD_CALM /;"	d
CMD_CAST	interpre.h	/^#define CMD_CAST /;"	d
CMD_CHECK	mail.h	/^#define CMD_CHECK /;"	d
CMD_CLEAVE	interpre.h	/^#define CMD_CLEAVE /;"	d
CMD_CLOSE	interpre.h	/^#define CMD_CLOSE /;"	d
CMD_CONCENTRATE	interpre.h	/^#define CMD_CONCENTRATE /;"	d
CMD_COVER	interpre.h	/^#define CMD_COVER /;"	d
CMD_DEFEND	interpre.h	/^#define CMD_DEFEND /;"	d
CMD_EMOTE	interpre.h	/^#define CMD_EMOTE /;"	d
CMD_ENTER	interpre.h	/^#define CMD_ENTER /;"	d
CMD_EXAMINE	interpre.h	/^#define CMD_EXAMINE /;"	d
CMD_FAME	interpre.h	/^#define CMD_FAME /;"	d
CMD_FISH	interpre.h	/^#define CMD_FISH /;"	d
CMD_FRENZY	interpre.h	/^#define CMD_FRENZY /;"	d
CMD_GATHER_FOOD	interpre.h	/^#define CMD_GATHER_FOOD /;"	d
CMD_HIDE	interpre.h	/^#define CMD_HIDE /;"	d
CMD_HIT	interpre.h	/^#define CMD_HIT /;"	d
CMD_JIG	interpre.h	/^#define CMD_JIG /;"	d
CMD_KICK	interpre.h	/^#define CMD_KICK /;"	d
CMD_KILL	interpre.h	/^#define CMD_KILL /;"	d
CMD_KNOCK	interpre.h	/^#define CMD_KNOCK /;"	d
CMD_LIST	interpre.h	/^#define CMD_LIST /;"	d
CMD_LOOK	interpre.h	/^#define CMD_LOOK /;"	d
CMD_MAIL	mail.h	/^#define CMD_MAIL /;"	d
CMD_MARK	interpre.h	/^#define CMD_MARK /;"	d
CMD_MASK_MOVE_PENALTY	interpre.h	/^#define CMD_MASK_MOVE_PENALTY /;"	d
CMD_MASK_NO_UNHIDE	interpre.h	/^#define CMD_MASK_NO_UNHIDE /;"	d
CMD_MASK_STAMINA_PENALTY	interpre.h	/^#define CMD_MASK_STAMINA_PENALTY /;"	d
CMD_NEXT	interpre.h	/^#define CMD_NEXT /;"	d
CMD_OFFER	interpre.h	/^#define CMD_OFFER /;"	d
CMD_OPEN	interpre.h	/^#define CMD_OPEN /;"	d
CMD_ORC_DELAY	interpre.h	/^#define CMD_ORC_DELAY /;"	d
CMD_OVERRUN	interpre.h	/^#define CMD_OVERRUN /;"	d
CMD_PRACRESET	interpre.h	/^#define CMD_PRACRESET /;"	d
CMD_PRACTICE	interpre.h	/^#define CMD_PRACTICE /;"	d
CMD_PRACTISE	interpre.h	/^#define CMD_PRACTISE /;"	d
CMD_PRAY	interpre.h	/^#define CMD_PRAY /;"	d
CMD_PREPARE	interpre.h	/^#define CMD_PREPARE /;"	d
CMD_QUIT	interpre.h	/^#define CMD_QUIT /;"	d
CMD_READ	interpre.h	/^#define CMD_READ /;"	d
CMD_RECEIVE	mail.h	/^#define CMD_RECEIVE /;"	d
CMD_RECITE	interpre.h	/^#define CMD_RECITE /;"	d
CMD_REMOVE	interpre.h	/^#define CMD_REMOVE /;"	d
CMD_RENT	interpre.h	/^#define CMD_RENT /;"	d
CMD_RESCUE	interpre.h	/^#define CMD_RESCUE /;"	d
CMD_SAY	interpre.h	/^#define CMD_SAY /;"	d
CMD_SCRIPT	interpre.h	/^#define CMD_SCRIPT /;"	d
CMD_SEARCH	interpre.h	/^#define CMD_SEARCH /;"	d
CMD_SELL	interpre.h	/^#define CMD_SELL /;"	d
CMD_SEND	interpre.h	/^#define CMD_SEND /;"	d
CMD_SHAPE	interpre.h	/^#define CMD_SHAPE /;"	d
CMD_SHOOT	interpre.h	/^#define CMD_SHOOT /;"	d
CMD_SMASH	interpre.h	/^#define CMD_SMASH /;"	d
CMD_SOCIAL	interpre.h	/^#define CMD_SOCIAL /;"	d
CMD_STALK	interpre.h	/^#define CMD_STALK /;"	d
CMD_STOMP	interpre.h	/^#define CMD_STOMP /;"	d
CMD_SWING	interpre.h	/^#define CMD_SWING /;"	d
CMD_TAME	interpre.h	/^#define CMD_TAME /;"	d
CMD_TELL	interpre.h	/^#define CMD_TELL /;"	d
CMD_TRACK	interpre.h	/^#define CMD_TRACK /;"	d
CMD_TRAP	interpre.h	/^#define CMD_TRAP /;"	d
CMD_USE	interpre.h	/^#define CMD_USE /;"	d
CMD_VALUE	interpre.h	/^#define CMD_VALUE /;"	d
CMD_WHISTLE	interpre.h	/^#define CMD_WHISTLE /;"	d
CMD_WINDBLAST	interpre.h	/^#define CMD_WINDBLAST /;"	d
CMD_WIZNET	interpre.h	/^#define CMD_WIZNET /;"	d
CMD_WRITE	interpre.h	/^#define CMD_WRITE /;"	d
CMD_YELL	interpre.h	/^#define CMD_YELL /;"	d
CMP	utils.h	/^#define CMP /;"	d
CNRM	color.h	/^#define CNRM /;"	d
CODE_SAVER	wait_functions.cpp	/^namespace CODE_SAVER {$/;"	n	namespace:game_types	file:
COLOR_CHAR	color.h	/^#define COLOR_CHAR /;"	d
COLOR_CHAT	color.h	/^#define COLOR_CHAT /;"	d
COLOR_DAMG	color.h	/^#define COLOR_DAMG /;"	d
COLOR_DESC	color.h	/^#define COLOR_DESC /;"	d
COLOR_ENMY	color.h	/^#define COLOR_ENMY /;"	d
COLOR_H	color.h	/^#define COLOR_H$/;"	d
COLOR_HIT	color.h	/^#define COLOR_HIT /;"	d
COLOR_NARR	color.h	/^#define COLOR_NARR /;"	d
COLOR_OBJ	color.h	/^#define COLOR_OBJ /;"	d
COLOR_ROOM	color.h	/^#define COLOR_ROOM /;"	d
COLOR_SAY	color.h	/^#define COLOR_SAY /;"	d
COLOR_TELL	color.h	/^#define COLOR_TELL /;"	d
COLOR_YELL	color.h	/^#define COLOR_YELL /;"	d
COMMANDO	interpre.cc	/^#define COMMANDO(/;"	d	file:
COMM_H	comm.h	/^#define COMM_H$/;"	d
CONSTANTSMARK	consts.cc	/^#define CONSTANTSMARK$/;"	d	file:
CONT_CLOSEABLE	structs.h	/^#define CONT_CLOSEABLE /;"	d
CONT_CLOSED	structs.h	/^#define CONT_CLOSED /;"	d
CONT_LOCKED	structs.h	/^#define CONT_LOCKED /;"	d
CONT_PICKPROOF	structs.h	/^#define CONT_PICKPROOF /;"	d
CON_CLOSE	structs.h	/^#define CON_CLOSE /;"	d
CON_COLOR	structs.h	/^#define CON_COLOR /;"	d
CON_CREATE	structs.h	/^#define CON_CREATE /;"	d
CON_CREATE2	structs.h	/^#define CON_CREATE2 /;"	d
CON_DELCNF1	structs.h	/^#define CON_DELCNF1 /;"	d
CON_DELCNF2	structs.h	/^#define CON_DELCNF2 /;"	d
CON_EXDSCR	structs.h	/^#define CON_EXDSCR /;"	d
CON_LATIN	structs.h	/^#define CON_LATIN /;"	d
CON_LDEAD	structs.h	/^#define CON_LDEAD /;"	d
CON_LINKLS	structs.h	/^#define CON_LINKLS /;"	d
CON_NME	structs.h	/^#define CON_NME /;"	d
CON_NMECNF	structs.h	/^#define CON_NMECNF /;"	d
CON_PLYNG	structs.h	/^#define CON_PLYNG /;"	d
CON_PWDCNF	structs.h	/^#define CON_PWDCNF /;"	d
CON_PWDGET	structs.h	/^#define CON_PWDGET /;"	d
CON_PWDNCNF	structs.h	/^#define CON_PWDNCNF /;"	d
CON_PWDNEW	structs.h	/^#define CON_PWDNEW /;"	d
CON_PWDNQO	structs.h	/^#define CON_PWDNQO /;"	d
CON_PWDNRM	structs.h	/^#define CON_PWDNRM /;"	d
CON_QOWN	structs.h	/^#define CON_QOWN /;"	d
CON_QOWN2	structs.h	/^#define CON_QOWN2 /;"	d
CON_QPROF	structs.h	/^#define CON_QPROF /;"	d
CON_QRACE	structs.h	/^#define CON_QRACE /;"	d
CON_QSEX	structs.h	/^#define CON_QSEX /;"	d
CON_RMOTD	structs.h	/^#define CON_RMOTD /;"	d
CON_SLCT	structs.h	/^#define CON_SLCT /;"	d
COPP_IN_GOLD	structs.h	/^#define COPP_IN_GOLD /;"	d
COPP_IN_SILV	structs.h	/^#define COPP_IN_SILV /;"	d
COPY_COMMAND	platdef.h	/^#define COPY_COMMAND /;"	d
CREATE	utils.h	/^#define CREATE(/;"	d
CREATE1	utils.h	/^#define CREATE1(/;"	d
CRED	color.h	/^#define CRED /;"	d
CREDITS_FILE	db.h	/^#define CREDITS_FILE /;"	d
CRIME_FILE	db.h	/^#define CRIME_FILE /;"	d
CRYO_FACTOR	objsave.cc	/^#define CRYO_FACTOR /;"	d	file:
CRYPT	interpre.h	/^#define CRYPT(/;"	d
CWHT	color.h	/^#define CWHT /;"	d
CYEL	color.h	/^#define CYEL /;"	d
Check_zone_authority	act_wiz.cc	/^int Check_zone_authority(int zonenum, char_data* ch)$/;"	f	typeref:typename:int
Class_points	structs.h	/^    sh_int Class_points[5];$/;"	m	struct:prof_type	typeref:typename:sh_int[5]
Constitution	profs.cc	/^    Constitution,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
Crash_alias_load	objsave.cc	/^int Crash_alias_load(struct char_data* ch, FILE* fp)$/;"	f	typeref:typename:int
Crash_alias_save	objsave.cc	/^int Crash_alias_save(struct char_data* ch, FILE* fp)$/;"	f	typeref:typename:int
Crash_calculate_rent	objsave.cc	/^void Crash_calculate_rent(struct obj_data* obj, int* cost)$/;"	f	typeref:typename:void
Crash_clean_file	objsave.cc	/^int Crash_clean_file(char* name)$/;"	f	typeref:typename:int
Crash_crashsave	objsave.cc	/^void Crash_crashsave(struct char_data* ch, int rent_code)$/;"	f	typeref:typename:void
Crash_delete_crashfile	objsave.cc	/^int Crash_delete_crashfile(struct char_data* ch)$/;"	f	typeref:typename:int
Crash_delete_file	objsave.cc	/^int Crash_delete_file(char* name)$/;"	f	typeref:typename:int
Crash_extract_expensive	objsave.cc	/^void Crash_extract_expensive(struct obj_data* obj)$/;"	f	typeref:typename:void
Crash_extract_norents	objsave.cc	/^void Crash_extract_norents(struct obj_data* obj)$/;"	f	typeref:typename:void
Crash_extract_objs	objsave.cc	/^void Crash_extract_objs(struct obj_data* obj)$/;"	f	typeref:typename:void
Crash_follower_load	objsave.cc	/^void Crash_follower_load(struct char_data* ch, FILE* fp)$/;"	f	typeref:typename:void
Crash_follower_save	objsave.cc	/^void Crash_follower_save(struct char_data* ch, FILE* fp)$/;"	f	typeref:typename:void
Crash_get_file_by_name	objsave.cc	/^FILE* Crash_get_file_by_name(char* name, char* mode)$/;"	f	typeref:typename:FILE *
Crash_get_filename	objsave.cc	/^int Crash_get_filename(char* orig_name, char* filename)$/;"	f	typeref:typename:int
Crash_idlesave	objsave.cc	/^void Crash_idlesave(struct char_data* ch)$/;"	f	typeref:typename:void
Crash_is_unrentable	objsave.cc	/^int Crash_is_unrentable(struct obj_data* obj)$/;"	f	typeref:typename:int
Crash_listrent	objsave.cc	/^void Crash_listrent(struct char_data* ch, char* name)$/;"	f	typeref:typename:void
Crash_load	objsave.cc	/^FILE* Crash_load(char_data* character)$/;"	f	typeref:typename:FILE *
Crash_obj2char	objsave.cc	/^Crash_obj2char(struct char_data* ch, struct obj_file_elem* object)$/;"	f	typeref:struct:obj_data *
Crash_obj2store	objsave.cc	/^int Crash_obj2store(obj_data* obj, char_data* ch,$/;"	f	typeref:typename:int
Crash_offer_rent	objsave.cc	/^int Crash_offer_rent(struct char_data* ch, struct char_data* receptionist,$/;"	f	typeref:typename:int
Crash_rentsave	objsave.cc	/^void Crash_rentsave(struct char_data* ch, int cost)$/;"	f	typeref:typename:void
Crash_report_rent	objsave.cc	/^void Crash_report_rent(struct char_data* ch, struct char_data* recep,$/;"	f	typeref:typename:void
Crash_report_unrentables	objsave.cc	/^int Crash_report_unrentables(struct char_data* ch, struct char_data* recep,$/;"	f	typeref:typename:int
Crash_restore_weight	objsave.cc	/^void Crash_restore_weight(struct obj_data* obj)$/;"	f	typeref:typename:void
Crash_save	objsave.cc	/^int Crash_save(struct obj_data* obj, struct char_data* ch, int pos, FILE* fp)$/;"	f	typeref:typename:int
Crash_save_all	objsave.cc	/^void Crash_save_all(void)$/;"	f	typeref:typename:void
Crash_write_rentcode	objsave.cc	/^int Crash_write_rentcode(struct char_data* ch, FILE* fl, struct rent_info* rent)$/;"	f	typeref:typename:int
DARK	structs.h	/^#define DARK /;"	d
DATA_BLOCK_DATASIZE	mail.h	/^#define DATA_BLOCK_DATASIZE /;"	d
DB_BOOT_MDL	db.h	/^#define DB_BOOT_MDL /;"	d
DB_BOOT_MOB	db.h	/^#define DB_BOOT_MOB /;"	d
DB_BOOT_OBJ	db.h	/^#define DB_BOOT_OBJ /;"	d
DB_BOOT_SCR	db.h	/^#define DB_BOOT_SCR /;"	d
DB_BOOT_SHP	db.h	/^#define DB_BOOT_SHP /;"	d
DB_BOOT_WLD	db.h	/^#define DB_BOOT_WLD /;"	d
DB_BOOT_ZON	db.h	/^#define DB_BOOT_ZON /;"	d
DB_H	db.h	/^#define DB_H$/;"	d
DEATH	structs.h	/^#define DEATH /;"	d
DEFAULT_PROFS	structs.h	/^#define DEFAULT_PROFS /;"	d
DEFENSIVE_GUARDIAN	structs.h	/^const int constexpr DEFENSIVE_GUARDIAN = 1;$/;"	v	typeref:typename:const int 
DELETED_BLOCK	mail.h	/^#define DELETED_BLOCK /;"	d
DEPRECATED_ID_VALUE	structs.h	/^constexpr const sh_int DEPRECATED_ID_VALUE = -255;$/;"	v	typeref:typename:const sh_int
DESCRCHANGE	shapemob.cc	/^#define DESCRCHANGE(/;"	d	file:
DESCRCHANGE	shapeobj.cc	/^#define DESCRCHANGE(/;"	d	file:
DESCRCHANGE	shaperom.cc	/^#define DESCRCHANGE(/;"	d	file:
DESCRCHANGE	shapezon.cc	/^#define DESCRCHANGE(/;"	d	file:
DFLAG_IS_SPAMMING	structs.h	/^#define DFLAG_IS_SPAMMING /;"	d
DFLT_DIR	config.cc	/^char* DFLT_DIR = "lib";$/;"	v	typeref:typename:char *
DFLT_PORT	comm.cc	/^#define DFLT_PORT /;"	d	file:
DIGITCHANGE	shapemob.cc	/^#define DIGITCHANGE(/;"	d	file:
DIGITCHANGE	shapeobj.cc	/^#define DIGITCHANGE(/;"	d	file:
DIGITCHANGE	shaperom.cc	/^#define DIGITCHANGE(/;"	d	file:
DIGITCHANGE	shapezon.cc	/^#define DIGITCHANGE(/;"	d	file:
DIGITCHANGEL	shapemob.cc	/^#define DIGITCHANGEL(/;"	d	file:
DIGITCHANGEL	shaperom.cc	/^#define DIGITCHANGEL(/;"	d	file:
DOWN	structs.h	/^#define DOWN /;"	d
DOWN_LIST	mudlle2.cc	/^void DOWN_LIST(struct char_data* host)$/;"	f	typeref:typename:void
DOWN_STACK	mudlle2.cc	/^void DOWN_STACK(struct char_data* host)$/;"	f	typeref:typename:void
DRINK_POISON	structs.h	/^#define DRINK_POISON /;"	d
DRINK_WATER	structs.h	/^#define DRINK_WATER /;"	d
DRUNK	structs.h	/^#define DRUNK /;"	d
DYNAMIC_TIME	spells.h	/^#define DYNAMIC_TIME /;"	d
Dexterity	profs.cc	/^    Dexterity,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
EAST	structs.h	/^#define EAST /;"	d
ENERGY	structs.h	/^    int ENERGY; \/* current energy *\/$/;"	m	struct:char_special_data	typeref:typename:int
ENE_TO_HIT	structs.h	/^const int constexpr ENE_TO_HIT = 1200;$/;"	v	typeref:typename:const int 
ENE_regen	structs.h	/^    sh_int ENE_regen; \/* Rate at which energy for hitting is regened*\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
EVIL_RACE	utils.h	/^#define EVIL_RACE(/;"	d
EXIT	utils.h	/^#define EXIT(/;"	d
EXPLOIT_ACHIEVEMENT	db.h	/^#define EXPLOIT_ACHIEVEMENT /;"	d
EXPLOIT_BIRTH	db.h	/^#define EXPLOIT_BIRTH /;"	d
EXPLOIT_DEATH	db.h	/^#define EXPLOIT_DEATH /;"	d
EXPLOIT_LEVEL	db.h	/^#define EXPLOIT_LEVEL /;"	d
EXPLOIT_MOBDEATH	db.h	/^#define EXPLOIT_MOBDEATH /;"	d
EXPLOIT_NOTE	db.h	/^#define EXPLOIT_NOTE /;"	d
EXPLOIT_PK	db.h	/^#define EXPLOIT_PK /;"	d
EXPLOIT_POISON	db.h	/^#define EXPLOIT_POISON /;"	d
EXPLOIT_REGEN_DEATH	db.h	/^#define EXPLOIT_REGEN_DEATH /;"	d
EXPLOIT_RETIRED	db.h	/^#define EXPLOIT_RETIRED /;"	d
EXPLOIT_STAT	db.h	/^#define EXPLOIT_STAT /;"	d
EXTENSION_ROOM_HEAD	structs.h	/^#define EXTENSION_ROOM_HEAD /;"	d
EXTENSION_SIZE	structs.h	/^#define EXTENSION_SIZE /;"	d
EXTENSION_START	structs.h	/^#define EXTENSION_START /;"	d
EX_CLOSED	structs.h	/^#define EX_CLOSED /;"	d
EX_DOORISHEAVY	structs.h	/^#define EX_DOORISHEAVY /;"	d
EX_ISBROKEN	structs.h	/^#define EX_ISBROKEN /;"	d
EX_ISDOOR	structs.h	/^#define EX_ISDOOR /;"	d
EX_ISHIDDEN	structs.h	/^#define EX_ISHIDDEN /;"	d
EX_LEVER	structs.h	/^#define EX_LEVER /;"	d
EX_LOCKED	structs.h	/^#define EX_LOCKED /;"	d
EX_NOBLINK	structs.h	/^#define EX_NOBLINK /;"	d
EX_NOBREAK	structs.h	/^#define EX_NOBREAK /;"	d
EX_NOFLEE	structs.h	/^#define EX_NOFLEE /;"	d
EX_NORIDE	structs.h	/^#define EX_NORIDE /;"	d
EX_NOWALK	structs.h	/^#define EX_NOWALK /;"	d
EX_NO_LOOK	structs.h	/^#define EX_NO_LOOK /;"	d
EX_PICKPROOF	structs.h	/^#define EX_PICKPROOF /;"	d
EX_RSLOCKED	structs.h	/^#define EX_RSLOCKED /;"	d
Emergency_save	objsave.cc	/^void Emergency_save(void)$/;"	f	typeref:typename:void
FALSE	config.cc	/^#define FALSE /;"	d	file:
FALSE	utils.h	/^#define FALSE /;"	d
FAST_UPDATE_RATE	structs.h	/^const int constexpr FAST_UPDATE_RATE = SECS_PER_MUD_HOUR * TICS_PER_SECOND \/ PULSE_FAST_UPDATE;$/;"	v	typeref:typename:const int 
FILENAME	boards.h	/^#define FILENAME /;"	d
FIND_ALL	handler.h	/^#define FIND_ALL /;"	d
FIND_ALLDOT	handler.h	/^#define FIND_ALLDOT /;"	d
FIND_CHAR_ROOM	handler.h	/^#define FIND_CHAR_ROOM /;"	d
FIND_CHAR_WORLD	handler.h	/^#define FIND_CHAR_WORLD /;"	d
FIND_INDIV	handler.h	/^#define FIND_INDIV /;"	d
FIND_OBJ_EQUIP	handler.h	/^#define FIND_OBJ_EQUIP /;"	d
FIND_OBJ_INV	handler.h	/^#define FIND_OBJ_INV /;"	d
FIND_OBJ_ROOM	handler.h	/^#define FIND_OBJ_ROOM /;"	d
FIND_OBJ_WORLD	handler.h	/^#define FIND_OBJ_WORLD /;"	d
FIRST_BLOCK_PROC	act_othe.cc	/^#define FIRST_BLOCK_PROC /;"	d	file:
FOLLOWER	spec_pro.cc	/^#define FOLLOWER /;"	d	file:
FOLLOW_GROUP	handler.h	/^#define FOLLOW_GROUP /;"	d
FOLLOW_MOVE	handler.h	/^#define FOLLOW_MOVE /;"	d
FOLLOW_REFOL	handler.h	/^#define FOLLOW_REFOL /;"	d
FOL_GUARDIAN	objsave.cc	/^#define FOL_GUARDIAN /;"	d	file:
FOL_MOUNT	objsave.cc	/^#define FOL_MOUNT /;"	d	file:
FOL_ORC_FRIEND	objsave.cc	/^#define FOL_ORC_FRIEND /;"	d	file:
FOL_TAMED	objsave.cc	/^#define FOL_TAMED /;"	d	file:
FORCERENT_FACTOR	objsave.cc	/^#define FORCERENT_FACTOR /;"	d	file:
FRENZY_TIMER	olog_hai.cpp	/^const int constexpr FRENZY_TIMER = 600;$/;"	v	typeref:typename:const int 
FROM_STACK	mudlle2.cc	/^long FROM_STACK(struct char_data* host)$/;"	f	typeref:typename:long
FULL	structs.h	/^#define FULL /;"	d
FULL_TARGET	interpre.cc	/^#define FULL_TARGET /;"	d	file:
GATHER_ANTIDOTE	ranger.cc	/^const int GATHER_ANTIDOTE = 4615;$/;"	v	typeref:typename:const int
GATHER_ARROW	ranger.cc	/^const int GATHER_ARROW = 2720;$/;"	v	typeref:typename:const int
GATHER_BOW	ranger.cc	/^const int GATHER_BOW = 2700;$/;"	v	typeref:typename:const int
GATHER_DUST	ranger.cc	/^const int GATHER_DUST = 2100;$/;"	v	typeref:typename:const int
GATHER_FOOD	ranger.cc	/^const int GATHER_FOOD = 7218;$/;"	v	typeref:typename:const int
GATHER_LIGHT	ranger.cc	/^const int GATHER_LIGHT = 7007;$/;"	v	typeref:typename:const int
GATHER_POISON	ranger.cc	/^const int GATHER_POISON = 4614;$/;"	v	typeref:typename:const int
GET_ABS_NUM	utils.h	/^#define GET_ABS_NUM(/;"	d
GET_AGE	utils.h	/^#define GET_AGE(/;"	d
GET_ALIAS	utils.h	/^#define GET_ALIAS(/;"	d
GET_ALIGNMENT	utils.h	/^#define GET_ALIGNMENT(/;"	d
GET_AMBUSHED	utils.h	/^#define GET_AMBUSHED(/;"	d
GET_BAL_STR	utils.h	/^#define GET_BAL_STR(/;"	d
GET_BODYPART	utils.h	/^#define GET_BODYPART(/;"	d
GET_BODYTYPE	utils.h	/^#define GET_BODYTYPE(/;"	d
GET_CASTING	utils.h	/^#define GET_CASTING(/;"	d
GET_CON	utils.h	/^#define GET_CON(/;"	d
GET_COND	utils.h	/^#define GET_COND(/;"	d
GET_CON_BASE	utils.h	/^#define GET_CON_BASE(/;"	d
GET_CURRENT_PARRY	utils.h	/^#define GET_CURRENT_PARRY(/;"	d
GET_CURRPART	utils.h	/^#define GET_CURRPART(/;"	d
GET_DAMAGE	utils.h	/^#define GET_DAMAGE(/;"	d
GET_DEX	utils.h	/^#define GET_DEX(/;"	d
GET_DEX_BASE	utils.h	/^#define GET_DEX_BASE(/;"	d
GET_DIFFICULTY	utils.h	/^#define GET_DIFFICULTY(/;"	d
GET_DODGE	utils.h	/^#define GET_DODGE(/;"	d
GET_ENCUMB_WEIGHT	utils.h	/^#define GET_ENCUMB_WEIGHT(/;"	d
GET_ENERGY	utils.h	/^#define GET_ENERGY(/;"	d
GET_ENE_REGEN	utils.h	/^#define GET_ENE_REGEN(/;"	d
GET_EXP	utils.h	/^#define GET_EXP(/;"	d
GET_GOLD	utils.h	/^#define GET_GOLD(/;"	d
GET_HEIGHT	utils.h	/^#define GET_HEIGHT(/;"	d
GET_HIDING	utils.h	/^#define GET_HIDING(/;"	d
GET_HIT	utils.h	/^#define GET_HIT(/;"	d
GET_HOME	utils.h	/^#define GET_HOME(/;"	d
GET_IDNUM	utils.h	/^#define GET_IDNUM(/;"	d
GET_INDEX	utils.h	/^#define GET_INDEX(/;"	d
GET_INT	utils.h	/^#define GET_INT(/;"	d
GET_INT_BASE	utils.h	/^#define GET_INT_BASE(/;"	d
GET_INVIS_LEV	utils.h	/^#define GET_INVIS_LEV(/;"	d
GET_ITEM_TYPE	utils.h	/^#define GET_ITEM_TYPE(/;"	d
GET_KNOWLEDGE	utils.h	/^#define GET_KNOWLEDGE(/;"	d
GET_LAWFULNESS	utils.h	/^#define GET_LAWFULNESS(/;"	d
GET_LEA	utils.h	/^#define GET_LEA(/;"	d
GET_LEA_BASE	utils.h	/^#define GET_LEA_BASE(/;"	d
GET_LEVEL	utils.h	/^#define GET_LEVEL(/;"	d
GET_LEVELA	utils.h	/^#define GET_LEVELA(/;"	d
GET_LEVELB	utils.h	/^#define GET_LEVELB(/;"	d
GET_LOADLINE	utils.h	/^#define GET_LOADLINE(/;"	d
GET_LOADROOM	utils.h	/^#define GET_LOADROOM(/;"	d
GET_LOADZONE	utils.h	/^#define GET_LOADZONE(/;"	d
GET_MANA	utils.h	/^#define GET_MANA(/;"	d
GET_MAX_HIT	utils.h	/^#define GET_MAX_HIT(/;"	d
GET_MAX_MANA	utils.h	/^#define GET_MAX_MANA(/;"	d
GET_MAX_MINI_LEVEL	utils.h	/^#define GET_MAX_MINI_LEVEL(/;"	d
GET_MAX_MOVE	utils.h	/^#define GET_MAX_MOVE(/;"	d
GET_MAX_RACE_PROF_LEVEL	utils.h	/^#define GET_MAX_RACE_PROF_LEVEL(/;"	d
GET_MENTAL_DELAY	utils.h	/^#define GET_MENTAL_DELAY(/;"	d
GET_MINI_LEVEL	utils.h	/^#define GET_MINI_LEVEL(/;"	d
GET_MOVE	utils.h	/^#define GET_MOVE(/;"	d
GET_NAME	utils.h	/^#define GET_NAME(/;"	d
GET_OB	utils.h	/^#define GET_OB(/;"	d
GET_OBJ_WEIGHT	utils.h	/^#define GET_OBJ_WEIGHT(/;"	d
GET_PARRY	utils.h	/^#define GET_PARRY(/;"	d
GET_PERCEPTION	utils.h	/^#define GET_PERCEPTION(/;"	d
GET_POS	utils.h	/^#define GET_POS(/;"	d
GET_POSITION	utils.h	/^#define GET_POSITION(/;"	d
GET_PROF	utils.h	/^#define GET_PROF(/;"	d
GET_PROF_COOF	utils.h	/^#define GET_PROF_COOF(/;"	d
GET_PROF_LEVEL	utils.h	/^#define GET_PROF_LEVEL(/;"	d
GET_PROF_POINTS	utils.h	/^#define GET_PROF_POINTS(/;"	d
GET_RACE	utils.h	/^#define GET_RACE(/;"	d
GET_RAW_KNOWLEDGE	utils.h	/^#define GET_RAW_KNOWLEDGE(/;"	d
GET_RAW_SKILL	utils.h	/^#define GET_RAW_SKILL(/;"	d
GET_REROLLS	utils.h	/^#define GET_REROLLS(/;"	d
GET_RESISTANCES	utils.h	/^#define GET_RESISTANCES(/;"	d
GET_RP_FLAG	utils.h	/^#define GET_RP_FLAG(/;"	d
GET_SAVE	utils.h	/^#define GET_SAVE(/;"	d
GET_SEX	utils.h	/^#define GET_SEX(/;"	d
GET_SHOOTING	utils.h	/^#define GET_SHOOTING(/;"	d
GET_SKILL	utils.h	/^#define GET_SKILL(/;"	d
GET_SPEC	utils.h	/^#define GET_SPEC(/;"	d
GET_SPELL_PEN	utils.h	/^#define GET_SPELL_PEN(/;"	d
GET_SPELL_POWER	utils.h	/^#define GET_SPELL_POWER(/;"	d
GET_SPIRIT	utils.h	/^#define GET_SPIRIT(/;"	d
GET_STR	utils.h	/^#define GET_STR(/;"	d
GET_STR_BASE	utils.h	/^#define GET_STR_BASE(/;"	d
GET_TACTICS	utils.h	/^#define GET_TACTICS(/;"	d
GET_TARGET_TEXT	structs.h	/^#define GET_TARGET_TEXT(/;"	d
GET_TITLE	utils.h	/^#define GET_TITLE(/;"	d
GET_URUK_MAGE_PENALTY	utils.h	/^#define GET_URUK_MAGE_PENALTY(/;"	d
GET_VNUM	utils.h	/^#define GET_VNUM(/;"	d
GET_VULNERABILITIES	utils.h	/^#define GET_VULNERABILITIES(/;"	d
GET_WAIT_PRIORITY	utils.h	/^#define GET_WAIT_PRIORITY(/;"	d
GET_WEIGHT	utils.h	/^#define GET_WEIGHT(/;"	d
GET_WILL	utils.h	/^#define GET_WILL(/;"	d
GET_WILLPOWER	utils.h	/^#define GET_WILLPOWER(/;"	d
GET_WILL_BASE	utils.h	/^#define GET_WILL_BASE(/;"	d
GET_WORN_WEIGHT	utils.h	/^#define GET_WORN_WEIGHT(/;"	d
GLOBAL_COOLDOWN_COUNTER	skill_timer.h	/^    const int GLOBAL_COOLDOWN_COUNTER = 2;$/;"	m	class:game_timer::skill_timer	typeref:typename:const int
GLOBAL_SKILL	skill_timer.h	/^    const int GLOBAL_SKILL = -1;$/;"	m	class:game_timer::skill_timer	typeref:typename:const int
GODROOM	structs.h	/^#define GODROOM /;"	d
GOD_ROOMS_ZONE	act_wiz.cc	/^#define GOD_ROOMS_ZONE /;"	d	file:
GREETINGS	config.cc	/^char* GREETINGS = "\\n\\r"$/;"	v	typeref:typename:char *
G_FILENAME	boards.h	/^#define G_FILENAME(/;"	d
G_READ_LVL	boards.h	/^#define G_READ_LVL(/;"	d
G_REMOVE_LVL	boards.h	/^#define G_REMOVE_LVL(/;"	d
G_RNUM	boards.h	/^#define G_RNUM(/;"	d
G_VNUM	boards.h	/^#define G_VNUM(/;"	d
G_WRITE_LVL	boards.h	/^#define G_WRITE_LVL(/;"	d
HANDBOOK_FILE	db.h	/^#define HANDBOOK_FILE /;"	d
HANDLER_H	handler.h	/^#define HANDLER_H$/;"	d
HEADER_BLOCK	mail.h	/^#define HEADER_BLOCK /;"	d
HEADER_BLOCK_DATASIZE	mail.h	/^#define HEADER_BLOCK_DATASIZE /;"	d
HEALTH_PROF_CUTOFF	profs.cc	/^const int HEALTH_PROF_CUTOFF = 3000;$/;"	v	namespace:_INTERNAL	typeref:typename:const int
HELP_KWRD_FILE	db.h	/^#define HELP_KWRD_FILE /;"	d
HELP_PAGE_FILE	db.h	/^#define HELP_PAGE_FILE /;"	d
HERALD_LEN	spec_pro.cc	/^#define HERALD_LEN /;"	d	file:
HIDING_SNUCK_IN	structs.h	/^#define HIDING_SNUCK_IN /;"	d
HIDING_WELL	structs.h	/^#define HIDING_WELL /;"	d
HMHR	utils.h	/^#define HMHR(/;"	d
HOLD	structs.h	/^#define HOLD /;"	d
HOST_LEN	structs.h	/^const int constexpr HOST_LEN = 30; \/* Used in char_file_u *DO*NOT*CHANGE* *\/$/;"	v	typeref:typename:const int 
HSHR	utils.h	/^#define HSHR(/;"	d
HSSH	utils.h	/^#define HSSH(/;"	d
IDEA_FILE	db.h	/^#define IDEA_FILE /;"	d
IF_STR	utils.h	/^#define IF_STR(/;"	d
IMMLIST_FILE	db.h	/^#define IMMLIST_FILE /;"	d
IMOTD_FILE	db.h	/^#define IMOTD_FILE /;"	d
INDEX_FILE	db.h	/^#define INDEX_FILE /;"	d
INDEX_SIZE	boards.h	/^#define INDEX_SIZE /;"	d
INDOORS	structs.h	/^#define INDOORS /;"	d
INFO_FILE	db.h	/^#define INFO_FILE /;"	d
INTERPRE_H	interpre.h	/^#define INTERPRE_H$/;"	d
INT_SIZE	mail.h	/^#define INT_SIZE /;"	d
INVALID_GUARDIAN	structs.h	/^const int constexpr INVALID_GUARDIAN = -1;$/;"	v	typeref:typename:const int 
ISNEWL	utils.h	/^#define ISNEWL(/;"	d
IS_AFFECTED	utils.h	/^#define IS_AFFECTED(/;"	d
IS_AGGR_TO	utils.h	/^#define IS_AGGR_TO(/;"	d
IS_ARTIFACT	utils.h	/^#define IS_ARTIFACT(/;"	d
IS_CARRYING_N	utils.h	/^#define IS_CARRYING_N(/;"	d
IS_CARRYING_W	utils.h	/^#define IS_CARRYING_W(/;"	d
IS_CLOSED	graph.cc	/^#define IS_CLOSED(/;"	d	file:
IS_DARK	utils.h	/^#define IS_DARK(/;"	d
IS_EVIL	utils.h	/^#define IS_EVIL(/;"	d
IS_GOOD	utils.h	/^#define IS_GOOD(/;"	d
IS_LIGHT	utils.h	/^#define IS_LIGHT(/;"	d
IS_MARKED	graph.cc	/^#define IS_MARKED(/;"	d	file:
IS_MENTAL	utils.h	/^#define IS_MENTAL(/;"	d
IS_MOB	utils.h	/^#define IS_MOB(/;"	d
IS_NEUTRAL	utils.h	/^#define IS_NEUTRAL(/;"	d
IS_NPC	utils.h	/^#define IS_NPC(/;"	d
IS_OBJ_STAT	utils.h	/^#define IS_OBJ_STAT(/;"	d
IS_PHYSICAL	fight.cc	/^#define IS_PHYSICAL(/;"	d	file:
IS_RESISTANT	utils.h	/^#define IS_RESISTANT(/;"	d
IS_RIDDEN	utils.h	/^#define IS_RIDDEN(/;"	d
IS_RIDING	utils.h	/^#define IS_RIDING(/;"	d
IS_SET	utils.h	/^#define IS_SET(/;"	d
IS_SHADOW	utils.h	/^#define IS_SHADOW(/;"	d
IS_SHADOWY_EXIT	utils.h	/^#define IS_SHADOWY_EXIT(/;"	d
IS_SUNLIT_EXIT	utils.h	/^#define IS_SUNLIT_EXIT(/;"	d
IS_TWOHANDED	utils.h	/^#define IS_TWOHANDED(/;"	d
IS_VULNERABLE	utils.h	/^#define IS_VULNERABLE(/;"	d
IS_WATER	utils.h	/^#define IS_WATER(/;"	d
ITEM_ANTI_EVIL	structs.h	/^#define ITEM_ANTI_EVIL /;"	d
ITEM_ANTI_GOOD	structs.h	/^#define ITEM_ANTI_GOOD /;"	d
ITEM_ANTI_NEUTRAL	structs.h	/^#define ITEM_ANTI_NEUTRAL /;"	d
ITEM_ARMOR	structs.h	/^#define ITEM_ARMOR /;"	d
ITEM_BEORNING	structs.h	/^#define ITEM_BEORNING /;"	d
ITEM_BOAT	structs.h	/^#define ITEM_BOAT /;"	d
ITEM_BREAKABLE	structs.h	/^#define ITEM_BREAKABLE /;"	d
ITEM_BROKEN	structs.h	/^#define ITEM_BROKEN /;"	d
ITEM_CONTAINER	structs.h	/^#define ITEM_CONTAINER /;"	d
ITEM_DARK	structs.h	/^#define ITEM_DARK /;"	d
ITEM_DRINKCON	structs.h	/^#define ITEM_DRINKCON /;"	d
ITEM_DWARF	structs.h	/^#define ITEM_DWARF /;"	d
ITEM_EVIL	structs.h	/^#define ITEM_EVIL /;"	d
ITEM_FIREWEAPON	structs.h	/^#define ITEM_FIREWEAPON /;"	d
ITEM_FOOD	structs.h	/^#define ITEM_FOOD /;"	d
ITEM_FOUNTAIN	structs.h	/^#define ITEM_FOUNTAIN /;"	d
ITEM_GLOW	structs.h	/^#define ITEM_GLOW /;"	d
ITEM_HARADRIM	structs.h	/^#define ITEM_HARADRIM /;"	d
ITEM_HOBBIT	structs.h	/^#define ITEM_HOBBIT /;"	d
ITEM_HOLD	structs.h	/^#define ITEM_HOLD /;"	d
ITEM_HUM	structs.h	/^#define ITEM_HUM /;"	d
ITEM_HUMAN	structs.h	/^#define ITEM_HUMAN /;"	d
ITEM_IMM	structs.h	/^#define ITEM_IMM /;"	d
ITEM_INVISIBLE	structs.h	/^#define ITEM_INVISIBLE /;"	d
ITEM_KEY	structs.h	/^#define ITEM_KEY /;"	d
ITEM_LEVER	structs.h	/^#define ITEM_LEVER /;"	d
ITEM_LIGHT	structs.h	/^#define ITEM_LIGHT /;"	d
ITEM_MAGIC	structs.h	/^#define ITEM_MAGIC /;"	d
ITEM_MAGUS	structs.h	/^#define ITEM_MAGUS /;"	d
ITEM_MISSILE	structs.h	/^#define ITEM_MISSILE /;"	d
ITEM_MOBORC	structs.h	/^#define ITEM_MOBORC /;"	d
ITEM_MONEY	structs.h	/^#define ITEM_MONEY /;"	d
ITEM_NODROP	structs.h	/^#define ITEM_NODROP /;"	d
ITEM_NOINVIS	structs.h	/^#define ITEM_NOINVIS /;"	d
ITEM_NORENT	structs.h	/^#define ITEM_NORENT /;"	d
ITEM_NOTE	structs.h	/^#define ITEM_NOTE /;"	d
ITEM_OLOGHAI	structs.h	/^#define ITEM_OLOGHAI /;"	d
ITEM_ORC	structs.h	/^#define ITEM_ORC /;"	d
ITEM_OTHER	structs.h	/^#define ITEM_OTHER /;"	d
ITEM_PEN	structs.h	/^#define ITEM_PEN /;"	d
ITEM_POTION	structs.h	/^#define ITEM_POTION /;"	d
ITEM_SCROLL	structs.h	/^#define ITEM_SCROLL /;"	d
ITEM_SHIELD	structs.h	/^#define ITEM_SHIELD /;"	d
ITEM_STAFF	structs.h	/^#define ITEM_STAFF /;"	d
ITEM_TAKE	structs.h	/^#define ITEM_TAKE /;"	d
ITEM_THROW	structs.h	/^#define ITEM_THROW /;"	d
ITEM_TRAP	structs.h	/^#define ITEM_TRAP /;"	d
ITEM_TRASH	structs.h	/^#define ITEM_TRASH /;"	d
ITEM_TREASURE	structs.h	/^#define ITEM_TREASURE /;"	d
ITEM_URUK	structs.h	/^#define ITEM_URUK /;"	d
ITEM_WAND	structs.h	/^#define ITEM_WAND /;"	d
ITEM_WEAPON	structs.h	/^#define ITEM_WEAPON /;"	d
ITEM_WEAR_ABOUT	structs.h	/^#define ITEM_WEAR_ABOUT /;"	d
ITEM_WEAR_ARMS	structs.h	/^#define ITEM_WEAR_ARMS /;"	d
ITEM_WEAR_BACK	structs.h	/^#define ITEM_WEAR_BACK /;"	d
ITEM_WEAR_BELT	structs.h	/^#define ITEM_WEAR_BELT /;"	d
ITEM_WEAR_BODY	structs.h	/^#define ITEM_WEAR_BODY /;"	d
ITEM_WEAR_FEET	structs.h	/^#define ITEM_WEAR_FEET /;"	d
ITEM_WEAR_FINGER	structs.h	/^#define ITEM_WEAR_FINGER /;"	d
ITEM_WEAR_HANDS	structs.h	/^#define ITEM_WEAR_HANDS /;"	d
ITEM_WEAR_HEAD	structs.h	/^#define ITEM_WEAR_HEAD /;"	d
ITEM_WEAR_LEGS	structs.h	/^#define ITEM_WEAR_LEGS /;"	d
ITEM_WEAR_NECK	structs.h	/^#define ITEM_WEAR_NECK /;"	d
ITEM_WEAR_SHIELD	structs.h	/^#define ITEM_WEAR_SHIELD /;"	d
ITEM_WEAR_WAISTE	structs.h	/^#define ITEM_WEAR_WAISTE /;"	d
ITEM_WEAR_WRIST	structs.h	/^#define ITEM_WEAR_WRIST /;"	d
ITEM_WIELD	structs.h	/^#define ITEM_WIELD /;"	d
ITEM_WILLPOWER	structs.h	/^#define ITEM_WILLPOWER /;"	d
ITEM_WOODELF	structs.h	/^#define ITEM_WOODELF /;"	d
ITEM_WORN	structs.h	/^#define ITEM_WORN /;"	d
Intelligence	profs.cc	/^    Intelligence,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
Invalid	profs.cc	/^    Invalid,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
KEY_AB	db.cc	/^#define KEY_AB(/;"	d	file:
KEY_AFF	db.cc	/^#define KEY_AFF(/;"	d	file:
KEY_ARRAY	db.cc	/^#define KEY_ARRAY(/;"	d	file:
KEY_INT	db.cc	/^#define KEY_INT(/;"	d	file:
KEY_LONG_STR	db.cc	/^#define KEY_LONG_STR(/;"	d	file:
KEY_STATS	db.cc	/^#define KEY_STATS(/;"	d	file:
KEY_STR	db.cc	/^#define KEY_STR(/;"	d	file:
KIT_ALWAYS	spec_pro.cc	/^#define KIT_ALWAYS /;"	d	file:
KIT_ARMOR	spec_pro.cc	/^#define KIT_ARMOR /;"	d	file:
KIT_CLASSALL	spec_pro.cc	/^#define KIT_CLASSALL /;"	d	file:
KIT_DARKIE	spec_pro.cc	/^#define KIT_DARKIE /;"	d	file:
KIT_DWA	spec_pro.cc	/^#define KIT_DWA /;"	d	file:
KIT_EAST	spec_pro.cc	/^#define KIT_EAST /;"	d	file:
KIT_HARAD	spec_pro.cc	/^#define KIT_HARAD /;"	d	file:
KIT_HIGH	spec_pro.cc	/^#define KIT_HIGH /;"	d	file:
KIT_HOB	spec_pro.cc	/^#define KIT_HOB /;"	d	file:
KIT_HUM	spec_pro.cc	/^#define KIT_HUM /;"	d	file:
KIT_LEGEND	spec_pro.cc	/^#define KIT_LEGEND /;"	d	file:
KIT_LHUTH	spec_pro.cc	/^#define KIT_LHUTH /;"	d	file:
KIT_LOWBIE	spec_pro.cc	/^#define KIT_LOWBIE /;"	d	file:
KIT_MAGE	spec_pro.cc	/^#define KIT_MAGE /;"	d	file:
KIT_MIDBIE	spec_pro.cc	/^#define KIT_MIDBIE /;"	d	file:
KIT_MYSTIC	spec_pro.cc	/^#define KIT_MYSTIC /;"	d	file:
KIT_NOARMOR	spec_pro.cc	/^#define KIT_NOARMOR /;"	d	file:
KIT_ORC	spec_pro.cc	/^#define KIT_ORC /;"	d	file:
KIT_RACEALL	spec_pro.cc	/^#define KIT_RACEALL /;"	d	file:
KIT_RANGER	spec_pro.cc	/^#define KIT_RANGER /;"	d	file:
KIT_THIRD	spec_pro.cc	/^#define KIT_THIRD /;"	d	file:
KIT_URUK	spec_pro.cc	/^#define KIT_URUK /;"	d	file:
KIT_WARRIOR	spec_pro.cc	/^#define KIT_WARRIOR /;"	d	file:
KIT_WELF	spec_pro.cc	/^#define KIT_WELF /;"	d	file:
KIT_WHITIE	spec_pro.cc	/^#define KIT_WHITIE /;"	d	file:
LANG_ANIMAL	structs.h	/^#define LANG_ANIMAL /;"	d
LANG_BASIC	structs.h	/^#define LANG_BASIC /;"	d
LANG_HUMAN	structs.h	/^#define LANG_HUMAN /;"	d
LANG_ORC	structs.h	/^#define LANG_ORC /;"	d
LARGE_BUFSIZE	structs.h	/^const int constexpr LARGE_BUFSIZE = 16384;$/;"	v	typeref:typename:const int 
LASTDEATH_FILE	db.h	/^#define LASTDEATH_FILE /;"	d
LAST_BLOCK	mail.h	/^#define LAST_BLOCK /;"	d
LEADER	pkill.h	/^} LEADER;$/;"	t	typeref:struct:__anonb27b44b70208
LEARN_COOF	spells.h	/^#define LEARN_COOF /;"	d
LEARN_LEVEL	spells.h	/^#define LEARN_LEVEL /;"	d
LEARN_SPEC	spells.h	/^#define LEARN_SPEC /;"	d
LEA_PRAC_FACTOR	structs.h	/^const int constexpr LEA_PRAC_FACTOR = 5;$/;"	v	typeref:typename:const int 
LEVEL_AREAGOD	structs.h	/^const int constexpr LEVEL_AREAGOD = 95;$/;"	v	typeref:typename:const int 
LEVEL_FREEZE	structs.h	/^const int constexpr LEVEL_FREEZE = LEVEL_PERMIMM;$/;"	v	typeref:typename:const int 
LEVEL_GOD	structs.h	/^const int constexpr LEVEL_GOD = 93;$/;"	v	typeref:typename:const int 
LEVEL_GRGOD	structs.h	/^const int constexpr LEVEL_GRGOD = 97;$/;"	v	typeref:typename:const int 
LEVEL_IMMORT	structs.h	/^const int constexpr LEVEL_IMMORT = 91;$/;"	v	typeref:typename:const int 
LEVEL_IMPL	structs.h	/^const int constexpr LEVEL_IMPL = 100;$/;"	v	typeref:typename:const int 
LEVEL_MAX	structs.h	/^const int constexpr LEVEL_MAX = 30;$/;"	v	typeref:typename:const int 
LEVEL_MINIMM	structs.h	/^const int constexpr LEVEL_MINIMM = LEVEL_IMMORT; \/* The lowest immortal level *\/$/;"	v	typeref:typename:const int 
LEVEL_PERMIMM	structs.h	/^const int constexpr LEVEL_PERMIMM = 94;$/;"	v	typeref:typename:const int 
LIGHT_WEAPON_WEIGHT_CUTOFF	structs.h	/^const int constexpr LIGHT_WEAPON_WEIGHT_CUTOFF = 235;$/;"	v	typeref:typename:const int 
LIMITS_H	limits.h	/^#define LIMITS_H$/;"	d
LINECHANGE	shapemob.cc	/^#define LINECHANGE(/;"	d	file:
LINECHANGE	shapeobj.cc	/^#define LINECHANGE(/;"	d	file:
LINECHANGE	shaperom.cc	/^#define LINECHANGE(/;"	d	file:
LINECHANGE	shapezon.cc	/^#define LINECHANGE(/;"	d	file:
LIQ_ALE	structs.h	/^#define LIQ_ALE /;"	d
LIQ_BEER	structs.h	/^#define LIQ_BEER /;"	d
LIQ_BLOOD	structs.h	/^#define LIQ_BLOOD /;"	d
LIQ_CLEARWATER	structs.h	/^#define LIQ_CLEARWATER /;"	d
LIQ_COFFE	structs.h	/^#define LIQ_COFFE /;"	d
LIQ_DARKALE	structs.h	/^#define LIQ_DARKALE /;"	d
LIQ_FIREBRT	structs.h	/^#define LIQ_FIREBRT /;"	d
LIQ_LEMONADE	structs.h	/^#define LIQ_LEMONADE /;"	d
LIQ_LOCALSPC	structs.h	/^#define LIQ_LOCALSPC /;"	d
LIQ_MILK	structs.h	/^#define LIQ_MILK /;"	d
LIQ_SALTWATER	structs.h	/^#define LIQ_SALTWATER /;"	d
LIQ_SLIME	structs.h	/^#define LIQ_SLIME /;"	d
LIQ_TEA	structs.h	/^#define LIQ_TEA /;"	d
LIQ_WATER	structs.h	/^#define LIQ_WATER /;"	d
LIQ_WHISKY	structs.h	/^#define LIQ_WHISKY /;"	d
LIQ_WINE	structs.h	/^#define LIQ_WINE /;"	d
LONG_SIZE	mail.h	/^#define LONG_SIZE /;"	d
LOOT_DECAY_TIME	config.cc	/^int LOOT_DECAY_TIME = 5;$/;"	v	typeref:typename:int
LOWER	utils.h	/^#define LOWER(/;"	d
Learning	profs.cc	/^    Learning,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
MAIL_FILE	db.h	/^#define MAIL_FILE /;"	d
MAIL_H	mail.h	/^#define MAIL_H$/;"	d
MARK	graph.cc	/^#define MARK(/;"	d	file:
MATERIAL_CHAIN	structs.h	/^#define MATERIAL_CHAIN /;"	d
MATERIAL_CLOTH	structs.h	/^#define MATERIAL_CLOTH /;"	d
MATERIAL_CRYSTAL	structs.h	/^#define MATERIAL_CRYSTAL /;"	d
MATERIAL_FUR	structs.h	/^#define MATERIAL_FUR /;"	d
MATERIAL_GLASS	structs.h	/^#define MATERIAL_GLASS /;"	d
MATERIAL_GOLD	structs.h	/^#define MATERIAL_GOLD /;"	d
MATERIAL_LEATHER	structs.h	/^#define MATERIAL_LEATHER /;"	d
MATERIAL_METAL	structs.h	/^#define MATERIAL_METAL /;"	d
MATERIAL_MITHRIL	structs.h	/^#define MATERIAL_MITHRIL /;"	d
MATERIAL_SILVER	structs.h	/^#define MATERIAL_SILVER /;"	d
MATERIAL_STONE	structs.h	/^#define MATERIAL_STONE /;"	d
MATERIAL_WOOD	structs.h	/^#define MATERIAL_WOOD /;"	d
MAX_AFFECT	structs.h	/^#define MAX_AFFECT /;"	d
MAX_ALIAS	structs.h	/^#define MAX_ALIAS /;"	d
MAX_BIG_BOARD_MESSAGES	boards.h	/^#define MAX_BIG_BOARD_MESSAGES /;"	d
MAX_BOARD_MESSAGES	boards.h	/^#define MAX_BOARD_MESSAGES /;"	d
MAX_BODYPARTS	structs.h	/^const int constexpr MAX_BODYPARTS = 11;$/;"	v	typeref:typename:const int 
MAX_BODYTYPES	structs.h	/^const int constexpr MAX_BODYTYPES = 16;$/;"	v	typeref:typename:const int 
MAX_CHARACTERS	structs.h	/^const int constexpr MAX_CHARACTERS = 64000;$/;"	v	typeref:typename:const int 
MAX_CMD_LIST	interpre.h	/^#define MAX_CMD_LIST /;"	d
MAX_COLOR_FIELDS	color.h	/^#define MAX_COLOR_FIELDS /;"	d
MAX_DESCRIPTORS_AVAILABLE	comm.cc	/^#define MAX_DESCRIPTORS_AVAILABLE /;"	d	file:
MAX_FOLLOWER	spec_pro.cc	/^#define MAX_FOLLOWER /;"	d	file:
MAX_HOSTNAME	comm.cc	/^#define MAX_HOSTNAME /;"	d	file:
MAX_INPUT_LENGTH	structs.h	/^const int constexpr MAX_INPUT_LENGTH = 255;$/;"	v	typeref:typename:const int 
MAX_ITEMS	structs.h	/^const int constexpr MAX_ITEMS = 153;$/;"	v	typeref:typename:const int 
MAX_LEADER_STRING	act_info.cc	/^#define MAX_LEADER_STRING /;"	d	file:
MAX_MAIL_MESSAGES	boards.h	/^#define MAX_MAIL_MESSAGES /;"	d
MAX_MAIL_SIZE	mail.h	/^#define MAX_MAIL_SIZE /;"	d
MAX_MAUL_DODGE	handler.cc	/^#define MAX_MAUL_DODGE /;"	d	file:
MAX_MAXBOARD	structs.h	/^const int constexpr MAX_MAXBOARD = 22; \/* the max number of boards ever -  *\/$/;"	v	typeref:typename:const int 
MAX_MAZE_RENT_MAPPINGS	db.h	/^#define MAX_MAZE_RENT_MAPPINGS /;"	d
MAX_MESSAGES	structs.h	/^const int constexpr MAX_MESSAGES = 255;$/;"	v	typeref:typename:const int 
MAX_MESSAGE_LENGTH	boards.h	/^#define MAX_MESSAGE_LENGTH /;"	d
MAX_MUDLLE_BUFFER	mudlle.h	/^#define MAX_MUDLLE_BUFFER /;"	d
MAX_NAME_LENGTH	structs.h	/^const int constexpr MAX_NAME_LENGTH = 12;$/;"	v	typeref:typename:const int 
MAX_NOTE_LENGTH	act_comm.cc	/^#define MAX_NOTE_LENGTH /;"	d	file:
MAX_OBJ_AFFECT	structs.h	/^#define MAX_OBJ_AFFECT /;"	d
MAX_PCCHARACTERS	structs.h	/^const int constexpr MAX_PCCHARACTERS = 32000;$/;"	v	typeref:typename:const int 
MAX_PLAYERS	comm.cc	/^#define MAX_PLAYERS /;"	d	file:
MAX_PROD	shop.cc	/^#define MAX_PROD /;"	d	file:
MAX_PROFS	structs.h	/^#define MAX_PROFS /;"	d
MAX_PWD_LENGTH	structs.h	/^const int constexpr MAX_PWD_LENGTH = 10; \/* Used in char_file_u *DO*NOT*CHANGE* *\/$/;"	v	typeref:typename:const int 
MAX_RACES	structs.h	/^const int constexpr MAX_RACES = 32;$/;"	v	typeref:typename:const int 
MAX_RACE_NAME_LENGTH	structs.h	/^const int constexpr MAX_RACE_NAME_LENGTH = 14;$/;"	v	typeref:typename:const int 
MAX_RANK	limits.cc	/^#define MAX_RANK /;"	d	file:
MAX_RANK	objsave.cc	/^#define MAX_RANK /;"	d	file:
MAX_SKILLS	structs.h	/^#define MAX_SKILLS /;"	d
MAX_SPELL_AFFECTS	magic.cpp	/^#define MAX_SPELL_AFFECTS /;"	d	file:
MAX_SPELL_AFFECTS	magic.h	/^    const int MAX_SPELL_AFFECTS = 1;$/;"	m	class:magic::spell_engine	typeref:typename:const int
MAX_SPIRITS	structs.h	/^const int constexpr MAX_SPIRITS = 90000;$/;"	v	typeref:typename:const int 
MAX_SPL_LIST	spells.h	/^#define MAX_SPL_LIST /;"	d
MAX_STATSUM	profs.cc	/^#define MAX_STATSUM /;"	d	file:
MAX_STRING_LENGTH	structs.h	/^const int constexpr MAX_STRING_LENGTH = 8192;$/;"	v	typeref:typename:const int 
MAX_TOUNGE	structs.h	/^#define MAX_TOUNGE /;"	d
MAX_TRADE	shop.cc	/^#define MAX_TRADE /;"	d	file:
MAX_TYPES	spells.h	/^#define MAX_TYPES /;"	d
MAX_WEAR	structs.h	/^#define MAX_WEAR /;"	d
MAX_ZONES	structs.h	/^#define MAX_ZONES /;"	d
MDL_PREFIX	db.h	/^#define MDL_PREFIX /;"	d
MENU	config.cc	/^char* MENU = "\\n\\r"$/;"	v	typeref:typename:char *
MESS_ATTACKER	structs.h	/^#define MESS_ATTACKER /;"	d
MESS_FILE	db.h	/^#define MESS_FILE /;"	d
MESS_ROOM	structs.h	/^#define MESS_ROOM /;"	d
MESS_VICTIM	structs.h	/^#define MESS_VICTIM /;"	d
MINDEX_FILE	db.h	/^#define MINDEX_FILE /;"	d
MIN_MAIL_LEVEL	mail.h	/^#define MIN_MAIL_LEVEL /;"	d
MIN_NAME_LENGTH	structs.h	/^const int constexpr MIN_NAME_LENGTH = 3;$/;"	v	typeref:typename:const int 
MIN_RANK	limits.cc	/^#define MIN_RANK /;"	d	file:
MIN_RANK	objsave.cc	/^#define MIN_RANK /;"	d	file:
MIN_SAFE_STAT	clerics.cc	/^const int MIN_SAFE_STAT = 3;$/;"	v	typeref:typename:const int
MISC	act_wiz.cc	/^#define MISC /;"	d	file:
MOB_AGE_TICKS	utils.h	/^#define MOB_AGE_TICKS(/;"	d
MOB_AGGRESSIVE	structs.h	/^#define MOB_AGGRESSIVE /;"	d
MOB_AGGRESSIVE_EVIL	structs.h	/^#define MOB_AGGRESSIVE_EVIL /;"	d
MOB_AGGRESSIVE_GOOD	structs.h	/^#define MOB_AGGRESSIVE_GOOD /;"	d
MOB_AGGRESSIVE_NEUTRAL	structs.h	/^#define MOB_AGGRESSIVE_NEUTRAL /;"	d
MOB_ASSISTANT	structs.h	/^#define MOB_ASSISTANT /;"	d
MOB_BODYGUARD	structs.h	/^#define MOB_BODYGUARD /;"	d
MOB_CAN_SWIM	structs.h	/^#define MOB_CAN_SWIM /;"	d
MOB_FAST	structs.h	/^#define MOB_FAST /;"	d
MOB_FLAGGED	utils.h	/^#define MOB_FLAGGED(/;"	d
MOB_FLAGS	utils.h	/^#define MOB_FLAGS(/;"	d
MOB_GUARDIAN	structs.h	/^#define MOB_GUARDIAN /;"	d
MOB_HELPER	structs.h	/^#define MOB_HELPER /;"	d
MOB_HUNTER	structs.h	/^#define MOB_HUNTER /;"	d
MOB_ISNPC	structs.h	/^#define MOB_ISNPC /;"	d
MOB_MEMORY	structs.h	/^#define MOB_MEMORY /;"	d
MOB_MOUNT	structs.h	/^#define MOB_MOUNT /;"	d
MOB_NOBASH	structs.h	/^#define MOB_NOBASH /;"	d
MOB_NORECALC	structs.h	/^#define MOB_NORECALC /;"	d
MOB_ORC_FRIEND	structs.h	/^#define MOB_ORC_FRIEND /;"	d
MOB_PET	structs.h	/^#define MOB_PET /;"	d
MOB_PREFIX	db.h	/^#define MOB_PREFIX /;"	d
MOB_RACE_GUARD	structs.h	/^#define MOB_RACE_GUARD /;"	d
MOB_SCAVENGER	structs.h	/^#define MOB_SCAVENGER /;"	d
MOB_SENTINEL	structs.h	/^#define MOB_SENTINEL /;"	d
MOB_SHADOW	structs.h	/^#define MOB_SHADOW /;"	d
MOB_SPEC	structs.h	/^#define MOB_SPEC /;"	d
MOB_STAY_TYPE	structs.h	/^#define MOB_STAY_TYPE /;"	d
MOB_STAY_ZONE	structs.h	/^#define MOB_STAY_ZONE /;"	d
MOB_SWITCHING	structs.h	/^#define MOB_SWITCHING /;"	d
MOB_VOID	structs.h	/^#define MOB_VOID /;"	d
MOB_WIMPY	structs.h	/^#define MOB_WIMPY /;"	d
MOON_FULL	structs.h	/^#define MOON_FULL /;"	d
MOON_HALF1	structs.h	/^#define MOON_HALF1 /;"	d
MOON_HALF2	structs.h	/^#define MOON_HALF2 /;"	d
MOON_NEW	structs.h	/^#define MOON_NEW /;"	d
MOON_QUART1	structs.h	/^#define MOON_QUART1 /;"	d
MOON_QUART2	structs.h	/^#define MOON_QUART2 /;"	d
MOON_QUART3	structs.h	/^#define MOON_QUART3 /;"	d
MOON_QUART4	structs.h	/^#define MOON_QUART4 /;"	d
MOTD_FILE	db.h	/^#define MOTD_FILE /;"	d
MSG_CURMSG	boards.h	/^#define MSG_CURMSG(/;"	d
MSG_HEADING	boards.h	/^#define MSG_HEADING(/;"	d
MSG_LEVEL	boards.h	/^#define MSG_LEVEL(/;"	d
MSG_POSTTIME	boards.h	/^#define MSG_POSTTIME(/;"	d
MSG_SLOTNUM	boards.h	/^#define MSG_SLOTNUM(/;"	d
MUDLLE_FILE	db.h	/^#define MUDLLE_FILE /;"	d
MUDLLE_H	mudlle.h	/^#define MUDLLE_H$/;"	d
MUDLLE_OLDFILE	db.h	/^#define MUDLLE_OLDFILE /;"	d
MYSTIC_GUARDIAN	structs.h	/^const int constexpr MYSTIC_GUARDIAN = 2;$/;"	v	typeref:typename:const int 
NAME_SIZE	mail.h	/^#define NAME_SIZE /;"	d
NANA	utils.h	/^#define NANA(/;"	d
NEWINDEX_FILE	db.h	/^#define NEWINDEX_FILE /;"	d
NEWS_FILE	db.h	/^#define NEWS_FILE /;"	d
NEW_MSG_INDEX	boards.h	/^#define NEW_MSG_INDEX /;"	d
NO	config.cc	/^#define NO /;"	d	file:
NOEFFECT	config.cc	/^const char* NOEFFECT = "Nothing seems to happen.\\r\\n";$/;"	v	typeref:typename:const char *
NORIDE	structs.h	/^#define NORIDE /;"	d
NORTH	structs.h	/^#define NORTH /;"	d
NOWHERE	structs.h	/^#define NOWHERE /;"	d
NO_MAGIC	structs.h	/^#define NO_MAGIC /;"	d
NO_MOB	structs.h	/^#define NO_MOB /;"	d
NO_TELEPORT	structs.h	/^#define NO_TELEPORT /;"	d
NPC	act_wiz.cc	/^#define NPC /;"	d	file:
NRM	utils.h	/^#define NRM /;"	d
NUMBER	act_wiz.cc	/^#define NUMBER /;"	d	file:
NUM_OF_BLOOD_TRAILS	structs.h	/^const int NUM_OF_BLOOD_TRAILS = 3;$/;"	v	typeref:typename:const int
NUM_OF_BOARDS	boards.h	/^#define NUM_OF_BOARDS /;"	d
NUM_OF_DIRS	structs.h	/^const int constexpr NUM_OF_DIRS = 6;$/;"	v	typeref:typename:const int 
NUM_OF_TRACKS	structs.h	/^#define NUM_OF_TRACKS /;"	d
NUM_STATS	profs.cc	/^#define NUM_STATS /;"	d	file:
OB	structs.h	/^    sh_int OB; \/* OB in normal tactics   *\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
OBJECT_OVERRIDE_AFFECTIONS	mystic.cc	/^#define OBJECT_OVERRIDE_AFFECTIONS(/;"	d	file:
OBJFILES	Makefile	/^OBJFILES = act_comm.o act_info.o act_move.o act_obj1.o act_obj2.o act_offe.o \\$/;"	m
OBJN	utils.h	/^#define OBJN(/;"	d
OBJS	utils.h	/^#define OBJS(/;"	d
OBJ_NOTIMER	structs.h	/^#define OBJ_NOTIMER /;"	d
OBJ_PREFIX	db.h	/^#define OBJ_PREFIX /;"	d
OB_coef_mod	object_utils.cpp	/^        double OB_coef_mod;$/;"	m	struct:utils::__anon20d0bf1d0111::weapon_coef_mod	typeref:typename:double	file:
OFF	utils.h	/^#define OFF /;"	d
ONOFF	utils.h	/^#define ONOFF(/;"	d
ONOFF_INV	utils.h	/^#define ONOFF_INV(/;"	d
ON_BEFORE_DIE	script.h	/^#define ON_BEFORE_DIE /;"	d
ON_BEFORE_ENTER	script.h	/^#define ON_BEFORE_ENTER /;"	d
ON_DAMAGE	script.h	/^#define ON_DAMAGE /;"	d
ON_DIE	script.h	/^#define ON_DIE /;"	d
ON_DRINK	script.h	/^#define ON_DRINK /;"	d
ON_EAT	script.h	/^#define ON_EAT /;"	d
ON_ENTER	script.h	/^#define ON_ENTER /;"	d
ON_EXAMINE_OBJECT	script.h	/^#define ON_EXAMINE_OBJECT /;"	d
ON_HEAR_SAY	script.h	/^#define ON_HEAR_SAY /;"	d
ON_PULL	script.h	/^#define ON_PULL /;"	d
ON_RECEIVE	script.h	/^#define ON_RECEIVE /;"	d
ON_WEAR	script.h	/^#define ON_WEAR /;"	d
OPT_USEC	comm.cc	/^#define OPT_USEC /;"	d	file:
OUTDOORS_LIGHT	interpre.h	/^#define OUTDOORS_LIGHT /;"	d
OUTDOORS_WIND	interpre.h	/^#define OUTDOORS_WIND /;"	d
OUTSIDE	utils.h	/^#define OUTSIDE(/;"	d
OVERRUN_TIMER	olog_hai.cpp	/^const int constexpr OVERRUN_TIMER = 60;$/;"	v	typeref:typename:const int 
P	act_info.cc	/^#define P /;"	d	file:
PC	act_wiz.cc	/^#define PC /;"	d	file:
PEACEROOM	structs.h	/^#define PEACEROOM /;"	d
PERMAFFECT	structs.h	/^#define PERMAFFECT /;"	d
PERS	utility.cc	/^char* PERS(struct char_data* target, struct char_data* observer,$/;"	f	typeref:typename:char *
PKILL	pkill.h	/^} PKILL;$/;"	t	typeref:struct:__anonb27b44b70108
PKILL_FILE	db.h	/^#define PKILL_FILE /;"	d
PKILL_STRING_KILLED	pkill.h	/^#define PKILL_STRING_KILLED /;"	d
PKILL_STRING_SLAIN	pkill.h	/^#define PKILL_STRING_SLAIN /;"	d
PKILL_UNRANKED	pkill.h	/^#define PKILL_UNRANKED /;"	d
PLATDEF_H	platdef.h	/^#define PLATDEF_H$/;"	d
PLAYER_FILE	db.h	/^#define PLAYER_FILE /;"	d
PLRSPEC_ARCANE	structs.h	/^#define PLRSPEC_ARCANE /;"	d
PLRSPEC_ARCH	structs.h	/^#define PLRSPEC_ARCH /;"	d
PLRSPEC_BTLEMS	structs.h	/^#define PLRSPEC_BTLEMS /;"	d
PLRSPEC_COLD	structs.h	/^#define PLRSPEC_COLD /;"	d
PLRSPEC_DARK	structs.h	/^#define PLRSPEC_DARK /;"	d
PLRSPEC_DFND	structs.h	/^#define PLRSPEC_DFND /;"	d
PLRSPEC_FIRE	structs.h	/^#define PLRSPEC_FIRE /;"	d
PLRSPEC_GRDN	structs.h	/^#define PLRSPEC_GRDN /;"	d
PLRSPEC_HFGT	structs.h	/^#define PLRSPEC_HFGT /;"	d
PLRSPEC_ILLU	structs.h	/^#define PLRSPEC_ILLU /;"	d
PLRSPEC_LFGT	structs.h	/^#define PLRSPEC_LFGT /;"	d
PLRSPEC_LGHT	structs.h	/^#define PLRSPEC_LGHT /;"	d
PLRSPEC_NONE	structs.h	/^#define PLRSPEC_NONE /;"	d
PLRSPEC_PETS	structs.h	/^#define PLRSPEC_PETS /;"	d
PLRSPEC_PROT	structs.h	/^#define PLRSPEC_PROT /;"	d
PLRSPEC_REGN	structs.h	/^#define PLRSPEC_REGN /;"	d
PLRSPEC_STLH	structs.h	/^#define PLRSPEC_STLH /;"	d
PLRSPEC_TELE	structs.h	/^#define PLRSPEC_TELE /;"	d
PLRSPEC_WILD	structs.h	/^#define PLRSPEC_WILD /;"	d
PLRSPEC_WMSR	structs.h	/^#define PLRSPEC_WMSR /;"	d
PLR_CRASH	structs.h	/^#define PLR_CRASH /;"	d
PLR_DELETED	structs.h	/^#define PLR_DELETED /;"	d
PLR_DONTSET	structs.h	/^#define PLR_DONTSET /;"	d
PLR_FLAGGED	utils.h	/^#define PLR_FLAGGED(/;"	d
PLR_FLAGS	utils.h	/^#define PLR_FLAGS(/;"	d
PLR_FROZEN	structs.h	/^#define PLR_FROZEN /;"	d
PLR_INCOGNITO	structs.h	/^#define PLR_INCOGNITO /;"	d
PLR_INVSTART	structs.h	/^#define PLR_INVSTART /;"	d
PLR_ISAFK	structs.h	/^#define PLR_ISAFK /;"	d
PLR_ISSHADOW	structs.h	/^#define PLR_ISSHADOW /;"	d
PLR_IS_NCHANGED	structs.h	/^#define PLR_IS_NCHANGED /;"	d
PLR_LOADROOM	structs.h	/^#define PLR_LOADROOM /;"	d
PLR_MAILING	structs.h	/^#define PLR_MAILING /;"	d
PLR_MODE	utils.h	/^#define PLR_MODE(/;"	d
PLR_MODE_ON	utils.h	/^#define PLR_MODE_ON(/;"	d
PLR_MODE_TOG	utils.h	/^#define PLR_MODE_TOG(/;"	d
PLR_NODELETE	structs.h	/^#define PLR_NODELETE /;"	d
PLR_NOSHOUT	structs.h	/^#define PLR_NOSHOUT /;"	d
PLR_NOTITLE	structs.h	/^#define PLR_NOTITLE /;"	d
PLR_NOWIZLIST	structs.h	/^#define PLR_NOWIZLIST /;"	d
PLR_RETIRED	structs.h	/^#define PLR_RETIRED /;"	d
PLR_SHAPING	structs.h	/^#define PLR_SHAPING /;"	d
PLR_SITEOK	structs.h	/^#define PLR_SITEOK /;"	d
PLR_TOG_CHK	utils.h	/^#define PLR_TOG_CHK(/;"	d
PLR_WAS_KITTED	structs.h	/^#define PLR_WAS_KITTED /;"	d
PLR_WRITING	structs.h	/^#define PLR_WRITING /;"	d
PLR_WR_FINISH	structs.h	/^#define PLR_WR_FINISH /;"	d
POLICIES_FILE	db.h	/^#define POLICIES_FILE /;"	d
POSITION_DEAD	structs.h	/^#define POSITION_DEAD /;"	d
POSITION_FIGHTING	structs.h	/^#define POSITION_FIGHTING /;"	d
POSITION_INCAP	structs.h	/^#define POSITION_INCAP /;"	d
POSITION_RESTING	structs.h	/^#define POSITION_RESTING /;"	d
POSITION_SHAPING	structs.h	/^#define POSITION_SHAPING /;"	d
POSITION_SITTING	structs.h	/^#define POSITION_SITTING /;"	d
POSITION_SLEEPING	structs.h	/^#define POSITION_SLEEPING /;"	d
POSITION_STANDING	structs.h	/^#define POSITION_STANDING /;"	d
POSITION_STUNNED	structs.h	/^#define POSITION_STUNNED /;"	d
POST_COMMAND	mudlle.cc	/^#define POST_COMMAND /;"	d	file:
POWER_FILE	db.h	/^#define POWER_FILE /;"	d
PRACS_PER_LEVEL	structs.h	/^const int constexpr PRACS_PER_LEVEL = 3;$/;"	v	typeref:typename:const int 
PRE_COMMAND	mudlle.cc	/^#define PRE_COMMAND /;"	d	file:
PRF_AUTOEX	structs.h	/^#define PRF_AUTOEX /;"	d
PRF_BRIEF	structs.h	/^#define PRF_BRIEF /;"	d
PRF_CHAT	structs.h	/^#define PRF_CHAT /;"	d
PRF_COLOR	structs.h	/^#define PRF_COLOR /;"	d
PRF_COMPACT	structs.h	/^#define PRF_COMPACT /;"	d
PRF_DISPTEXT	structs.h	/^#define PRF_DISPTEXT /;"	d
PRF_ECHO	structs.h	/^#define PRF_ECHO /;"	d
PRF_FLAGGED	utils.h	/^#define PRF_FLAGGED(/;"	d
PRF_FLAGS	utils.h	/^#define PRF_FLAGS(/;"	d
PRF_HOLYLIGHT	structs.h	/^#define PRF_HOLYLIGHT /;"	d
PRF_INV_SORT1	structs.h	/^#define PRF_INV_SORT1 /;"	d
PRF_INV_SORT2	structs.h	/^#define PRF_INV_SORT2 /;"	d
PRF_LATIN1	structs.h	/^#define PRF_LATIN1 /;"	d
PRF_LOG1	structs.h	/^#define PRF_LOG1 /;"	d
PRF_LOG2	structs.h	/^#define PRF_LOG2 /;"	d
PRF_LOG3	structs.h	/^#define PRF_LOG3 /;"	d
PRF_MENTAL	structs.h	/^#define PRF_MENTAL /;"	d
PRF_NARRATE	structs.h	/^#define PRF_NARRATE /;"	d
PRF_NOHASSLE	structs.h	/^#define PRF_NOHASSLE /;"	d
PRF_NOTELL	structs.h	/^#define PRF_NOTELL /;"	d
PRF_NOTHING2	structs.h	/^#define PRF_NOTHING2 /;"	d
PRF_PROMPT	structs.h	/^#define PRF_PROMPT /;"	d
PRF_ROOMFLAGS	structs.h	/^#define PRF_ROOMFLAGS /;"	d
PRF_SING	structs.h	/^#define PRF_SING /;"	d
PRF_SPAM	structs.h	/^#define PRF_SPAM /;"	d
PRF_SPINNER	structs.h	/^#define PRF_SPINNER /;"	d
PRF_SUMMONABLE	structs.h	/^#define PRF_SUMMONABLE /;"	d
PRF_SWIM	structs.h	/^#define PRF_SWIM /;"	d
PRF_TOG_CHK	act_othe.cc	/^#define PRF_TOG_CHK(/;"	d	file:
PRF_TOG_CHK	utils.h	/^#define PRF_TOG_CHK(/;"	d
PRF_WIZ	structs.h	/^#define PRF_WIZ /;"	d
PRF_WRAP	structs.h	/^#define PRF_WRAP /;"	d
PRIVATE	structs.h	/^#define PRIVATE /;"	d
PROFILE	Makefile	/^PROFILE = -g -rdynamic$/;"	m
PROFS_H	profs.h	/^#define PROFS_H$/;"	d
PROF_ABBR	utils.h	/^#define PROF_ABBR(/;"	d
PROF_CLERIC	structs.h	/^#define PROF_CLERIC /;"	d
PROF_GENERAL	structs.h	/^#define PROF_GENERAL /;"	d
PROF_MAGE	structs.h	/^#define PROF_MAGE /;"	d
PROF_MAGIC_USER	structs.h	/^#define PROF_MAGIC_USER /;"	d
PROF_RANGER	structs.h	/^#define PROF_RANGER /;"	d
PROF_THIEF	structs.h	/^#define PROF_THIEF /;"	d
PROF_WARRIOR	structs.h	/^#define PROF_WARRIOR /;"	d
PROG_NUMBER	mudlle.h	/^#define PROG_NUMBER(/;"	d
PROG_POINT	mudlle.h	/^#define PROG_POINT(/;"	d
PROMPT_ALL	interpre.h	/^#define PROMPT_ALL /;"	d
PROMPT_ARROWS	interpre.h	/^#define PROMPT_ARROWS /;"	d
PROMPT_HIT	interpre.h	/^#define PROMPT_HIT /;"	d
PROMPT_MANA	interpre.h	/^#define PROMPT_MANA /;"	d
PROMPT_MAUL	interpre.h	/^#define PROMPT_MAUL /;"	d
PROMPT_MOVE	interpre.h	/^#define PROMPT_MOVE /;"	d
PROMPT_STAT	interpre.h	/^#define PROMPT_STAT /;"	d
PROTOS_H	protos.h	/^#define PROTOS_H$/;"	d
PS_Animals	structs.h	/^    PS_Animals,$/;"	e	enum:game_types::player_specs
PS_Arcane	structs.h	/^    PS_Arcane,$/;"	e	enum:game_types::player_specs
PS_Archery	structs.h	/^    PS_Archery,$/;"	e	enum:game_types::player_specs
PS_BattleMage	structs.h	/^    PS_BattleMage,$/;"	e	enum:game_types::player_specs
PS_Cold	structs.h	/^    PS_Cold,$/;"	e	enum:game_types::player_specs
PS_Count	structs.h	/^    PS_Count,$/;"	e	enum:game_types::player_specs
PS_Darkness	structs.h	/^    PS_Darkness,$/;"	e	enum:game_types::player_specs
PS_Defender	structs.h	/^    PS_Defender,$/;"	e	enum:game_types::player_specs
PS_Fire	structs.h	/^    PS_Fire,$/;"	e	enum:game_types::player_specs
PS_Guardian	structs.h	/^    PS_Guardian,$/;"	e	enum:game_types::player_specs
PS_HeavyFighting	structs.h	/^    PS_HeavyFighting,$/;"	e	enum:game_types::player_specs
PS_Illusion	structs.h	/^    PS_Illusion,$/;"	e	enum:game_types::player_specs
PS_LightFighting	structs.h	/^    PS_LightFighting,$/;"	e	enum:game_types::player_specs
PS_Lightning	structs.h	/^    PS_Lightning,$/;"	e	enum:game_types::player_specs
PS_None	structs.h	/^    PS_None,$/;"	e	enum:game_types::player_specs
PS_Protection	structs.h	/^    PS_Protection,$/;"	e	enum:game_types::player_specs
PS_Regeneration	structs.h	/^    PS_Regeneration,$/;"	e	enum:game_types::player_specs
PS_Stealth	structs.h	/^    PS_Stealth,$/;"	e	enum:game_types::player_specs
PS_Teleportation	structs.h	/^    PS_Teleportation,$/;"	e	enum:game_types::player_specs
PS_WeaponMaster	structs.h	/^    PS_WeaponMaster,$/;"	e	enum:game_types::player_specs
PS_WildFighting	structs.h	/^    PS_WildFighting,$/;"	e	enum:game_types::player_specs
PULSE_FAST_UPDATE	structs.h	/^const int constexpr PULSE_FAST_UPDATE = 12;$/;"	v	typeref:typename:const int 
PULSE_MENTAL_FIGHT	structs.h	/^const int constexpr PULSE_MENTAL_FIGHT = 8;$/;"	v	typeref:typename:const int 
PULSE_MOBILE	structs.h	/^const int constexpr PULSE_MOBILE = 24;$/;"	v	typeref:typename:const int 
PULSE_VIOLENCE	structs.h	/^const int constexpr PULSE_VIOLENCE = 12;$/;"	v	typeref:typename:const int 
PULSE_ZONE	structs.h	/^const int constexpr PULSE_ZONE = 12;$/;"	v	typeref:typename:const int 
RACE_ABBR	utils.h	/^#define RACE_ABBR(/;"	d
RACE_BEORNING	structs.h	/^const int constexpr RACE_BEORNING = 6;$/;"	v	typeref:typename:const int 
RACE_DWARF	structs.h	/^const int constexpr RACE_DWARF = 2;$/;"	v	typeref:typename:const int 
RACE_EAST	utils.h	/^#define RACE_EAST(/;"	d
RACE_EASTERLING	structs.h	/^#define RACE_EASTERLING /;"	d
RACE_EVIL	utils.h	/^#define RACE_EVIL(/;"	d
RACE_GOD	structs.h	/^const int constexpr RACE_GOD = 0;$/;"	v	typeref:typename:const int 
RACE_GOOD	utils.h	/^#define RACE_GOOD(/;"	d
RACE_HARAD	structs.h	/^#define RACE_HARAD /;"	d
RACE_HARADRIM	structs.h	/^const int constexpr RACE_HARADRIM = 18;$/;"	v	typeref:typename:const int 
RACE_HIGH	structs.h	/^const int constexpr RACE_HIGH = 5;$/;"	v	typeref:typename:const int 
RACE_HOBBIT	structs.h	/^const int constexpr RACE_HOBBIT = 4;$/;"	v	typeref:typename:const int 
RACE_HUMAN	structs.h	/^const int constexpr RACE_HUMAN = 1;$/;"	v	typeref:typename:const int 
RACE_MAGI	utils.h	/^#define RACE_MAGI(/;"	d
RACE_MAGUS	structs.h	/^const int constexpr RACE_MAGUS = 15;$/;"	v	typeref:typename:const int 
RACE_OLOGHAI	structs.h	/^const int constexpr RACE_OLOGHAI = 17;$/;"	v	typeref:typename:const int 
RACE_ORC	structs.h	/^const int constexpr RACE_ORC = 13;$/;"	v	typeref:typename:const int 
RACE_SOME_ORC	mage.cc	/^#define RACE_SOME_ORC(/;"	d	file:
RACE_SOME_ORC	magic.cpp	/^#define RACE_SOME_ORC(/;"	d	file:
RACE_TROLL	structs.h	/^#define RACE_TROLL /;"	d
RACE_UNDEAD	structs.h	/^#define RACE_UNDEAD /;"	d
RACE_URUK	structs.h	/^const int constexpr RACE_URUK = 11;$/;"	v	typeref:typename:const int 
RACE_WOOD	structs.h	/^const int constexpr RACE_WOOD = 3;$/;"	v	typeref:typename:const int 
RANGE	act_wiz.cc	/^#define RANGE(/;"	d	file:
RANKING	pkill.c	/^} RANKING;$/;"	t	typeref:struct:__anonb27b44b20108	file:
READ_LVL	boards.h	/^#define READ_LVL /;"	d
READ_TITLE	limits.cc	/^#define READ_TITLE(/;"	d	file:
REAL	db.h	/^#define REAL /;"	d
REALDIGCHANGE	shapezon.cc	/^#define REALDIGCHANGE(/;"	d	file:
RECREATE	utils.h	/^#define RECREATE(/;"	d
REDUCED_MANA	spells.h	/^#define REDUCED_MANA /;"	d
RELEASE	utils.h	/^#define RELEASE(/;"	d
REMOVE_BIT	utils.h	/^#define REMOVE_BIT(/;"	d
REMOVE_LIST	mudlle2.cc	/^void REMOVE_LIST(struct char_data* host)$/;"	f	typeref:typename:void
REMOVE_LVL	boards.h	/^#define REMOVE_LVL /;"	d
RENT_CAMP	structs.h	/^#define RENT_CAMP /;"	d
RENT_CRASH	structs.h	/^#define RENT_CRASH /;"	d
RENT_FACTOR	objsave.cc	/^#define RENT_FACTOR /;"	d	file:
RENT_FORCED	structs.h	/^#define RENT_FORCED /;"	d
RENT_HALFTIME	objsave.cc	/^#define RENT_HALFTIME /;"	d	file:
RENT_QUIT	structs.h	/^#define RENT_QUIT /;"	d
RENT_RENTED	structs.h	/^#define RENT_RENTED /;"	d
RENT_TIME	objsave.cc	/^#define RENT_TIME /;"	d	file:
RENT_TIMEDOUT	structs.h	/^#define RENT_TIMEDOUT /;"	d
RENT_UNDEF	structs.h	/^#define RENT_UNDEF /;"	d
RETIRED	utils.h	/^#define RETIRED(/;"	d
RNUM	boards.h	/^#define RNUM /;"	d
ROOMAFF_EXIT	structs.h	/^#define ROOMAFF_EXIT /;"	d
ROOMAFF_SPELL	structs.h	/^#define ROOMAFF_SPELL /;"	d
RP_RACE_CHECK	utils.h	/^#define RP_RACE_CHECK(/;"	d
RotS	CMakeLists.txt	/^project(RotS)$/;"	p
RotS_Stats	profs.cc	/^enum RotS_Stats {$/;"	g	namespace:_INTERNAL	file:
SANA	utils.h	/^#define SANA(/;"	d
SAVEBUFLEN	db.cc	/^#define SAVEBUFLEN /;"	d	file:
SAVE_VERSION	db.h	/^#define SAVE_VERSION /;"	d
SCMD_APPLY_ANTIDOTE	interpre.h	/^#define SCMD_APPLY_ANTIDOTE /;"	d
SCMD_APPLY_POISON	interpre.h	/^#define SCMD_APPLY_POISON /;"	d
SCMD_AUTOEXIT	interpre.h	/^#define SCMD_AUTOEXIT /;"	d
SCMD_BEEP	interpre.h	/^#define SCMD_BEEP /;"	d
SCMD_BITE	interpre.h	/^#define SCMD_BITE /;"	d
SCMD_BOARD	interpre.h	/^#define SCMD_BOARD /;"	d
SCMD_BRIEF	interpre.h	/^#define SCMD_BRIEF /;"	d
SCMD_BUTCHER	interpre.h	/^#define SCMD_BUTCHER /;"	d
SCMD_CARRIED	interpre.h	/^#define SCMD_CARRIED /;"	d
SCMD_CHAT	interpre.h	/^#define SCMD_CHAT /;"	d
SCMD_CLEAR	interpre.h	/^#define SCMD_CLEAR /;"	d
SCMD_COMMANDS	interpre.h	/^#define SCMD_COMMANDS /;"	d
SCMD_COMPACT	interpre.h	/^#define SCMD_COMPACT /;"	d
SCMD_CREDITS	interpre.h	/^#define SCMD_CREDITS /;"	d
SCMD_DESCRIP	interpre.h	/^#define SCMD_DESCRIP /;"	d
SCMD_DRINK	interpre.h	/^#define SCMD_DRINK /;"	d
SCMD_EAT	interpre.h	/^#define SCMD_EAT /;"	d
SCMD_ECHO	interpre.h	/^#define SCMD_ECHO /;"	d
SCMD_FILL	interpre.h	/^#define SCMD_FILL /;"	d
SCMD_FLEE	interpre.h	/^#define SCMD_FLEE /;"	d
SCMD_FOLLOW	interpre.h	/^#define SCMD_FOLLOW /;"	d
SCMD_FREEZE	interpre.h	/^#define SCMD_FREEZE /;"	d
SCMD_GECHO	interpre.h	/^#define SCMD_GECHO /;"	d
SCMD_HANDBOOK	interpre.h	/^#define SCMD_HANDBOOK /;"	d
SCMD_HIT	interpre.h	/^#define SCMD_HIT /;"	d
SCMD_HOLYLIGHT	interpre.h	/^#define SCMD_HOLYLIGHT /;"	d
SCMD_IMMLIST	interpre.h	/^#define SCMD_IMMLIST /;"	d
SCMD_INCOGNITO	interpre.h	/^#define SCMD_INCOGNITO /;"	d
SCMD_INFO	interpre.h	/^#define SCMD_INFO /;"	d
SCMD_KICK	interpre.h	/^#define SCMD_KICK /;"	d
SCMD_LATIN1	interpre.h	/^#define SCMD_LATIN1 /;"	d
SCMD_LOOK_BRIEF	interpre.h	/^#define SCMD_LOOK_BRIEF /;"	d
SCMD_LOOK_EXAM	interpre.h	/^#define SCMD_LOOK_EXAM /;"	d
SCMD_LOOK_NORM	interpre.h	/^#define SCMD_LOOK_NORM /;"	d
SCMD_MAIL	interpre.h	/^#define SCMD_MAIL /;"	d
SCMD_MAUL	interpre.h	/^#define SCMD_MAUL /;"	d
SCMD_MENTAL	interpre.h	/^#define SCMD_MENTAL /;"	d
SCMD_MOUNT	interpre.h	/^#define SCMD_MOUNT /;"	d
SCMD_MOVING	interpre.h	/^#define SCMD_MOVING /;"	d
SCMD_MURDER	interpre.h	/^#define SCMD_MURDER /;"	d
SCMD_NARRATE	interpre.h	/^#define SCMD_NARRATE /;"	d
SCMD_NEWS	interpre.h	/^#define SCMD_NEWS /;"	d
SCMD_NOHASSLE	interpre.h	/^#define SCMD_NOHASSLE /;"	d
SCMD_NONHANDED	interpre.h	/^#define SCMD_NONHANDED /;"	d
SCMD_NOSUMMON	interpre.h	/^#define SCMD_NOSUMMON /;"	d
SCMD_NOTE	interpre.h	/^#define SCMD_NOTE /;"	d
SCMD_NOTELL	interpre.h	/^#define SCMD_NOTELL /;"	d
SCMD_NOTITLE	interpre.h	/^#define SCMD_NOTITLE /;"	d
SCMD_ONEHANDED	interpre.h	/^#define SCMD_ONEHANDED /;"	d
SCMD_PAGE	interpre.h	/^#define SCMD_PAGE /;"	d
SCMD_PARDON	interpre.h	/^#define SCMD_PARDON /;"	d
SCMD_POLICIES	interpre.h	/^#define SCMD_POLICIES /;"	d
SCMD_POOFIN	interpre.h	/^#define SCMD_POOFIN /;"	d
SCMD_POOFOUT	interpre.h	/^#define SCMD_POOFOUT /;"	d
SCMD_POUR	interpre.h	/^#define SCMD_POUR /;"	d
SCMD_QECHO	interpre.h	/^#define SCMD_QECHO /;"	d
SCMD_QUIT	interpre.h	/^#define SCMD_QUIT /;"	d
SCMD_REACTV	interpre.h	/^#define SCMD_REACTV /;"	d
SCMD_REHASH	interpre.h	/^#define SCMD_REHASH /;"	d
SCMD_RENAME	interpre.h	/^#define SCMD_RENAME /;"	d
SCMD_REND	interpre.h	/^#define SCMD_REND /;"	d
SCMD_REPLY	interpre.h	/^#define SCMD_REPLY /;"	d
SCMD_REROLL	interpre.h	/^#define SCMD_REROLL /;"	d
SCMD_RETIRE	interpre.h	/^#define SCMD_RETIRE /;"	d
SCMD_ROOMFLAGS	interpre.h	/^#define SCMD_ROOMFLAGS /;"	d
SCMD_SCALP	interpre.h	/^#define SCMD_SCALP /;"	d
SCMD_SETPROMPT	interpre.h	/^#define SCMD_SETPROMPT /;"	d
SCMD_SHUTDOWN	interpre.h	/^#define SCMD_SHUTDOWN /;"	d
SCMD_SING	interpre.h	/^#define SCMD_SING /;"	d
SCMD_SIP	interpre.h	/^#define SCMD_SIP /;"	d
SCMD_SLOWNS	interpre.h	/^#define SCMD_SLOWNS /;"	d
SCMD_SOCIALS	interpre.h	/^#define SCMD_SOCIALS /;"	d
SCMD_SPAM	interpre.h	/^#define SCMD_SPAM /;"	d
SCMD_SPINNER	interpre.h	/^#define SCMD_SPINNER /;"	d
SCMD_SQUELCH	interpre.h	/^#define SCMD_SQUELCH /;"	d
SCMD_STALK	interpre.h	/^#define SCMD_STALK /;"	d
SCMD_SWIM	interpre.h	/^#define SCMD_SWIM /;"	d
SCMD_SWING	interpre.h	/^#define SCMD_SWING /;"	d
SCMD_TASTE	interpre.h	/^#define SCMD_TASTE /;"	d
SCMD_TELL	interpre.h	/^#define SCMD_TELL /;"	d
SCMD_THAW	interpre.h	/^#define SCMD_THAW /;"	d
SCMD_TIME	interpre.h	/^#define SCMD_TIME /;"	d
SCMD_TOG_BASE	interpre.h	/^#define SCMD_TOG_BASE /;"	d
SCMD_TOP	interpre.h	/^#define SCMD_TOP /;"	d
SCMD_TWOHANDED	interpre.h	/^#define SCMD_TWOHANDED /;"	d
SCMD_UNAFFECT	interpre.h	/^#define SCMD_UNAFFECT /;"	d
SCMD_VERSION	interpre.h	/^#define SCMD_VERSION /;"	d
SCMD_WHOAMI	interpre.h	/^#define SCMD_WHOAMI /;"	d
SCMD_WILL	interpre.h	/^#define SCMD_WILL /;"	d
SCMD_WIZ	interpre.h	/^#define SCMD_WIZ /;"	d
SCMD_WIZHELP	interpre.h	/^#define SCMD_WIZHELP /;"	d
SCMD_WIZLIST	interpre.h	/^#define SCMD_WIZLIST /;"	d
SCMD_WRAP	interpre.h	/^#define SCMD_WRAP /;"	d
SCMD_YELL	interpre.h	/^#define SCMD_YELL /;"	d
SCRIPTDESCRCHANGE	shapescript.cc	/^#define SCRIPTDESCRCHANGE(/;"	d	file:
SCRIPTDIGITCHANGE	shapescript.cc	/^#define SCRIPTDIGITCHANGE(/;"	d	file:
SCRIPTLINECHANGE	shapescript.cc	/^#define SCRIPTLINECHANGE(/;"	d	file:
SCRIPTPARAMCHANGE	shapescript.cc	/^#define SCRIPTPARAMCHANGE(/;"	d	file:
SCRIPTREALDIGCHANGE	shapescript.cc	/^#define SCRIPTREALDIGCHANGE(/;"	d	file:
SCRIPT_ABORT	script.h	/^#define SCRIPT_ABORT /;"	d
SCRIPT_ASSIGN_EQ	script.h	/^#define SCRIPT_ASSIGN_EQ /;"	d
SCRIPT_ASSIGN_INV	script.h	/^#define SCRIPT_ASSIGN_INV /;"	d
SCRIPT_ASSIGN_ROOM	script.h	/^#define SCRIPT_ASSIGN_ROOM /;"	d
SCRIPT_ASSIGN_STR	script.h	/^#define SCRIPT_ASSIGN_STR /;"	d
SCRIPT_BEGIN	script.h	/^#define SCRIPT_BEGIN /;"	d
SCRIPT_CHANGE_EXIT_TO	script.h	/^#define SCRIPT_CHANGE_EXIT_TO /;"	d
SCRIPT_COMMAND_NONE	script.h	/^#define SCRIPT_COMMAND_NONE /;"	d
SCRIPT_DO_DROP	script.h	/^#define SCRIPT_DO_DROP /;"	d
SCRIPT_DO_EMOTE	script.h	/^#define SCRIPT_DO_EMOTE /;"	d
SCRIPT_DO_FLEE	script.h	/^#define SCRIPT_DO_FLEE /;"	d
SCRIPT_DO_FOLLOW	script.h	/^#define SCRIPT_DO_FOLLOW /;"	d
SCRIPT_DO_GIVE	script.h	/^#define SCRIPT_DO_GIVE /;"	d
SCRIPT_DO_HIT	script.h	/^#define SCRIPT_DO_HIT /;"	d
SCRIPT_DO_REMOVE	script.h	/^#define SCRIPT_DO_REMOVE /;"	d
SCRIPT_DO_SAY	script.h	/^#define SCRIPT_DO_SAY /;"	d
SCRIPT_DO_SOCIAL	script.h	/^#define SCRIPT_DO_SOCIAL /;"	d
SCRIPT_DO_WAIT	script.h	/^#define SCRIPT_DO_WAIT /;"	d
SCRIPT_DO_WEAR	script.h	/^#define SCRIPT_DO_WEAR /;"	d
SCRIPT_DO_YELL	script.h	/^#define SCRIPT_DO_YELL /;"	d
SCRIPT_END	script.h	/^#define SCRIPT_END /;"	d
SCRIPT_END_ELSE_BEGIN	script.h	/^#define SCRIPT_END_ELSE_BEGIN /;"	d
SCRIPT_EQUIP_CHAR	script.h	/^#define SCRIPT_EQUIP_CHAR /;"	d
SCRIPT_EXTRACT_CHAR	script.h	/^#define SCRIPT_EXTRACT_CHAR /;"	d
SCRIPT_EXTRACT_OBJ	script.h	/^#define SCRIPT_EXTRACT_OBJ /;"	d
SCRIPT_GAIN_EXP	script.h	/^#define SCRIPT_GAIN_EXP /;"	d
SCRIPT_H	script.h	/^#define SCRIPT_H$/;"	d
SCRIPT_IF_INT_EQUAL	script.h	/^#define SCRIPT_IF_INT_EQUAL /;"	d
SCRIPT_IF_INT_LESS	script.h	/^#define SCRIPT_IF_INT_LESS /;"	d
SCRIPT_IF_IS_NPC	script.h	/^#define SCRIPT_IF_IS_NPC /;"	d
SCRIPT_IF_STR_CONTAINS	script.h	/^#define SCRIPT_IF_STR_CONTAINS /;"	d
SCRIPT_IF_STR_EQUAL	script.h	/^#define SCRIPT_IF_STR_EQUAL /;"	d
SCRIPT_LOAD_MOB	script.h	/^#define SCRIPT_LOAD_MOB /;"	d
SCRIPT_LOAD_OBJ	script.h	/^#define SCRIPT_LOAD_OBJ /;"	d
SCRIPT_OBJ_FROM_CHAR	script.h	/^#define SCRIPT_OBJ_FROM_CHAR /;"	d
SCRIPT_OBJ_FROM_ROOM	script.h	/^#define SCRIPT_OBJ_FROM_ROOM /;"	d
SCRIPT_OBJ_TO_CHAR	script.h	/^#define SCRIPT_OBJ_TO_CHAR /;"	d
SCRIPT_OBJ_TO_ROOM	script.h	/^#define SCRIPT_OBJ_TO_ROOM /;"	d
SCRIPT_PAGE_ZONE_MAP	script.h	/^#define SCRIPT_PAGE_ZONE_MAP /;"	d
SCRIPT_PARAM_CH1	script.h	/^#define SCRIPT_PARAM_CH1 /;"	d
SCRIPT_PARAM_CH1_EXP	script.h	/^#define SCRIPT_PARAM_CH1_EXP /;"	d
SCRIPT_PARAM_CH1_HIT	script.h	/^#define SCRIPT_PARAM_CH1_HIT /;"	d
SCRIPT_PARAM_CH1_LEVEL	script.h	/^#define SCRIPT_PARAM_CH1_LEVEL /;"	d
SCRIPT_PARAM_CH1_NAME	script.h	/^#define SCRIPT_PARAM_CH1_NAME /;"	d
SCRIPT_PARAM_CH1_RACE	script.h	/^#define SCRIPT_PARAM_CH1_RACE /;"	d
SCRIPT_PARAM_CH1_RANK	script.h	/^#define SCRIPT_PARAM_CH1_RANK /;"	d
SCRIPT_PARAM_CH1_ROOM	script.h	/^#define SCRIPT_PARAM_CH1_ROOM /;"	d
SCRIPT_PARAM_CH2	script.h	/^#define SCRIPT_PARAM_CH2 /;"	d
SCRIPT_PARAM_CH2_EXP	script.h	/^#define SCRIPT_PARAM_CH2_EXP /;"	d
SCRIPT_PARAM_CH2_HIT	script.h	/^#define SCRIPT_PARAM_CH2_HIT /;"	d
SCRIPT_PARAM_CH2_LEVEL	script.h	/^#define SCRIPT_PARAM_CH2_LEVEL /;"	d
SCRIPT_PARAM_CH2_NAME	script.h	/^#define SCRIPT_PARAM_CH2_NAME /;"	d
SCRIPT_PARAM_CH2_RACE	script.h	/^#define SCRIPT_PARAM_CH2_RACE /;"	d
SCRIPT_PARAM_CH2_RANK	script.h	/^#define SCRIPT_PARAM_CH2_RANK /;"	d
SCRIPT_PARAM_CH2_ROOM	script.h	/^#define SCRIPT_PARAM_CH2_ROOM /;"	d
SCRIPT_PARAM_CH3	script.h	/^#define SCRIPT_PARAM_CH3 /;"	d
SCRIPT_PARAM_CH3_EXP	script.h	/^#define SCRIPT_PARAM_CH3_EXP /;"	d
SCRIPT_PARAM_CH3_HIT	script.h	/^#define SCRIPT_PARAM_CH3_HIT /;"	d
SCRIPT_PARAM_CH3_LEVEL	script.h	/^#define SCRIPT_PARAM_CH3_LEVEL /;"	d
SCRIPT_PARAM_CH3_NAME	script.h	/^#define SCRIPT_PARAM_CH3_NAME /;"	d
SCRIPT_PARAM_CH3_RACE	script.h	/^#define SCRIPT_PARAM_CH3_RACE /;"	d
SCRIPT_PARAM_CH3_RANK	script.h	/^#define SCRIPT_PARAM_CH3_RANK /;"	d
SCRIPT_PARAM_CH3_ROOM	script.h	/^#define SCRIPT_PARAM_CH3_ROOM /;"	d
SCRIPT_PARAM_INT1	script.h	/^#define SCRIPT_PARAM_INT1 /;"	d
SCRIPT_PARAM_INT2	script.h	/^#define SCRIPT_PARAM_INT2 /;"	d
SCRIPT_PARAM_INT3	script.h	/^#define SCRIPT_PARAM_INT3 /;"	d
SCRIPT_PARAM_OB1	script.h	/^#define SCRIPT_PARAM_OB1 /;"	d
SCRIPT_PARAM_OB1_NAME	script.h	/^#define SCRIPT_PARAM_OB1_NAME /;"	d
SCRIPT_PARAM_OB1_VNUM	script.h	/^#define SCRIPT_PARAM_OB1_VNUM /;"	d
SCRIPT_PARAM_OB2	script.h	/^#define SCRIPT_PARAM_OB2 /;"	d
SCRIPT_PARAM_OB2_NAME	script.h	/^#define SCRIPT_PARAM_OB2_NAME /;"	d
SCRIPT_PARAM_OB2_VNUM	script.h	/^#define SCRIPT_PARAM_OB2_VNUM /;"	d
SCRIPT_PARAM_OB3	script.h	/^#define SCRIPT_PARAM_OB3 /;"	d
SCRIPT_PARAM_OB3_NAME	script.h	/^#define SCRIPT_PARAM_OB3_NAME /;"	d
SCRIPT_PARAM_OB3_VNUM	script.h	/^#define SCRIPT_PARAM_OB3_VNUM /;"	d
SCRIPT_PARAM_RM1	script.h	/^#define SCRIPT_PARAM_RM1 /;"	d
SCRIPT_PARAM_RM1_NAME	script.h	/^#define SCRIPT_PARAM_RM1_NAME /;"	d
SCRIPT_PARAM_RM2	script.h	/^#define SCRIPT_PARAM_RM2 /;"	d
SCRIPT_PARAM_RM2_NAME	script.h	/^#define SCRIPT_PARAM_RM2_NAME /;"	d
SCRIPT_PARAM_RM3	script.h	/^#define SCRIPT_PARAM_RM3 /;"	d
SCRIPT_PARAM_RM3_NAME	script.h	/^#define SCRIPT_PARAM_RM3_NAME /;"	d
SCRIPT_PARAM_STR1	script.h	/^#define SCRIPT_PARAM_STR1 /;"	d
SCRIPT_PARAM_STR2	script.h	/^#define SCRIPT_PARAM_STR2 /;"	d
SCRIPT_PARAM_STR3	script.h	/^#define SCRIPT_PARAM_STR3 /;"	d
SCRIPT_RAW_KILL	script.h	/^#define SCRIPT_RAW_KILL /;"	d
SCRIPT_RETURN_FALSE	script.h	/^#define SCRIPT_RETURN_FALSE /;"	d
SCRIPT_SEND_TO_CHAR	script.h	/^#define SCRIPT_SEND_TO_CHAR /;"	d
SCRIPT_SEND_TO_ROOM	script.h	/^#define SCRIPT_SEND_TO_ROOM /;"	d
SCRIPT_SEND_TO_ROOM_X	script.h	/^#define SCRIPT_SEND_TO_ROOM_X /;"	d
SCRIPT_SET_EXIT_STATE	script.h	/^#define SCRIPT_SET_EXIT_STATE /;"	d
SCRIPT_SET_INT_DIV	script.h	/^#define SCRIPT_SET_INT_DIV /;"	d
SCRIPT_SET_INT_MULT	script.h	/^#define SCRIPT_SET_INT_MULT /;"	d
SCRIPT_SET_INT_RANDOM	script.h	/^#define SCRIPT_SET_INT_RANDOM /;"	d
SCRIPT_SET_INT_SUB	script.h	/^#define SCRIPT_SET_INT_SUB /;"	d
SCRIPT_SET_INT_SUM	script.h	/^#define SCRIPT_SET_INT_SUM /;"	d
SCRIPT_SET_INT_VALUE	script.h	/^#define SCRIPT_SET_INT_VALUE /;"	d
SCRIPT_SET_INT_WAR_STATUS	script.h	/^#define SCRIPT_SET_INT_WAR_STATUS /;"	d
SCRIPT_TELEPORT_CHAR	script.h	/^#define SCRIPT_TELEPORT_CHAR /;"	d
SCRIPT_TELEPORT_CHAR_X	script.h	/^#define SCRIPT_TELEPORT_CHAR_X /;"	d
SCR_PREFIX	db.h	/^#define SCR_PREFIX /;"	d
SEASON_AUTUMN	structs.h	/^#define SEASON_AUTUMN /;"	d
SEASON_SPRING	structs.h	/^#define SEASON_SPRING /;"	d
SEASON_SUMMER	structs.h	/^#define SEASON_SUMMER /;"	d
SEASON_WINTER	structs.h	/^#define SEASON_WINTER /;"	d
SECS_PER_MUD_DAY	structs.h	/^const int constexpr SECS_PER_MUD_DAY = (24 * SECS_PER_MUD_HOUR);$/;"	v	typeref:typename:const int 
SECS_PER_MUD_HOUR	structs.h	/^const int constexpr SECS_PER_MUD_HOUR = 60;$/;"	v	typeref:typename:const int 
SECS_PER_MUD_MONTH	structs.h	/^const int constexpr SECS_PER_MUD_MONTH = (30 * SECS_PER_MUD_DAY);$/;"	v	typeref:typename:const int 
SECS_PER_MUD_YEAR	structs.h	/^const int constexpr SECS_PER_MUD_YEAR = (12 * SECS_PER_MUD_MONTH);$/;"	v	typeref:typename:const int 
SECS_PER_REAL_DAY	structs.h	/^const int constexpr SECS_PER_REAL_DAY = (24 * SECS_PER_REAL_HOUR);$/;"	v	typeref:typename:const int 
SECS_PER_REAL_HOUR	structs.h	/^const int constexpr SECS_PER_REAL_HOUR = (60 * SECS_PER_REAL_MIN);$/;"	v	typeref:typename:const int 
SECS_PER_REAL_MIN	structs.h	/^const int constexpr SECS_PER_REAL_MIN = 60;$/;"	v	typeref:typename:const int 
SECS_PER_REAL_YEAR	structs.h	/^const int constexpr SECS_PER_REAL_YEAR = (365 * SECS_PER_REAL_DAY);$/;"	v	typeref:typename:const int 
SECT_CITY	structs.h	/^#define SECT_CITY /;"	d
SECT_CRACK	structs.h	/^#define SECT_CRACK /;"	d
SECT_DENSE_FOREST	structs.h	/^#define SECT_DENSE_FOREST /;"	d
SECT_FIELD	structs.h	/^#define SECT_FIELD /;"	d
SECT_FOREST	structs.h	/^#define SECT_FOREST /;"	d
SECT_HILLS	structs.h	/^#define SECT_HILLS /;"	d
SECT_INSIDE	structs.h	/^#define SECT_INSIDE /;"	d
SECT_MOUNTAIN	structs.h	/^#define SECT_MOUNTAIN /;"	d
SECT_ROAD	structs.h	/^#define SECT_ROAD /;"	d
SECT_SWAMP	structs.h	/^#define SECT_SWAMP /;"	d
SECT_UNDERWATER	structs.h	/^#define SECT_UNDERWATER /;"	d
SECT_WATER_NOSWIM	structs.h	/^#define SECT_WATER_NOSWIM /;"	d
SECT_WATER_SWIM	structs.h	/^#define SECT_WATER_SWIM /;"	d
SECURITYROOM	structs.h	/^#define SECURITYROOM /;"	d
SEEK_CUR	utils.h	/^#define SEEK_CUR /;"	d
SEEK_END	utils.h	/^#define SEEK_END /;"	d
SEEK_SET	utils.h	/^#define SEEK_SET /;"	d
SEND_TO_Q	comm.h	/^#define SEND_TO_Q(/;"	d
SENTINEL_ITEM_ID_VALUE	structs.h	/^constexpr const sh_int SENTINEL_ITEM_ID_VALUE = -17;$/;"	v	typeref:typename:const sh_int
SET_BIT	utils.h	/^#define SET_BIT(/;"	d
SET_CASTING	utils.h	/^#define SET_CASTING(/;"	d
SET_CON	utils.h	/^#define SET_CON(/;"	d
SET_COND	utils.h	/^#define SET_COND(/;"	d
SET_CON_BASE	utils.h	/^#define SET_CON_BASE(/;"	d
SET_CURRENT_PARRY	utils.h	/^#define SET_CURRENT_PARRY(/;"	d
SET_DAMAGE	utils.h	/^#define SET_DAMAGE(/;"	d
SET_DODGE	utils.h	/^#define SET_DODGE(/;"	d
SET_ENERGY	utils.h	/^#define SET_ENERGY(/;"	d
SET_ENE_REGEN	utils.h	/^#define SET_ENE_REGEN(/;"	d
SET_EXP	utils.h	/^#define SET_EXP(/;"	d
SET_KNOWLEDGE	utils.h	/^#define SET_KNOWLEDGE(/;"	d
SET_MAX_MINI_LEVEL	utils.h	/^#define SET_MAX_MINI_LEVEL(/;"	d
SET_MINI_LEVEL	utils.h	/^#define SET_MINI_LEVEL(/;"	d
SET_OB	utils.h	/^#define SET_OB(/;"	d
SET_OR_REMOVE	act_wiz.cc	/^#define SET_OR_REMOVE(/;"	d	file:
SET_PARRY	utils.h	/^#define SET_PARRY(/;"	d
SET_PERCEPTION	utils.h	/^#define SET_PERCEPTION(/;"	d
SET_POS	utils.h	/^#define SET_POS(/;"	d
SET_PROF_LEVEL	utils.h	/^#define SET_PROF_LEVEL(/;"	d
SET_SHOOTING	utils.h	/^#define SET_SHOOTING(/;"	d
SET_SKILL	utils.h	/^#define SET_SKILL(/;"	d
SET_SPEC	utils.h	/^#define SET_SPEC(/;"	d
SET_SPELL_PEN	utils.h	/^#define SET_SPELL_PEN(/;"	d
SET_SPELL_POWER	utils.h	/^#define SET_SPELL_POWER(/;"	d
SET_STR	utils.h	/^#define SET_STR(/;"	d
SET_STR_BASE	utils.h	/^#define SET_STR_BASE(/;"	d
SET_TACTICS	utils.h	/^#define SET_TACTICS(/;"	d
SEX_FEMALE	structs.h	/^#define SEX_FEMALE /;"	d
SEX_MALE	structs.h	/^#define SEX_MALE /;"	d
SEX_NEUTRAL	structs.h	/^#define SEX_NEUTRAL /;"	d
SHADOWY	structs.h	/^#define SHADOWY /;"	d
SHAPE_ADD	protos.h	/^#define SHAPE_ADD /;"	d
SHAPE_CHAIN	protos.h	/^#define SHAPE_CHAIN /;"	d
SHAPE_CREATE	protos.h	/^#define SHAPE_CREATE /;"	d
SHAPE_CURRENT	protos.h	/^#define SHAPE_CURRENT /;"	d
SHAPE_CURRFLAG	protos.h	/^#define SHAPE_CURRFLAG /;"	d
SHAPE_DELETE	protos.h	/^#define SHAPE_DELETE /;"	d
SHAPE_DELETE_ACTIVE	protos.h	/^#define SHAPE_DELETE_ACTIVE /;"	d
SHAPE_DIGIT_ACTIVE	protos.h	/^#define SHAPE_DIGIT_ACTIVE /;"	d
SHAPE_DONE	protos.h	/^#define SHAPE_DONE /;"	d
SHAPE_EDIT	protos.h	/^#define SHAPE_EDIT /;"	d
SHAPE_FILE	db.h	/^#define SHAPE_FILE /;"	d
SHAPE_FILENAME	protos.h	/^#define SHAPE_FILENAME /;"	d
SHAPE_FREE	protos.h	/^#define SHAPE_FREE /;"	d
SHAPE_IMPLEMENT	protos.h	/^#define SHAPE_IMPLEMENT /;"	d
SHAPE_LOAD	protos.h	/^#define SHAPE_LOAD /;"	d
SHAPE_MASTER_MOBILE	protos.h	/^#define SHAPE_MASTER_MOBILE /;"	d
SHAPE_MASTER_OBJECT	protos.h	/^#define SHAPE_MASTER_OBJECT /;"	d
SHAPE_MDL_BACKDIR	protos.h	/^#define SHAPE_MDL_BACKDIR /;"	d
SHAPE_MDL_DIR	protos.h	/^#define SHAPE_MDL_DIR /;"	d
SHAPE_MOB_BACKDIR	protos.h	/^#define SHAPE_MOB_BACKDIR /;"	d
SHAPE_MOB_DIR	protos.h	/^#define SHAPE_MOB_DIR /;"	d
SHAPE_MODE	protos.h	/^#define SHAPE_MODE /;"	d
SHAPE_MUDLLE	protos.h	/^#define SHAPE_MUDLLE(/;"	d
SHAPE_MUDLLES	protos.h	/^#define SHAPE_MUDLLES /;"	d
SHAPE_MUDLLE_LOADED	protos.h	/^#define SHAPE_MUDLLE_LOADED /;"	d
SHAPE_NONE	protos.h	/^#define SHAPE_NONE /;"	d
SHAPE_OBJECT	protos.h	/^#define SHAPE_OBJECT(/;"	d
SHAPE_OBJECTS	protos.h	/^#define SHAPE_OBJECTS /;"	d
SHAPE_OBJECT_LOADED	protos.h	/^#define SHAPE_OBJECT_LOADED /;"	d
SHAPE_OBJ_BACKDIR	protos.h	/^#define SHAPE_OBJ_BACKDIR /;"	d
SHAPE_OBJ_DIR	protos.h	/^#define SHAPE_OBJ_DIR /;"	d
SHAPE_PROTO	protos.h	/^#define SHAPE_PROTO(/;"	d
SHAPE_PROTOS	protos.h	/^#define SHAPE_PROTOS /;"	d
SHAPE_PROTO_LOADED	protos.h	/^#define SHAPE_PROTO_LOADED /;"	d
SHAPE_RECALCULATE	protos.h	/^#define SHAPE_RECALCULATE /;"	d
SHAPE_RECALC_ALL	protos.h	/^#define SHAPE_RECALC_ALL /;"	d
SHAPE_ROM_BACKDIR	protos.h	/^#define SHAPE_ROM_BACKDIR /;"	d
SHAPE_ROM_DIR	protos.h	/^#define SHAPE_ROM_DIR /;"	d
SHAPE_ROOM	protos.h	/^#define SHAPE_ROOM(/;"	d
SHAPE_ROOMS	protos.h	/^#define SHAPE_ROOMS /;"	d
SHAPE_ROOM_LOADED	protos.h	/^#define SHAPE_ROOM_LOADED /;"	d
SHAPE_SAVE	protos.h	/^#define SHAPE_SAVE /;"	d
SHAPE_SCRIPT	protos.h	/^#define SHAPE_SCRIPT(/;"	d
SHAPE_SCRIPTS	protos.h	/^#define SHAPE_SCRIPTS /;"	d
SHAPE_SCRIPT_BACKDIR	protos.h	/^#define SHAPE_SCRIPT_BACKDIR /;"	d
SHAPE_SCRIPT_DIR	protos.h	/^#define SHAPE_SCRIPT_DIR /;"	d
SHAPE_SCRIPT_LOADED	protos.h	/^#define SHAPE_SCRIPT_LOADED /;"	d
SHAPE_SIMPLEMODE	protos.h	/^#define SHAPE_SIMPLEMODE /;"	d
SHAPE_SIMPLE_ACTIVE	protos.h	/^#define SHAPE_SIMPLE_ACTIVE /;"	d
SHAPE_SIMPLE_EDIT	protos.h	/^#define SHAPE_SIMPLE_EDIT /;"	d
SHAPE_STOP	protos.h	/^#define SHAPE_STOP /;"	d
SHAPE_ZONE	protos.h	/^#define SHAPE_ZONE(/;"	d
SHAPE_ZONES	protos.h	/^#define SHAPE_ZONES /;"	d
SHAPE_ZONE_LOADED	protos.h	/^#define SHAPE_ZONE_LOADED /;"	d
SHAPE_ZON_BACKDIR	protos.h	/^#define SHAPE_ZON_BACKDIR /;"	d
SHAPE_ZON_DIR	protos.h	/^#define SHAPE_ZON_DIR /;"	d
SHIELD_HAND	fight.cc	/^#define SHIELD_HAND /;"	d	file:
SHOOTING_FAST	utils.h	/^#define SHOOTING_FAST /;"	d
SHOOTING_NORMAL	utils.h	/^#define SHOOTING_NORMAL /;"	d
SHOOTING_SLOW	utils.h	/^#define SHOOTING_SLOW /;"	d
SHP_PREFIX	db.h	/^#define SHP_PREFIX /;"	d
SKILLS_FILE	db.h	/^#define SKILLS_FILE /;"	d
SKILL_ACCURACY	spells.h	/^#define SKILL_ACCURACY /;"	d
SKILL_AMBUSH	spells.h	/^#define SKILL_AMBUSH /;"	d
SKILL_ANIMALS	spells.h	/^#define SKILL_ANIMALS /;"	d
SKILL_ARCHERY	spells.h	/^#define SKILL_ARCHERY /;"	d
SKILL_ATTACK	spells.h	/^#define SKILL_ATTACK /;"	d
SKILL_AWARENESS	spells.h	/^#define SKILL_AWARENESS /;"	d
SKILL_AXE	spells.h	/^#define SKILL_AXE /;"	d
SKILL_BAREHANDED	spells.h	/^#define SKILL_BAREHANDED /;"	d
SKILL_BASH	spells.h	/^#define SKILL_BASH /;"	d
SKILL_BEND_TIME	spells.h	/^#define SKILL_BEND_TIME /;"	d
SKILL_BERSERK	spells.h	/^#define SKILL_BERSERK /;"	d
SKILL_BITE	spells.h	/^#define SKILL_BITE /;"	d
SKILL_BLINDING	spells.h	/^#define SKILL_BLINDING /;"	d
SKILL_BLOCK	spells.h	/^#define SKILL_BLOCK /;"	d
SKILL_BLOODTHIRST	spells.h	/^#define SKILL_BLOODTHIRST /;"	d
SKILL_CALM	spells.h	/^#define SKILL_CALM /;"	d
SKILL_CLEAVE	spells.h	/^#define SKILL_CLEAVE /;"	d
SKILL_CONCUSSION	spells.h	/^#define SKILL_CONCUSSION /;"	d
SKILL_DEFEND	spells.h	/^#define SKILL_DEFEND /;"	d
SKILL_DODGE	spells.h	/^#define SKILL_DODGE /;"	d
SKILL_EXTRA_DAMAGE	spells.h	/^#define SKILL_EXTRA_DAMAGE /;"	d
SKILL_FRENZY	spells.h	/^#define SKILL_FRENZY /;"	d
SKILL_GATHER_FOOD	spells.h	/^#define SKILL_GATHER_FOOD /;"	d
SKILL_HIDE	spells.h	/^#define SKILL_HIDE /;"	d
SKILL_KICK	spells.h	/^#define SKILL_KICK /;"	d
SKILL_LEADERSHIP	spells.h	/^#define SKILL_LEADERSHIP /;"	d
SKILL_MARK	spells.h	/^#define SKILL_MARK /;"	d
SKILL_MAUL	spells.h	/^#define SKILL_MAUL /;"	d
SKILL_NATURAL_ATTACK	spells.h	/^#define SKILL_NATURAL_ATTACK /;"	d
SKILL_OVERRUN	spells.h	/^#define SKILL_OVERRUN /;"	d
SKILL_PARRY	spells.h	/^#define SKILL_PARRY /;"	d
SKILL_PICK_LOCK	spells.h	/^#define SKILL_PICK_LOCK /;"	d
SKILL_PIERCE	spells.h	/^#define SKILL_PIERCE /;"	d
SKILL_RECRUIT	spells.h	/^#define SKILL_RECRUIT /;"	d
SKILL_REND	spells.h	/^#define SKILL_REND /;"	d
SKILL_RESCUE	spells.h	/^#define SKILL_RESCUE /;"	d
SKILL_RIDE	spells.h	/^#define SKILL_RIDE /;"	d
SKILL_RIPOSTE	spells.h	/^#define SKILL_RIPOSTE /;"	d
SKILL_SEARCH	spells.h	/^#define SKILL_SEARCH /;"	d
SKILL_SLASH	spells.h	/^#define SKILL_SLASH /;"	d
SKILL_SMASH	spells.h	/^#define SKILL_SMASH /;"	d
SKILL_SNEAK	spells.h	/^#define SKILL_SNEAK /;"	d
SKILL_SPEARS	spells.h	/^#define SKILL_SPEARS /;"	d
SKILL_STALK	spells.h	/^#define SKILL_STALK /;"	d
SKILL_STEALTH	spells.h	/^#define SKILL_STEALTH /;"	d
SKILL_STOMP	spells.h	/^#define SKILL_STOMP /;"	d
SKILL_SWIM	spells.h	/^#define SKILL_SWIM /;"	d
SKILL_SWING	spells.h	/^#define SKILL_SWING /;"	d
SKILL_SWIPE	spells.h	/^#define SKILL_SWIPE /;"	d
SKILL_TAME	spells.h	/^#define SKILL_TAME /;"	d
SKILL_TRACK	spells.h	/^#define SKILL_TRACK /;"	d
SKILL_TRAP	spells.h	/^#define SKILL_TRAP /;"	d
SKILL_TRAVELLING	spells.h	/^#define SKILL_TRAVELLING /;"	d
SKILL_TWOHANDED	spells.h	/^#define SKILL_TWOHANDED /;"	d
SKILL_UNUSED2	spells.h	/^#define SKILL_UNUSED2 /;"	d
SKILL_UNUSED3	spells.h	/^#define SKILL_UNUSED3 /;"	d
SKILL_UNUSED5	spells.h	/^#define SKILL_UNUSED5 /;"	d
SKILL_WEAPONS	spells.h	/^#define SKILL_WEAPONS /;"	d
SKILL_WHIP	spells.h	/^#define SKILL_WHIP /;"	d
SKILL_WHISTLE	spells.h	/^#define SKILL_WHISTLE /;"	d
SKILL_WINDBLAST	spells.h	/^#define SKILL_WINDBLAST /;"	d
SKY_BLIZZARD	structs.h	/^#define SKY_BLIZZARD /;"	d
SKY_CLOUDLESS	structs.h	/^#define SKY_CLOUDLESS /;"	d
SKY_CLOUDY	structs.h	/^#define SKY_CLOUDY /;"	d
SKY_LIGHTNING	structs.h	/^#define SKY_LIGHTNING /;"	d
SKY_RAINING	structs.h	/^#define SKY_RAINING /;"	d
SKY_SNOWING	structs.h	/^#define SKY_SNOWING /;"	d
SMALL_BUFSIZE	structs.h	/^const int constexpr SMALL_BUFSIZE = 512;$/;"	v	typeref:typename:const int 
SMALL_WORLD_RADIUS	structs.h	/^#define SMALL_WORLD_RADIUS /;"	d
SMASH_TIMER	olog_hai.cpp	/^const int constexpr SMASH_TIMER = 60;$/;"	v	typeref:typename:const int 
SOCMESS_FILE	db.h	/^#define SOCMESS_FILE /;"	d
SORTING_COMMAND_INDEX	act_othe.cc	/^#define SORTING_COMMAND_INDEX /;"	d	file:
SOURCE_INVALID	structs.h	/^    SOURCE_INVALID,$/;"	e	enum:source_type
SOURCE_ITEM	structs.h	/^    SOURCE_ITEM,$/;"	e	enum:source_type
SOURCE_MOB	structs.h	/^    SOURCE_MOB,$/;"	e	enum:source_type
SOURCE_OTHER	structs.h	/^    SOURCE_OTHER,$/;"	e	enum:source_type
SOURCE_PLAYER	structs.h	/^    SOURCE_PLAYER,$/;"	e	enum:source_type
SOURCE_ROOM	structs.h	/^    SOURCE_ROOM,$/;"	e	enum:source_type
SOUTH	structs.h	/^#define SOUTH /;"	d
SPECIAL	boards.cc	/^SPECIAL(gen_board)$/;"	f
SPECIAL	interpre.h	/^#define SPECIAL(/;"	d
SPECIAL	mail.cc	/^SPECIAL(postmaster)$/;"	f
SPECIAL	mudlle.cc	/^SPECIAL(intelligent)$/;"	f
SPECIAL	objsave.cc	/^SPECIAL(receptionist)$/;"	f
SPECIAL	shop.cc	/^SPECIAL(shop_keeper)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(ar_tarthalon)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_down)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_east)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_north)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_south)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_up)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(block_exit_west)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(dragon)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(ferry_boat)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(ferry_captain)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(gatekeeper)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(gatekeeper2)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(gatekeeper_no_knock)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(ghoul)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(guild)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(healing_plant)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(herald)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(kit_room)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(mob_cleric)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(mob_jig)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(mob_magic_user)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(mob_ranger)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(mob_warrior)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(obj_willpower)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(pet_shops)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(react_trap)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(reciter)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(resetter)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(room_temple)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(snake)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(swarm)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(thuringwethil)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(vampire_doorkeep)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(vampire_huntress)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(vampire_killer)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(vortex_elevator)$/;"	f
SPECIAL	spec_pro.cc	/^SPECIAL(wolf_summoner)$/;"	f
SPECIAL_CALLLIST	mudlle.h	/^#define SPECIAL_CALLLIST /;"	d
SPECIAL_CHAR	mudlle.h	/^#define SPECIAL_CHAR /;"	d
SPECIAL_COMMAND	interpre.h	/^#define SPECIAL_COMMAND /;"	d
SPECIAL_DAMAGE	interpre.h	/^#define SPECIAL_DAMAGE /;"	d
SPECIAL_DEATH	interpre.h	/^#define SPECIAL_DEATH /;"	d
SPECIAL_DELAY	interpre.h	/^#define SPECIAL_DELAY /;"	d
SPECIAL_ENTER	interpre.h	/^#define SPECIAL_ENTER /;"	d
SPECIAL_FILE	mudlle.h	/^#define SPECIAL_FILE /;"	d
SPECIAL_LIST	mudlle.h	/^#define SPECIAL_LIST(/;"	d
SPECIAL_LIST_AREA	mudlle.h	/^#define SPECIAL_LIST_AREA(/;"	d
SPECIAL_LIST_HEAD	mudlle.h	/^#define SPECIAL_LIST_HEAD(/;"	d
SPECIAL_LIST_NEXT	mudlle.h	/^#define SPECIAL_LIST_NEXT(/;"	d
SPECIAL_LIST_RAW	mudlle.h	/^#define SPECIAL_LIST_RAW(/;"	d
SPECIAL_LIST_REFS	mudlle.h	/^#define SPECIAL_LIST_REFS(/;"	d
SPECIAL_LIST_TYPE	mudlle.h	/^#define SPECIAL_LIST_TYPE(/;"	d
SPECIAL_MARK	mudlle.h	/^#define SPECIAL_MARK /;"	d
SPECIAL_NONE	interpre.h	/^#define SPECIAL_NONE /;"	d
SPECIAL_NULL	mudlle.h	/^#define SPECIAL_NULL /;"	d
SPECIAL_OBJ	mudlle.h	/^#define SPECIAL_OBJ /;"	d
SPECIAL_PROGRAM	mudlle.h	/^#define SPECIAL_PROGRAM(/;"	d
SPECIAL_ROOM	mudlle.h	/^#define SPECIAL_ROOM /;"	d
SPECIAL_SELF	interpre.h	/^#define SPECIAL_SELF /;"	d
SPECIAL_STACK	mudlle.h	/^#define SPECIAL_STACK(/;"	d
SPECIAL_STACKLEN	mudlle.h	/^#define SPECIAL_STACKLEN /;"	d
SPECIAL_STACKPOINT	mudlle.h	/^#define SPECIAL_STACKPOINT(/;"	d
SPECIAL_TARGET	interpre.h	/^#define SPECIAL_TARGET /;"	d
SPECIAL_TEXT	mudlle.h	/^#define SPECIAL_TEXT /;"	d
SPECIAL_VOID	mudlle.h	/^#define SPECIAL_VOID /;"	d
SPELLS_H	spells.h	/^#define SPELLS_H$/;"	d
SPELLS_TO_LEARN	utils.h	/^#define SPELLS_TO_LEARN(/;"	d
SPELL_ACTIVITY	spells.h	/^#define SPELL_ACTIVITY /;"	d
SPELL_ANGER	spells.h	/^#define SPELL_ANGER /;"	d
SPELL_ARDA	spells.h	/^#define SPELL_ARDA /;"	d
SPELL_ARMOR	spells.h	/^#define SPELL_ARMOR /;"	d
SPELL_ASPHYXIATION	spells.h	/^#define SPELL_ASPHYXIATION /;"	d
SPELL_BEACON	spells.h	/^#define SPELL_BEACON /;"	d
SPELL_BLACK_ARROW	spells.h	/^#define SPELL_BLACK_ARROW /;"	d
SPELL_BLAZE	spells.h	/^#define SPELL_BLAZE /;"	d
SPELL_BLINK	spells.h	/^#define SPELL_BLINK /;"	d
SPELL_BURN	spells.h	/^#define SPELL_BURN /;"	d
SPELL_CHILL_RAY	spells.h	/^#define SPELL_CHILL_RAY /;"	d
SPELL_CONE_OF_COLD	spells.h	/^#define SPELL_CONE_OF_COLD /;"	d
SPELL_CONFUSE	spells.h	/^#define SPELL_CONFUSE /;"	d
SPELL_CREATE_LIGHT	spells.h	/^#define SPELL_CREATE_LIGHT /;"	d
SPELL_CURE_SELF	spells.h	/^#define SPELL_CURE_SELF /;"	d
SPELL_CURING	spells.h	/^#define SPELL_CURING /;"	d
SPELL_CURSE	spells.h	/^#define SPELL_CURSE /;"	d
SPELL_DARK_BOLT	spells.h	/^#define SPELL_DARK_BOLT /;"	d
SPELL_DEATH_WARD	spells.h	/^#define SPELL_DEATH_WARD /;"	d
SPELL_DETECT_EVIL	spells.h	/^#define SPELL_DETECT_EVIL /;"	d
SPELL_DETECT_HIDDEN	spells.h	/^#define SPELL_DETECT_HIDDEN /;"	d
SPELL_DETECT_MAGIC	spells.h	/^#define SPELL_DETECT_MAGIC /;"	d
SPELL_DISPEL_REGENERATION	spells.h	/^#define SPELL_DISPEL_REGENERATION /;"	d
SPELL_DIVINATION	spells.h	/^#define SPELL_DIVINATION /;"	d
SPELL_DRAGONSBREATH	spells.h	/^#define SPELL_DRAGONSBREATH /;"	d
SPELL_EARTHQUAKE	spells.h	/^#define SPELL_EARTHQUAKE /;"	d
SPELL_ENCHANT_WEAPON	spells.h	/^#define SPELL_ENCHANT_WEAPON /;"	d
SPELL_EXPOSE_ELEMENTS	spells.h	/^#define SPELL_EXPOSE_ELEMENTS /;"	d
SPELL_FAME_WAR	spells.h	/^#define SPELL_FAME_WAR /;"	d
SPELL_FEAR	spells.h	/^#define SPELL_FEAR /;"	d
SPELL_FILE	db.h	/^#define SPELL_FILE /;"	d
SPELL_FIREBALL	spells.h	/^#define SPELL_FIREBALL /;"	d
SPELL_FIREBALL2	spells.h	/^#define SPELL_FIREBALL2 /;"	d
SPELL_FIREBOLT	spells.h	/^#define SPELL_FIREBOLT /;"	d
SPELL_FLASH	spells.h	/^#define SPELL_FLASH /;"	d
SPELL_FREEZE	spells.h	/^#define SPELL_FREEZE /;"	d
SPELL_GUARDIAN	spells.h	/^#define SPELL_GUARDIAN /;"	d
SPELL_HALLUCINATE	spells.h	/^#define SPELL_HALLUCINATE /;"	d
SPELL_HAZE	spells.h	/^#define SPELL_HAZE /;"	d
SPELL_IDENTIFY	spells.h	/^#define SPELL_IDENTIFY /;"	d
SPELL_INFRAVISION	spells.h	/^#define SPELL_INFRAVISION /;"	d
SPELL_INSIGHT	spells.h	/^#define SPELL_INSIGHT /;"	d
SPELL_LEACH	spells.h	/^#define SPELL_LEACH /;"	d
SPELL_LEVEL	spells.h	/^#define SPELL_LEVEL(/;"	d
SPELL_LIGHTNING_BOLT	spells.h	/^#define SPELL_LIGHTNING_BOLT /;"	d
SPELL_LIGHTNING_STRIKE	spells.h	/^#define SPELL_LIGHTNING_STRIKE /;"	d
SPELL_LOCATE_LIVING	spells.h	/^#define SPELL_LOCATE_LIVING /;"	d
SPELL_MAGIC_MISSILE	spells.h	/^#define SPELL_MAGIC_MISSILE /;"	d
SPELL_MIND_BLOCK	spells.h	/^#define SPELL_MIND_BLOCK /;"	d
SPELL_MIST_OF_BAAZUNGA	spells.h	/^#define SPELL_MIST_OF_BAAZUNGA /;"	d
SPELL_NONE	spells.h	/^#define SPELL_NONE /;"	d
SPELL_POISON	spells.h	/^#define SPELL_POISON /;"	d
SPELL_PRAGMATISM	spells.h	/^#define SPELL_PRAGMATISM /;"	d
SPELL_PROTECTION	spells.h	/^#define SPELL_PROTECTION /;"	d
SPELL_RAGE	spells.h	/^#define SPELL_RAGE /;"	d
SPELL_REGENERATION	spells.h	/^#define SPELL_REGENERATION /;"	d
SPELL_RELOCATE	spells.h	/^#define SPELL_RELOCATE /;"	d
SPELL_REMOVE_POISON	spells.h	/^#define SPELL_REMOVE_POISON /;"	d
SPELL_RESERVED_DBC	spells.h	/^#define SPELL_RESERVED_DBC /;"	d
SPELL_RESIST_MAGIC	spells.h	/^#define SPELL_RESIST_MAGIC /;"	d
SPELL_RESIST_POISON	spells.h	/^#define SPELL_RESIST_POISON /;"	d
SPELL_RESTLESSNESS	spells.h	/^#define SPELL_RESTLESSNESS /;"	d
SPELL_REVEAL_LIFE	spells.h	/^#define SPELL_REVEAL_LIFE /;"	d
SPELL_REVIVE	spells.h	/^#define SPELL_REVIVE /;"	d
SPELL_SANCTUARY	spells.h	/^#define SPELL_SANCTUARY /;"	d
SPELL_SEARING_DARKNESS	spells.h	/^#define SPELL_SEARING_DARKNESS /;"	d
SPELL_SHIELD	spells.h	/^#define SPELL_SHIELD /;"	d
SPELL_SHIFT	spells.h	/^#define SPELL_SHIFT /;"	d
SPELL_SHOUT_OF_PAIN	spells.h	/^#define SPELL_SHOUT_OF_PAIN /;"	d
SPELL_SLOW_DIGESTION	spells.h	/^#define SPELL_SLOW_DIGESTION /;"	d
SPELL_SPEAR_OF_DARKNESS	spells.h	/^#define SPELL_SPEAR_OF_DARKNESS /;"	d
SPELL_SUMMON	spells.h	/^#define SPELL_SUMMON /;"	d
SPELL_TERROR	spells.h	/^#define SPELL_TERROR /;"	d
SPELL_TYPE_ANTI	spells.h	/^#define SPELL_TYPE_ANTI /;"	d
SPELL_TYPE_POTION	spells.h	/^#define SPELL_TYPE_POTION /;"	d
SPELL_TYPE_SCROLL	spells.h	/^#define SPELL_TYPE_SCROLL /;"	d
SPELL_TYPE_SPELL	spells.h	/^#define SPELL_TYPE_SPELL /;"	d
SPELL_TYPE_STAFF	spells.h	/^#define SPELL_TYPE_STAFF /;"	d
SPELL_TYPE_WAND	spells.h	/^#define SPELL_TYPE_WAND /;"	d
SPELL_VITALITY	spells.h	/^#define SPELL_VITALITY /;"	d
SPELL_VITALIZE_SELF	spells.h	/^#define SPELL_VITALIZE_SELF /;"	d
SPELL_WORD_OF_AGONY	spells.h	/^#define SPELL_WORD_OF_AGONY /;"	d
SPELL_WORD_OF_PAIN	spells.h	/^#define SPELL_WORD_OF_PAIN /;"	d
SPELL_WORD_OF_SHOCK	spells.h	/^#define SPELL_WORD_OF_SHOCK /;"	d
SPELL_WORD_OF_SIGHT	spells.h	/^#define SPELL_WORD_OF_SIGHT /;"	d
SPL	utils.h	/^#define SPL /;"	d
STACK_VALUE	mudlle2.cc	/^long STACK_VALUE(struct char_data* host)$/;"	f	typeref:typename:long
STAMP_PRICE	mail.h	/^#define STAMP_PRICE /;"	d
START_MESSG	config.cc	/^char* START_MESSG = "Welcome.  This is your new MUD character.\\n\\r"$/;"	v	typeref:typename:char *
STATE	interpre.h	/^#define STATE(/;"	d
STOMP_TIMER	olog_hai.cpp	/^const int constexpr STOMP_TIMER = 60;$/;"	v	typeref:typename:const int 
STRUCTS_H	structs.h	/^#define STRUCTS_H$/;"	d
SUBST	shapeobj.cc	/^#define SUBST(/;"	d	file:
SUBST	shaperom.cc	/^#define SUBST(/;"	d	file:
SUBST	shapezon.cc	/^#define SUBST(/;"	d	file:
SUN_DARK	structs.h	/^#define SUN_DARK /;"	d
SUN_LIGHT	structs.h	/^#define SUN_LIGHT /;"	d
SUN_PENALTY	utils.h	/^#define SUN_PENALTY(/;"	d
SUN_RISE	structs.h	/^#define SUN_RISE /;"	d
SUN_SET	structs.h	/^#define SUN_SET /;"	d
SWITCH	utils.h	/^#define SWITCH(/;"	d
SWORD_HAND	fight.cc	/^#define SWORD_HAND /;"	d	file:
SocketType	platdef.h	/^#define SocketType /;"	d
Strength	profs.cc	/^    Strength,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
TACTICS_AGGRESSIVE	utils.h	/^#define TACTICS_AGGRESSIVE /;"	d
TACTICS_BERSERK	utils.h	/^#define TACTICS_BERSERK /;"	d
TACTICS_CAREFUL	utils.h	/^#define TACTICS_CAREFUL /;"	d
TACTICS_DEFENSIVE	utils.h	/^#define TACTICS_DEFENSIVE /;"	d
TACTICS_NORMAL	utils.h	/^#define TACTICS_NORMAL /;"	d
TARGET_ALL	structs.h	/^#define TARGET_ALL /;"	d
TARGET_CHAR	structs.h	/^#define TARGET_CHAR /;"	d
TARGET_DIR	structs.h	/^#define TARGET_DIR /;"	d
TARGET_GOLD	structs.h	/^#define TARGET_GOLD /;"	d
TARGET_IGNORE	structs.h	/^#define TARGET_IGNORE /;"	d
TARGET_IN	structs.h	/^#define TARGET_IN /;"	d
TARGET_NONE	structs.h	/^#define TARGET_NONE /;"	d
TARGET_OBJ	structs.h	/^#define TARGET_OBJ /;"	d
TARGET_OTHER	structs.h	/^#define TARGET_OTHER /;"	d
TARGET_ROOM	structs.h	/^#define TARGET_ROOM /;"	d
TARGET_TEXT	structs.h	/^#define TARGET_TEXT /;"	d
TARGET_VALUE	structs.h	/^#define TARGET_VALUE /;"	d
TAR_ALL	structs.h	/^#define TAR_ALL /;"	d
TAR_CHAR_ROOM	structs.h	/^#define TAR_CHAR_ROOM /;"	d
TAR_CHAR_WORLD	structs.h	/^#define TAR_CHAR_WORLD /;"	d
TAR_DARK_OK	structs.h	/^#define TAR_DARK_OK /;"	d
TAR_DIRECTION	structs.h	/^#define TAR_DIRECTION /;"	d
TAR_DIR_NAME	structs.h	/^#define TAR_DIR_NAME /;"	d
TAR_DIR_WAY	structs.h	/^#define TAR_DIR_WAY /;"	d
TAR_FIGHT_VICT	structs.h	/^#define TAR_FIGHT_VICT /;"	d
TAR_GOLD	structs.h	/^#define TAR_GOLD /;"	d
TAR_IGNORE	structs.h	/^#define TAR_IGNORE /;"	d
TAR_IN	structs.h	/^#define TAR_IN /;"	d
TAR_IN_OTHER	structs.h	/^#define TAR_IN_OTHER /;"	d
TAR_NONE_OK	structs.h	/^#define TAR_NONE_OK /;"	d
TAR_OBJ_EQUIP	structs.h	/^#define TAR_OBJ_EQUIP /;"	d
TAR_OBJ_INV	structs.h	/^#define TAR_OBJ_INV /;"	d
TAR_OBJ_ROOM	structs.h	/^#define TAR_OBJ_ROOM /;"	d
TAR_OBJ_WORLD	structs.h	/^#define TAR_OBJ_WORLD /;"	d
TAR_SELF	structs.h	/^#define TAR_SELF /;"	d
TAR_SELF_NONO	structs.h	/^#define TAR_SELF_NONO /;"	d
TAR_SELF_ONLY	structs.h	/^#define TAR_SELF_ONLY /;"	d
TAR_TEXT	structs.h	/^#define TAR_TEXT /;"	d
TAR_TEXT_ALL	structs.h	/^#define TAR_TEXT_ALL /;"	d
TAR_VALUE	structs.h	/^#define TAR_VALUE /;"	d
TEMPORARY	char_utils.cpp	/^namespace TEMPORARY {$/;"	n	namespace:utils	file:
TEMPORARY	char_utils_combat.cpp	/^namespace TEMPORARY {$/;"	n	namespace:utils	file:
TEXT_LIST	mudlle2.cc	/^void TEXT_LIST(struct char_data* host, char* targ)$/;"	f	typeref:typename:void
THIRST	structs.h	/^#define THIRST /;"	d
TICS_PER_SECOND	structs.h	/^const int constexpr TICS_PER_SECOND = 4;$/;"	v	typeref:typename:const int 
TOGGLE_BIT	utils.h	/^#define TOGGLE_BIT(/;"	d
TOG_OFF	act_othe.cc	/^#define TOG_OFF /;"	d	file:
TOG_ON	act_othe.cc	/^#define TOG_ON /;"	d	file:
TOROOM	graph.cc	/^#define TOROOM(/;"	d	file:
TOTAL_LENGTH	db.cc	/^int room_data::TOTAL_LENGTH = 0;$/;"	m	class:room_data	typeref:typename:int
TOTAL_LENGTH	structs.h	/^    static int TOTAL_LENGTH;$/;"	m	struct:room_data	typeref:typename:int
TO_CHAR	comm.h	/^#define TO_CHAR /;"	d
TO_LIST	mudlle2.cc	/^void TO_LIST(struct char_data* host, target_data* newtarg)$/;"	f	typeref:typename:void
TO_LIST	mudlle2.cc	/^void TO_LIST(struct char_data* host, void* entr, int type)$/;"	f	typeref:typename:void
TO_NOTVICT	comm.h	/^#define TO_NOTVICT /;"	d
TO_ROOM	comm.h	/^#define TO_ROOM /;"	d
TO_STACK	mudlle2.cc	/^void TO_STACK(struct char_data* host, long x)$/;"	f	typeref:typename:void
TO_VICT	comm.h	/^#define TO_VICT /;"	d
TP_ERROR	modify.cc	/^#define TP_ERROR /;"	d	file:
TP_MOB	modify.cc	/^#define TP_MOB /;"	d	file:
TP_OBJ	modify.cc	/^#define TP_OBJ /;"	d	file:
TRACK_THROUGH_DOORS	graph.cc	/^#define TRACK_THROUGH_DOORS$/;"	d	file:
TRUE	config.cc	/^#define TRUE /;"	d	file:
TRUE	utils.h	/^#define TRUE /;"	d
TUNNEL	structs.h	/^#define TUNNEL /;"	d
TYPE_BITE	spells.h	/^#define TYPE_BITE /;"	d
TYPE_BLUDGEON	spells.h	/^#define TYPE_BLUDGEON /;"	d
TYPE_CLAW	spells.h	/^#define TYPE_CLAW /;"	d
TYPE_CLEAVE	spells.h	/^#define TYPE_CLEAVE /;"	d
TYPE_CRUSH	spells.h	/^#define TYPE_CRUSH /;"	d
TYPE_FLAIL	spells.h	/^#define TYPE_FLAIL /;"	d
TYPE_HIT	spells.h	/^#define TYPE_HIT /;"	d
TYPE_PIERCE	spells.h	/^#define TYPE_PIERCE /;"	d
TYPE_SLASH	spells.h	/^#define TYPE_SLASH /;"	d
TYPE_SMITE	spells.h	/^#define TYPE_SMITE /;"	d
TYPE_SPEARS	spells.h	/^#define TYPE_SPEARS /;"	d
TYPE_STAB	spells.h	/^#define TYPE_STAB /;"	d
TYPE_STING	spells.h	/^#define TYPE_STING /;"	d
TYPE_SUFFERING	spells.h	/^#define TYPE_SUFFERING /;"	d
TYPE_UNDEFINED	spells.h	/^#define TYPE_UNDEFINED /;"	d
TYPE_WHIP	spells.h	/^#define TYPE_WHIP /;"	d
TYPO_FILE	db.h	/^#define TYPO_FILE /;"	d
UNMARK	graph.cc	/^#define UNMARK(/;"	d	file:
UP	structs.h	/^#define UP /;"	d
UPPER	utils.h	/^#define UPPER(/;"	d
UP_LIST	mudlle2.cc	/^void UP_LIST(struct char_data* host)$/;"	f	typeref:typename:void
UP_STACK	mudlle2.cc	/^void UP_STACK(struct char_data* host)$/;"	f	typeref:typename:void
USERS_FORMAT	act_info.cc	/^#define USERS_FORMAT /;"	d	file:
USE_BIG_BROTHER	big_brother.h	/^#define USE_BIG_BROTHER /;"	d
USE_MANA	spells.h	/^#define USE_MANA(/;"	d
USE_SPIRIT	spells.h	/^#define USE_SPIRIT(/;"	d
USING_LARGE	comm.h	/^#define USING_LARGE(/;"	d
USING_SMALL	comm.h	/^#define USING_SMALL(/;"	d
UTILS_H	utils.h	/^#define UTILS_H$/;"	d
VALID_EDGE	graph.cc	/^#define VALID_EDGE(/;"	d	file:
VIRT	db.h	/^#define VIRT /;"	d
VNUM	boards.h	/^#define VNUM /;"	d
WAIT_STATE	utils.h	/^#define WAIT_STATE(/;"	d
WAIT_STATE_BRIEF	utils.h	/^#define WAIT_STATE_BRIEF(/;"	d
WAIT_STATE_FULL	utils.h	/^#define WAIT_STATE_FULL(/;"	d
WEAPON_POISON_DUR	structs.h	/^#define WEAPON_POISON_DUR /;"	d
WEAR_ABOUT	structs.h	/^#define WEAR_ABOUT /;"	d
WEAR_ARMS	structs.h	/^#define WEAR_ARMS /;"	d
WEAR_BACK	structs.h	/^#define WEAR_BACK /;"	d
WEAR_BELT_1	structs.h	/^#define WEAR_BELT_1 /;"	d
WEAR_BELT_2	structs.h	/^#define WEAR_BELT_2 /;"	d
WEAR_BELT_3	structs.h	/^#define WEAR_BELT_3 /;"	d
WEAR_BODY	structs.h	/^#define WEAR_BODY /;"	d
WEAR_FEET	structs.h	/^#define WEAR_FEET /;"	d
WEAR_FINGER_L	structs.h	/^#define WEAR_FINGER_L /;"	d
WEAR_FINGER_R	structs.h	/^#define WEAR_FINGER_R /;"	d
WEAR_HANDS	structs.h	/^#define WEAR_HANDS /;"	d
WEAR_HEAD	structs.h	/^#define WEAR_HEAD /;"	d
WEAR_LEGS	structs.h	/^#define WEAR_LEGS /;"	d
WEAR_LIGHT	structs.h	/^#define WEAR_LIGHT /;"	d
WEAR_NECK_1	structs.h	/^#define WEAR_NECK_1 /;"	d
WEAR_NECK_2	structs.h	/^#define WEAR_NECK_2 /;"	d
WEAR_SHIELD	structs.h	/^#define WEAR_SHIELD /;"	d
WEAR_WAISTE	structs.h	/^#define WEAR_WAISTE /;"	d
WEAR_WRIST_L	structs.h	/^#define WEAR_WRIST_L /;"	d
WEAR_WRIST_R	structs.h	/^#define WEAR_WRIST_R /;"	d
WEATHER_MESSAGE_RISE	weather.cc	/^#define WEATHER_MESSAGE_RISE /;"	d	file:
WEATHER_MESSAGE_SET	weather.cc	/^#define WEATHER_MESSAGE_SET /;"	d	file:
WELC_MESSG	config.cc	/^char* WELC_MESSG = "\\n\\r"$/;"	v	typeref:typename:char *
WEST	structs.h	/^#define WEST /;"	d
WHO_FORMAT	act_info.cc	/^#define WHO_FORMAT /;"	d	file:
WIELD	structs.h	/^#define WIELD /;"	d
WIELD_TWOHANDED	structs.h	/^#define WIELD_TWOHANDED /;"	d
WILL_TEACH	utils.h	/^#define WILL_TEACH(/;"	d
WIMP_LEVEL	utils.h	/^#define WIMP_LEVEL(/;"	d
WIZLIST_FILE	db.h	/^#define WIZLIST_FILE /;"	d
WLD_PREFIX	db.h	/^#define WLD_PREFIX /;"	d
WORLD_AREA	structs.h	/^#define WORLD_AREA /;"	d
WORLD_SIZE_X	structs.h	/^#define WORLD_SIZE_X /;"	d
WORLD_SIZE_Y	structs.h	/^#define WORLD_SIZE_Y /;"	d
WRITE_LVL	boards.h	/^#define WRITE_LVL /;"	d
WT_BLUDGEONING	structs.h	/^    WT_BLUDGEONING,$/;"	e	enum:game_types::weapon_type
WT_BLUDGEONING_TWO	structs.h	/^    WT_BLUDGEONING_TWO,$/;"	e	enum:game_types::weapon_type
WT_BOW	structs.h	/^    WT_BOW,$/;"	e	enum:game_types::weapon_type
WT_CLEAVING	structs.h	/^    WT_CLEAVING,$/;"	e	enum:game_types::weapon_type
WT_CLEAVING_TWO	structs.h	/^    WT_CLEAVING_TWO,$/;"	e	enum:game_types::weapon_type
WT_COUNT	structs.h	/^    WT_COUNT,$/;"	e	enum:game_types::weapon_type
WT_CROSSBOW	structs.h	/^    WT_CROSSBOW,$/;"	e	enum:game_types::weapon_type
WT_FLAILING	structs.h	/^    WT_FLAILING,$/;"	e	enum:game_types::weapon_type
WT_PIERCING	structs.h	/^    WT_PIERCING,$/;"	e	enum:game_types::weapon_type
WT_SLASHING	structs.h	/^    WT_SLASHING,$/;"	e	enum:game_types::weapon_type
WT_SLASHING_TWO	structs.h	/^    WT_SLASHING_TWO,$/;"	e	enum:game_types::weapon_type
WT_SMITING	structs.h	/^    WT_SMITING,$/;"	e	enum:game_types::weapon_type
WT_STABBING	structs.h	/^    WT_STABBING,$/;"	e	enum:game_types::weapon_type
WT_UNUSED_1	structs.h	/^    WT_UNUSED_1,$/;"	e	enum:game_types::weapon_type
WT_UNUSED_2	structs.h	/^    WT_UNUSED_2,$/;"	e	enum:game_types::weapon_type
WT_WHIPPING	structs.h	/^    WT_WHIPPING,$/;"	e	enum:game_types::weapon_type
Will	profs.cc	/^    Will,$/;"	e	enum:_INTERNAL::RotS_Stats	file:
XNAME_FILE	db.h	/^#define XNAME_FILE /;"	d
YES	config.cc	/^#define YES /;"	d	file:
YESNO	utils.h	/^#define YESNO(/;"	d
YESNO_INV	utils.h	/^#define YESNO_INV(/;"	d
ZCMD	zone.cc	/^#define ZCMD /;"	d	file:
ZONE_H	zone.h	/^#define ZONE_H$/;"	d
ZON_PREFIX	db.h	/^#define ZON_PREFIX /;"	d
ZO_DEAD	zone.cc	/^#define ZO_DEAD /;"	d	file:
ZO_QUED	zone.cc	/^#define ZO_QUED /;"	d	file:
_INTERNAL	profs.cc	/^namespace _INTERNAL {$/;"	n	file:
__PKILL_H__	pkill.h	/^#define __PKILL_H__$/;"	d
__anon102589590111	char_utils_combat.cpp	/^namespace {$/;"	n	namespace:utils	file:
__anon102589590211	char_utils_combat.cpp	/^namespace {$/;"	n	namespace:utils	file:
__anon131f9bdc0111	act_info.cc	/^namespace {$/;"	n	file:
__anon20d0bf1d0111	object_utils.cpp	/^namespace {$/;"	n	namespace:utils	file:
__anon286ec0cb0111	fight.cc	/^namespace {$/;"	n	file:
__anon286ec0cb0211	fight.cc	/^namespace {$/;"	n	file:
__anon2a51bc030111	profs.cc	/^namespace {$/;"	n	file:
__anon2a51bc030211	profs.cc	/^namespace {$/;"	n	file:
__anon35b427860111	combat_manager.cpp	/^namespace {$/;"	n	namespace:game_rules	file:
__anon63d8ba7e0111	clerics.cc	/^namespace {$/;"	n	file:
__anon85c32d440111	char_utils.cpp	/^namespace {$/;"	n	namespace:utils	file:
__anon85c5388a0108	act_wiz.cc	/^{$/;"	s	file:
__anon89a785540111	spec_pro.cc	/^namespace {$/;"	n	file:
__anon98d986090111	spell_pa.cc	/^namespace {$/;"	n	file:
__anonb27b44b20108	pkill.c	/^typedef struct {$/;"	s	file:
__anonb27b44b70108	pkill.h	/^typedef struct {$/;"	s
__anonb27b44b70208	pkill.h	/^typedef struct {$/;"	s
__anonb37368f3010a	structs.h	/^    union {$/;"	u	struct:target_data
__anonb37368f3020a	structs.h	/^    union {$/;"	u	struct:char_special_data
__anonb37368f3030a	structs.h	/^    union {$/;"	u	struct:char_special_data
__anonb37368f3040a	structs.h	/^    union {$/;"	u	struct:universal_list
__anonc55e5b280111	weapon_master_handler.cpp	/^namespace {$/;"	n	namespace:player_spec	file:
__anonef1ab1600111	act_othe.cc	/^namespace {$/;"	n	file:
__anonef1ab1600208	act_othe.cc	/^struct {$/;"	s	file:
__delete_rank	pkill.c	/^void __delete_rank(RANKING* rnk, int r, bool totalrank)$/;"	f	typeref:typename:void
__insert_rank	pkill.c	/^void __insert_rank(RANKING* rnk, int a, long idx, bool totalrank)$/;"	f	typeref:typename:void
__new_leader	pkill.c	/^__new_leader(char* name, int idx, int rank, int fame, int race, int side, int invalid)$/;"	f	typeref:typename:LEADER *
__pkill_extend_tab	pkill.c	/^void __pkill_extend_tab(int n)$/;"	f	typeref:typename:void
__pkill_name	pkill.c	/^char* __pkill_name(int i)$/;"	f	typeref:typename:char *
__pkill_side	pkill.c	/^int __pkill_side(int race)$/;"	f	typeref:typename:int
__shift_rank	pkill.c	/^void __shift_rank(RANKING* rnk, int a, int b, int shift, bool total)$/;"	f	typeref:typename:void
_parse_name	interpre.cc	/^int _parse_name(char* arg, char* name)$/;"	f	typeref:typename:int
_recursive_move	spec_pro.cc	/^void _recursive_move(struct char_data* ch, struct obj_data* hostobj)$/;"	f	typeref:typename:void
_write_one_node	ban.cc	/^void _write_one_node(FILE* fp, struct ban_list_element* node)$/;"	f	typeref:typename:void
a_type	structs.h	/^    int a_type; \/* Attack type				*\/$/;"	m	struct:message_list	typeref:typename:int
abilities	structs.h	/^    struct char_ability_data abilities; \/* Max. Abilities                 *\/$/;"	m	struct:char_data	typeref:struct:char_ability_data
abort_delay	comm.cc	/^void abort_delay(char_data* wait_ch)$/;"	f	typeref:typename:void
abort_delay	wait_functions.cpp	/^void wait_list::abort_delay(char_data* character)$/;"	f	class:game_types::wait_list	typeref:typename:void
abs_number	structs.h	/^    int abs_number; \/* bit number in the control array *\/$/;"	m	struct:char_data	typeref:typename:int
act	comm.cc	/^void act(const char* str, int hide_invisible, struct char_data* ch,$/;"	f	typeref:typename:void
act	protos.h	/^    sh_int act; \/* descriptor for what kind of struct is this *\/$/;"	m	struct:shape_object	typeref:typename:sh_int
act	protos.h	/^    sh_int act; \/* descriptor for what kind of struct is this *\/$/;"	m	struct:shape_proto	typeref:typename:sh_int
act	protos.h	/^    sh_int act; \/* descriptor for what kind of struct is this *\/$/;"	m	struct:shape_room	typeref:typename:sh_int
act	protos.h	/^    sh_int act; \/* descriptor for what kind of struct is this *\/$/;"	m	struct:shape_zone	typeref:typename:sh_int
act	protos.h	/^    sh_int act; \/\/  Type of thing being shaped - must be 1st field in structure$/;"	m	struct:shape_script	typeref:typename:sh_int
act	protos.h	/^    sh_int act;$/;"	m	struct:shape_mudlle	typeref:typename:sh_int
act	structs.h	/^    long act; \/* act flag for NPC's; player flag for PC's *\/$/;"	m	struct:char_special2_data	typeref:typename:long
act_buffer	comm.cc	/^char act_buffer[MAX_STRING_LENGTH];$/;"	v	typeref:typename:char[]
act_comm.o	Makefile	/^act_comm.o : act_comm.cc structs.h utils.h comm.h interpre.h handler.h \\$/;"	t
act_info.o	Makefile	/^act_info.o : act_info.cc structs.h utils.h comm.h interpre.h \\$/;"	t
act_move.o	Makefile	/^act_move.o : act_move.cc structs.h utils.h comm.h interpre.h \\$/;"	t
act_obj1.o	Makefile	/^act_obj1.o : act_obj1.cc structs.h utils.h comm.h interpre.h handler.h \\$/;"	t
act_obj2.o	Makefile	/^act_obj2.o : act_obj2.cc structs.h utils.h comm.h interpre.h handler.h \\$/;"	t
act_offe.o	Makefile	/^act_offe.o : act_offe.cc structs.h utils.h comm.h interpre.h \\$/;"	t
act_othe.o	Makefile	/^act_othe.o : act_othe.cc structs.h utils.h comm.h interpre.h handler.h \\$/;"	t
act_soci.o	Makefile	/^act_soci.o : act_soci.cc structs.h utils.h comm.h interpre.h \\$/;"	t
act_wiz.o	Makefile	/^act_wiz.o : act_wiz.cc structs.h utils.h comm.h interpre.h \\$/;"	t
action_arg	act_soci.cc	/^char action_arg[MAX_INPUT_LENGTH];$/;"	v	typeref:typename:char[]
action_bits	consts.cc	/^char* action_bits[] = {$/;"	v	typeref:typename:char * []
action_description	structs.h	/^    char* action_description; \/* What to write when used          *\/$/;"	m	struct:obj_data	typeref:typename:char *
activate_char_special	interpre.cc	/^int activate_char_special(char_data* character, char_data* victim, int cmd, char* argument,$/;"	f	typeref:typename:int
activate_obj_special	interpre.cc	/^int activate_obj_special(struct obj_data* host, struct char_data* ch, int cmd,$/;"	f	typeref:typename:int
add_blocked_damage	structs.h	/^    void add_blocked_damage(int damage) { blocked_damage += damage; }$/;"	f	struct:defender_data	typeref:typename:void
add_char_to_waitlist	wait_functions.cpp	/^    void add_char_to_waitlist(char_data* character, char_data* waiting_list)$/;"	f	namespace:game_types::CODE_SAVER	typeref:typename:void
add_character_to_group	act_othe.cc	/^void add_character_to_group(char_data* character, char_data* group_leader)$/;"	f	typeref:typename:void
add_crime	db.cc	/^void add_crime(int criminal, int victim, int witness, int crime, int wit_type)$/;"	f	typeref:typename:void
add_damage	structs.h	/^    void add_damage(int damage)$/;"	f	class:damage_details	typeref:typename:void
add_damage	structs.h	/^    void add_damage(int skill_id, int damage) { damage_map[skill_id].add_damage(damage); }$/;"	f	class:player_damage_details	typeref:typename:void
add_damage	structs.h	/^    void add_damage(struct char_data* character, int damage) { damage_map[character].add_damage(/;"	f	class:group_damaga_data	typeref:typename:void
add_exploit_record	db.cc	/^void add_exploit_record(int recordtype, char_data* victim, int iIntParam, char* chParam)$/;"	f	typeref:typename:void
add_follower	handler.cc	/^void add_follower(char_data* follower, char_data* leader, int mode)$/;"	f	typeref:typename:void
add_global_cooldown	skill_timer.cpp	/^void skill_timer::add_global_cooldown(int ch_id)$/;"	f	class:game_timer::skill_timer	typeref:typename:void
add_heavy_fighting_damage	structs.h	/^    void add_heavy_fighting_damage(int damage) { heavy_fighting_damage += damage; }$/;"	f	struct:heavy_fighting_data	typeref:typename:void
add_item_to_list	act_info.cc	/^    void add_item_to_list(obj_data* object)$/;"	f	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:void	file:
add_light_fighting_proc	structs.h	/^    void add_light_fighting_proc() { ++light_fighting_extra_hits; }$/;"	f	struct:light_fighting_data	typeref:typename:void
add_member	char_utils.cpp	/^void group_data::add_member(char_data* member)$/;"	f	class:group_data	typeref:typename:void
add_move_report	act_info.cc	/^void add_move_report(int real_move, char* bf)$/;"	f	typeref:typename:void
add_prompt	act_info.cc	/^void add_prompt(char* prompt, struct char_data* ch, long flag)$/;"	f	typeref:typename:void
add_rush_damage	structs.h	/^    void add_rush_damage(int damage) { rush_forward_damage += damage; }$/;"	f	struct:wild_fighting_data	typeref:typename:void
add_skill_timer	skill_timer.cpp	/^void skill_timer::add_skill_timer(const char_data& ch, const int skill_id, const int counter)$/;"	f	class:game_timer::skill_timer	typeref:typename:void
add_spirits	char_utils.cpp	/^void add_spirits(char_data* character, int spirits)$/;"	f	namespace:utils	typeref:typename:void
add_target	interpre.h	/^    void add_target(int mask_in, int value)$/;"	f	struct:command_info	typeref:typename:void
adjust_regen_for_level	limits.cc	/^double adjust_regen_for_level(int character_level, double regen_amount)$/;"	f	typeref:typename:double
advance_level	profs.cc	/^void advance_level(char_data* character)$/;"	f	typeref:typename:void
advance_level_prof	profs.cc	/^void advance_level_prof(int prof, char_data* character)$/;"	f	typeref:typename:void
advance_mini_level	limits.cc	/^inline void advance_mini_level(struct char_data* ch)$/;"	f	typeref:typename:void
advance_perm	act_wiz.cc	/^int advance_perm(struct char_data* ch, struct char_data* vict, int level)$/;"	f	typeref:typename:int
affect_from_char	handler.cc	/^void affect_from_char(struct char_data* ch, byte skill)$/;"	f	typeref:typename:void
affect_from_char_notify	handler.cc	/^void affect_from_char_notify(struct char_data* ch, byte skill)$/;"	f	typeref:typename:void
affect_join	handler.cc	/^void affect_join(struct char_data* ch, struct affected_type* af,$/;"	f	typeref:typename:void
affect_modify	handler.cc	/^void affect_modify(struct char_data* ch, byte loc, int mod, long bitv, char add, sh_int counter)$/;"	f	typeref:typename:void
affect_modify_room	handler.cc	/^void affect_modify_room(struct room_data* room, byte loc, int mod,$/;"	f	typeref:typename:void
affect_naked	handler.cc	/^void affect_naked(char_data* ch)$/;"	f	typeref:typename:void
affect_remove	handler.cc	/^void affect_remove(struct char_data* ch, struct affected_type* af)$/;"	f	typeref:typename:void
affect_remove_notify	handler.cc	/^void affect_remove_notify(struct char_data* ch, struct affected_type* af)$/;"	f	typeref:typename:void
affect_remove_room	handler.cc	/^void affect_remove_room(struct room_data* room, struct affected_type* af)$/;"	f	typeref:typename:void
affect_to_char	handler.cc	/^void affect_to_char(struct char_data* ch, struct affected_type* af)$/;"	f	typeref:typename:void
affect_to_room	handler.cc	/^void affect_to_room(struct room_data* room, struct affected_type* af)$/;"	f	typeref:typename:void
affect_total	handler.cc	/^void affect_total(struct char_data* ch, int mode)$/;"	f	typeref:typename:void
affect_total_room	handler.cc	/^void affect_total_room(struct room_data* room, int mode)$/;"	f	typeref:typename:void
affect_update	limits.cc	/^void affect_update()$/;"	f	typeref:typename:void
affect_update	magic.cpp	/^void affect_update(void)$/;"	f	typeref:typename:void
affect_update_person	limits.cc	/^void affect_update_person(struct char_data* i, int mode)$/;"	f	typeref:typename:void
affect_update_room	limits.cc	/^void affect_update_room(struct room_data* room)$/;"	f	typeref:typename:void
affected	structs.h	/^    struct affected_type affected[MAX_AFFECT];$/;"	m	struct:char_file_u	typeref:struct:affected_type[]
affected	structs.h	/^    struct affected_type* affected; \/* affected by what spells       *\/$/;"	m	struct:char_data	typeref:struct:affected_type *
affected	structs.h	/^    struct affected_type* affected; \/* room affects *\/$/;"	m	struct:room_data	typeref:struct:affected_type *
affected	structs.h	/^    struct obj_affected_type affected[MAX_OBJ_AFFECT]; \/* Which abilities in PC to change  *\/$/;"	m	struct:obj_data	typeref:struct:obj_affected_type[]
affected	structs.h	/^    struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem	typeref:struct:obj_affected_type[]
affected_bits	consts.cc	/^char* affected_bits[] = {$/;"	v	typeref:typename:char * []
affected_by	structs.h	/^    long affected_by; \/* Bitvector for spells\/skills affected by *\/$/;"	m	struct:char_special_data	typeref:typename:long
affected_by_spell	handler.cc	/^affected_type* affected_by_spell(const char_data* ch, byte skill, affected_type* start_affect)$/;"	f	typeref:typename:affected_type *
affected_list	handler.cc	/^universal_list* affected_list = 0;$/;"	v	typeref:typename:universal_list *
affected_list_pool	handler.cc	/^universal_list* affected_list_pool = 0;$/;"	v	typeref:typename:universal_list *
affected_type	structs.h	/^struct affected_type {$/;"	s
affected_type_counter	handler.cc	/^int affected_type_counter = 0;$/;"	v	typeref:typename:int
affected_type_pool	handler.cc	/^affected_type* affected_type_pool = 0;$/;"	v	typeref:typename:affected_type *
affection_source	structs.h	/^struct affection_source {$/;"	s
age	utility.cc	/^struct time_info_data age(struct char_data* ch)$/;"	f	typeref:struct:time_info_data
age	zone.h	/^    int age; \/* current age of this zone (minutes) *\/$/;"	m	struct:zone_data	typeref:typename:int
age_bleed_tracks	weather.cc	/^void age_bleed_tracks()$/;"	f	typeref:typename:void
age_room_tracks	weather.cc	/^void age_room_tracks()$/;"	f	typeref:typename:void
ageland	CMakeLists.txt	/^add_executable(ageland$/;"	t
ageland	Makefile	/^ageland:        ..\/bin\/ageland$/;"	t
alias	structs.h	/^    struct alias_list* alias; \/* aliases, 0 for mobs *\/$/;"	m	struct:char_special_data	typeref:struct:alias_list *
alias_list	structs.h	/^struct alias_list {$/;"	s
alignment	structs.h	/^    int alignment; \/* +-1000 for alignments          *\/$/;"	m	struct:char_special2_data	typeref:typename:int
alignment	structs.h	/^    int alignment; \/*changed*\/$/;"	m	struct:room_data	typeref:typename:int
all	Makefile	/^all:	ageland$/;"	t
ambush_calculate_damage	ranger.cc	/^int ambush_calculate_damage(char_data* attacker, char_data* victim, int modifier)$/;"	f	typeref:typename:int
ambush_calculate_success	ranger.cc	/^int ambush_calculate_success(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:int
ambush_get_valid_victim	ranger.cc	/^ambush_get_valid_victim(struct char_data* ch, struct waiting_type* target)$/;"	f	typeref:struct:char_data *
another_hour	weather.cc	/^void another_hour(int mode)$/;"	f	typeref:typename:void
appear	fight.cc	/^void appear(struct char_data* ch)$/;"	f	typeref:typename:void
append_lines	comm.cc	/^void append_lines(char* target, char* source, int* len)$/;"	f	typeref:typename:void
append_object	shapeobj.cc	/^int append_object(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
append_proto	shapemob.cc	/^int append_proto(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
append_room	shaperom.cc	/^int append_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
append_score_message	weapon_master_handler.cpp	/^int weapon_master_handler::append_score_message(char* message_buffer) const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:int
append_script	shapescript.cc	/^int append_script(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
apply_armor_reduction	combat_manager.cpp	/^double combat_manager::apply_armor_reduction(char_data* attacker, char_data* victim, double dama/;"	f	class:game_rules::combat_manager	typeref:typename:double
apply_armor_to_arrow_damage	ranger.cc	/^int apply_armor_to_arrow_damage(char_data& archer, char_data& victim, int damage, int location)$/;"	f	typeref:typename:int
apply_chilled_effect	mage.cc	/^void apply_chilled_effect(char_data* caster, char_data* victim)$/;"	f	typeref:typename:void
apply_cleave_damage	olog_hai.cpp	/^void apply_cleave_damage(char_data* attacker, char_data* victim)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_damage	combat_manager.cpp	/^bool combat_manager::apply_damage(char_data* attacker, char_data* victim, double damage, int att/;"	f	class:game_rules::combat_manager	typeref:typename:bool
apply_defensive_sun_modifier	char_utils_combat.cpp	/^    double apply_defensive_sun_modifier(const char_data& character, double dodge_modifier)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
apply_dodge_tactics_modifier	char_utils_combat.cpp	/^    double apply_dodge_tactics_modifier(const char_data& character, double dodge_modifier)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
apply_frenzy_affect	olog_hai.cpp	/^void apply_frenzy_affect(char_data* character)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_gear_affects	handler.cc	/^void apply_gear_affects(char_data* character, const obj_data* item, int modify_flag)$/;"	f	typeref:typename:void
apply_gear_affects	handler.cc	/^void apply_gear_affects(char_data* character, int modify_flag)$/;"	f	typeref:typename:void
apply_maul_char	act_offe.cc	/^void apply_maul_char(char_data* ch)$/;"	f	typeref:typename:void
apply_maul_victim	act_offe.cc	/^void apply_maul_victim(char_data* victim, char_data* ch)$/;"	f	typeref:typename:void
apply_options	act_othe.cc	/^} apply_options[] = {$/;"	v	typeref:struct:__anonef1ab1600208[]
apply_overrun_damage	olog_hai.cpp	/^void apply_overrun_damage(char_data* attacker, char_data* victim)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_owner_to_object_level	object_utils.cpp	/^    double apply_owner_to_object_level(const char_data& owner, double object_level, int skill_ty/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
apply_parry_tactics_modifier	char_utils_combat.cpp	/^    double apply_parry_tactics_modifier(int character_tactics, double parry_bonus, int& tactics_/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
apply_smash_damage	olog_hai.cpp	/^void apply_smash_damage(char_data* attacker, char_data* victim, int prob)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_spell_damage	mage.cc	/^int apply_spell_damage(char_data* caster, char_data* victim, int damage_dealt, int spell_number,/;"	f	typeref:typename:int
apply_spell_damage	magic.cpp	/^int apply_spell_damage(char_data* caster, char_data* victim, int damage_dealt, int spell_number,/;"	f	typeref:typename:int
apply_stomp_affect	olog_hai.cpp	/^void apply_stomp_affect(char_data* attacker, char_data* victim)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_types	consts.cc	/^char* apply_types[] = {$/;"	v	typeref:typename:char * []
apply_victim_delay	olog_hai.cpp	/^void apply_victim_delay(char_data* victim, int delay)$/;"	f	namespace:olog_hai	typeref:typename:void
apply_weapon_damage	combat_manager.cpp	/^void combat_manager::apply_weapon_damage(char_data* attacker, char_data* victim, double damage)$/;"	f	class:game_rules::combat_manager	typeref:typename:void
approve_msg	boards.cc	/^int board_info_type::approve_msg(char_data* ch, board_msginfo* msg, int cur_num, int* num)$/;"	f	class:board_info_type	typeref:typename:int
approve_msg	boards.cc	/^int mail_info_type::approve_msg(char_data* ch, board_msginfo* msg, int cur_num, int* num)$/;"	f	class:mail_info_type	typeref:typename:int
arcane_spec_data	structs.h	/^struct arcane_spec_data : public elemental_spec_data {$/;"	s
arg	db.cc	/^char arg[MAX_STRING_LENGTH];$/;"	v	typeref:typename:char[]
arg1	db.h	/^    int arg1;$/;"	m	struct:reset_com	typeref:typename:int
arg2	db.h	/^    int arg2; \/* Arguments to the command *\/$/;"	m	struct:reset_com	typeref:typename:int
arg3	db.h	/^    int arg3;$/;"	m	struct:reset_com	typeref:typename:int
arg4	db.h	/^    int arg4;$/;"	m	struct:reset_com	typeref:typename:int
arg5	db.h	/^    int arg5;$/;"	m	struct:reset_com	typeref:typename:int
arg6	db.h	/^    int arg6;$/;"	m	struct:reset_com	typeref:typename:int
arg7	db.h	/^    int arg7;$/;"	m	struct:reset_com	typeref:typename:int
argument_interpreter	interpre.cc	/^void argument_interpreter(char* argument, char* first_arg, char* second_arg)$/;"	f	typeref:typename:void
argument_split_2	act_info.cc	/^void argument_split_2(char* argument, char* first_arg, char* second_arg)$/;"	f	typeref:typename:void
armor_absorb	utility.cc	/^int armor_absorb(struct obj_data* obj)$/;"	f	typeref:typename:int
armor_effect	fight.cc	/^int armor_effect(struct char_data* ch, struct char_data* victim,$/;"	f	typeref:typename:int
armor_keywords	obj2html.cc	/^char* armor_keywords[][2] = {$/;"	v	typeref:typename:char * [][2]
armor_location	structs.h	/^    ubyte armor_location[MAX_BODYPARTS];$/;"	m	struct:race_bodypart_data	typeref:typename:ubyte[]
armor_subtypes	obj2html.cc	/^struct obj2html_type armor_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
armor_typemask	obj2html.cc	/^armor_typemask(struct obj_data* o)$/;"	f	typeref:typename:unsigned long
arrive_to_inside	interpre.h	/^    char arrive_to_inside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
arrive_to_outside	interpre.h	/^    char arrive_to_outside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
asima_tbl	db.cc	/^char* asima_tbl = 0; \/* ASIMA help			*\/$/;"	v	typeref:typename:char *
assign_char_param	script.cc	/^void assign_char_param(int param, info_script* info, char_data* ch)$/;"	f	typeref:typename:void
assign_command_pointers	interpre.cc	/^void assign_command_pointers(void)$/;"	f	typeref:typename:void
assign_mobiles	spec_ass.cc	/^void assign_mobiles(void)$/;"	f	typeref:typename:void
assign_obj_param	script.cc	/^void assign_obj_param(int param, info_script* info, obj_data* obj)$/;"	f	typeref:typename:void
assign_objects	spec_ass.cc	/^void assign_objects(void)$/;"	f	typeref:typename:void
assign_pk_bonuses	limits.cc	/^void assign_pk_bonuses(struct char_data* ch, int coeff, int tier, bool mode)$/;"	f	typeref:typename:void
assign_pk_mage_bonus	limits.cc	/^void assign_pk_mage_bonus(struct char_data* ch, int tier, bool mode)$/;"	f	typeref:typename:void
assign_pk_mystic_bonus	limits.cc	/^void assign_pk_mystic_bonus(struct char_data* ch, int tier, bool mode)$/;"	f	typeref:typename:void
assign_pk_ranger_bonus	limits.cc	/^void assign_pk_ranger_bonus(struct char_data* ch, int tier, bool mode)$/;"	f	typeref:typename:void
assign_pk_warrior_bonus	limits.cc	/^void assign_pk_warrior_bonus(struct char_data* ch, int tier, bool mode)$/;"	f	typeref:typename:void
assign_rooms	spec_ass.cc	/^void assign_rooms(void)$/;"	f	typeref:typename:void
assign_stats	profs.cc	/^    void assign_stats(int sum_min, int sum_max, int num_tries)$/;"	f	struct:_INTERNAL::stat_assigner	typeref:typename:void	file:
assign_the_shopkeepers	shop.cc	/^void assign_the_shopkeepers(void)$/;"	f	typeref:typename:void
at	structs.h	/^    struct char_data* at(size_t index) { return members.at(index); }$/;"	f	class:group_data	typeref:struct:char_data *
attack_hit_text	fight.cc	/^struct attack_hit_type attack_hit_text[] = {$/;"	v	typeref:struct:attack_hit_type[]
attack_hit_type	spells.h	/^struct attack_hit_type {$/;"	s
attack_type	structs.h	/^    int attack_type; \/* The Attack Type Bitvector for NPC's     *\/$/;"	m	struct:char_special_data	typeref:typename:int
attacked_level	structs.h	/^    int attacked_level; \/* the highest level of the attackers, NPC only *\/$/;"	m	struct:char_special_data	typeref:typename:int
attacker_msg	structs.h	/^    char* attacker_msg; \/* message to attacker *\/$/;"	m	struct:msg_type	typeref:typename:char *
autosave_time	config.cc	/^int autosave_time = 4;$/;"	v	typeref:typename:int
avail_descs	comm.cc	/^int avail_descs; \/* max descriptors available *\/$/;"	v	typeref:typename:int
average_mob_life	config.cc	/^int average_mob_life = 40;$/;"	v	typeref:typename:int
axe_subtypes	obj2html.cc	/^struct obj2html_type axe_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
background	db.cc	/^char* background = 0; \/* background story		*\/$/;"	v	typeref:typename:char *
bad_pws	structs.h	/^    int bad_pws; \/* number of bad password attemps	*\/$/;"	m	struct:char_special2_data	typeref:typename:int
bad_pws	structs.h	/^    int bad_pws; \/* number of bad pw attemps this login	*\/$/;"	m	struct:descriptor_data	typeref:typename:int
badcrash	signals.cc	/^void badcrash(int fake)$/;"	f	typeref:typename:void
ban.o	Makefile	/^ban.o : ban.cc structs.h utils.h comm.h interpre.h handler.h db.h$/;"	t
ban_list	ban.cc	/^struct ban_list_element* ban_list = 0;$/;"	v	typeref:struct:ban_list_element *
ban_list_element	db.h	/^struct ban_list_element {$/;"	s
ban_types	consts.cc	/^char* ban_types[] = {$/;"	v	typeref:typename:char * []
bankAccount	shop.cc	/^    int bankAccount; \/* Store all gold over 15000    *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
base_chance	warrior_spec_handlers.h	/^    const float base_chance = 0.25;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:const float
basenum	protos.h	/^    int basenum; \/* number of object in database, or -1  *\/$/;"	m	struct:shape_object	typeref:typename:int
battle_mage_handler	battle_mage_handler.cpp	/^battle_mage_handler::battle_mage_handler(const char_data* in_character)$/;"	f	class:player_spec::battle_mage_handler
battle_mage_handler	warrior_spec_handlers.h	/^class battle_mage_handler {$/;"	c	namespace:player_spec
battle_mage_handler.o	Makefile	/^battle_mage_handler.o : battle_mage_handler.cpp warrior_spec_handlers.h structs.h$/;"	t
battle_mage_spec_data	structs.h	/^struct battle_mage_spec_data : public specialization_info {$/;"	s
beats	spells.h	/^    byte beats; \/* Heartbeats until ready for next *\/$/;"	m	struct:skill_data	typeref:typename:byte
begin	structs.h	/^    char_iter begin() { return members.begin(); }$/;"	f	class:group_data	typeref:typename:char_iter
begin	structs.h	/^    const_char_iter begin() const { return members.begin(); }$/;"	f	class:group_data	typeref:typename:const_char_iter
beginning_of_time	db.cc	/^long beginning_of_time = 650336715;$/;"	v	typeref:typename:long
beorning_item_restriction	act_obj2.cc	/^bool beorning_item_restriction(char_data* character, obj_data* item)$/;"	f	typeref:typename:bool
beornwhere	consts.cc	/^char* beornwhere[] = {$/;"	v	typeref:typename:char * []
bfs_clear_queue	graph.cc	/^void bfs_clear_queue(void)$/;"	f	typeref:typename:void
bfs_dequeue	graph.cc	/^void bfs_dequeue(void)$/;"	f	typeref:typename:void
bfs_dir	structs.h	/^    byte bfs_dir;$/;"	m	struct:room_data	typeref:typename:byte
bfs_enqueue	graph.cc	/^void bfs_enqueue(room_data* room, char dir)$/;"	f	typeref:typename:void
bfs_next	structs.h	/^    room_data* bfs_next; \/*instead ot bfs_queue structure, for hunting*\/$/;"	m	struct:room_data	typeref:typename:room_data *
bfs_queue_struct	graph.cc	/^struct bfs_queue_struct {$/;"	s	file:
big_brother	big_brother.h	/^    big_brother(const weather_data* weather, const room_data* world)$/;"	f	class:game_rules::big_brother
big_brother	big_brother.h	/^class big_brother : public world_singleton<big_brother> {$/;"	c	namespace:game_rules
big_brother.o	Makefile	/^big_brother.o : big_brother.cpp big_brother.h base_utils.h singleton.h$/;"	t
birth	structs.h	/^    time_t birth; \/* This represents the characters age                *\/$/;"	m	struct:time_data	typeref:typename:time_t
birth	structs.h	/^    time_t birth; \/* Time of birth of character     *\/$/;"	m	struct:char_file_u	typeref:typename:time_t
bitvector	structs.h	/^    long bitvector; \/* Tells which bits to set (AFF_XXX)       *\/$/;"	m	struct:affected_type	typeref:typename:long
bitvector	structs.h	/^    long bitvector; \/* To set chars bits                *\/$/;"	m	struct:obj_flag_data	typeref:typename:long
bitvector	structs.h	/^    long bitvector;$/;"	m	struct:obj_file_elem	typeref:typename:long
bleed_track	structs.h	/^    struct room_bleed_data bleed_track[NUM_OF_BLOOD_TRAILS];$/;"	m	struct:room_data	typeref:struct:room_bleed_data[]
block_type	mail.h	/^    long block_type; \/* -1 if header block, -2 if last data block$/;"	m	struct:data_block_type_d	typeref:typename:long
block_type	mail.h	/^    long block_type; \/* is this a header block or data block? *\/$/;"	m	struct:header_block_type_d	typeref:typename:long
blocked_damage	structs.h	/^    unsigned int blocked_damage;$/;"	m	struct:defender_data	typeref:typename:unsigned int
bludgeon_proc_chance	weapon_master_handler.cpp	/^    constexpr const float bludgeon_proc_chance = 0.25f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
board_info	boards.cc	/^struct board_info_type* board_info[NUM_OF_BOARDS];$/;"	v	typeref:struct:board_info_type * []
board_info_type	boards.cc	/^board_info_type::board_info_type()$/;"	f	class:board_info_type
board_info_type	boards.cc	/^board_info_type::board_info_type(int objnum, int l_read, int l_write, int l_rem,$/;"	f	class:board_info_type
board_info_type	boards.h	/^struct board_info_type {$/;"	s
board_msginfo	boards.h	/^struct board_msginfo {$/;"	s
board_point	structs.h	/^    int board_point[MAX_MAXBOARD]; \/* pointers on the current messages *\/$/;"	m	struct:char_special_data	typeref:typename:int[]
boards.o	Makefile	/^boards.o : boards.cc structs.h utils.h comm.h db.h boards.h interpre.h \\$/;"	t
bodypart_hit	structs.h	/^    ubyte bodypart_hit[MAX_BODYPARTS]; \/* hit points of individual body parts *\/$/;"	m	struct:char_point_data	typeref:typename:ubyte[]
bodyparts	consts.cc	/^struct race_bodypart_data bodyparts[MAX_BODYTYPES] = {$/;"	v	typeref:struct:race_bodypart_data[]
bodyparts	structs.h	/^    sh_int bodyparts;$/;"	m	struct:race_bodypart_data	typeref:typename:sh_int
bodytype	structs.h	/^    byte bodytype; \/* PC \/ NPC hit locations                *\/$/;"	m	struct:char_player_data	typeref:typename:byte
bodytype	structs.h	/^    byte bodytype;$/;"	m	struct:char_file_u	typeref:typename:byte
boot_crimes	db.cc	/^void boot_crimes()$/;"	f	typeref:typename:void
boot_db	db.cc	/^void boot_db(void)$/;"	f	typeref:typename:void
boot_ferries	spec_pro.cc	/^void boot_ferries()$/;"	f	typeref:typename:void
boot_mode	db.cc	/^int boot_mode = 0; \/* local var, to let know that reboot goes on *\/$/;"	v	typeref:typename:int
boot_mudlle	db.cc	/^void boot_mudlle()$/;"	f	typeref:typename:void
boot_pkills	pkill.c	/^void boot_pkills()$/;"	f	typeref:typename:void
boot_social_messages	act_soci.cc	/^void boot_social_messages(void)$/;"	f	typeref:typename:void
boot_the_shops	shop.cc	/^void boot_the_shops(FILE* shop_f, char* filename)$/;"	f	typeref:typename:void
boot_time	db.cc	/^long boot_time = 0; \/* time of mud boot		*\/$/;"	v	typeref:typename:long
break_spell	comm.cc	/^void break_spell(struct char_data* ch)$/;"	f	typeref:typename:void
buf	db.cc	/^char buf[MAX_STRING_LENGTH];$/;"	v	typeref:typename:char[]
buf	structs.h	/^    char buf[MAX_STRING_LENGTH]; \/* buffer for raw input			*\/$/;"	m	struct:descriptor_data	typeref:typename:char[]
buf1	db.cc	/^char buf1[MAX_STRING_LENGTH];$/;"	v	typeref:typename:char[]
buf2	db.cc	/^char buf2[MAX_STRING_LENGTH];$/;"	v	typeref:typename:char[]
buf_largecount	comm.cc	/^int buf_largecount; \/* # of large buffers which exist *\/$/;"	v	typeref:typename:int
buf_overflows	comm.cc	/^int buf_overflows; \/* # of overflows of output *\/$/;"	v	typeref:typename:int
buf_switches	comm.cc	/^int buf_switches; \/* # of switches from small to large buf *\/$/;"	v	typeref:typename:int
bufpool	comm.cc	/^struct txt_block* bufpool = 0; \/* pool of large output buffers *\/$/;"	v	typeref:struct:txt_block *
bufptr	structs.h	/^    int bufptr; \/* ptr to end of current output		*\/$/;"	m	struct:descriptor_data	typeref:typename:int
bufspace	structs.h	/^    int bufspace; \/* space left in the output buffer	*\/$/;"	m	struct:descriptor_data	typeref:typename:int
build_directory	db.cc	/^void build_directory(char* TheDir)$/;"	f	typeref:typename:void
build_help_index	modify.cc	/^build_help_index(FILE* fl, int* num, struct help_index_element** listpt)$/;"	f	typeref:struct:help_index_element *
build_output	obj2html.cc	/^void build_output(struct obj2html_type* list, struct obj_data* o)$/;"	f	typeref:typename:void
build_player_index	db.cc	/^void build_player_index(void)$/;"	f	typeref:typename:void
butcher_item	structs.h	/^    int butcher_item; \/* virtual item to load when buther corpse, 0 if none*\/$/;"	m	struct:char_special_data	typeref:typename:int
butcher_item	structs.h	/^    sh_int butcher_item; \/* virtual item to butcher, 0 for none, -1 for butchered *\/$/;"	m	struct:obj_flag_data	typeref:typename:sh_int
byte	char_utils.h	/^typedef unsigned char byte;$/;"	t	namespace:utils	typeref:typename:unsigned char
byte	platdef.h	/^typedef unsigned char byte;$/;"	t	typeref:typename:unsigned char
cabin_route	interpre.h	/^    int cabin_route[100]; \/\/ where to put passengers$/;"	m	struct:ferry_captain_type	typeref:typename:int[100]
calc_guardian_hp	mystic.cc	/^int calc_guardian_hp(const int base_hp, const int caster_mystic_level)$/;"	f	typeref:typename:int
calc_load_room	objsave.cc	/^int calc_load_room(struct char_data* ch, int load_result)$/;"	f	typeref:typename:int
calculate_ambush_damage_cap	ranger.cc	/^int calculate_ambush_damage_cap(const char_data* attacker)$/;"	f	typeref:typename:int
calculate_cleave_damage	olog_hai.cpp	/^int calculate_cleave_damage(char_data& attacker, int prob)$/;"	f	namespace:olog_hai	typeref:typename:int
calculate_gold_amount	act_othe.cc	/^int calculate_gold_amount(char* text, char* argument, char_data* character)$/;"	f	typeref:typename:int
calculate_hit_damage	combat_manager.cpp	/^double combat_manager::calculate_hit_damage(const char_data& attacker, bool hit_accurate, double/;"	f	class:game_rules::combat_manager	typeref:typename:double
calculate_overrun_damage	olog_hai.cpp	/^int calculate_overrun_damage(char_data& attacker, int prob)$/;"	f	namespace:olog_hai	typeref:typename:int
calculate_small_map	act_info.cc	/^void calculate_small_map(int x, int y)$/;"	f	typeref:typename:void
calculate_smash_damage	olog_hai.cpp	/^int calculate_smash_damage(char_data& attacker, int prob)$/;"	f	namespace:olog_hai	typeref:typename:int
calculate_stomp_damage	olog_hai.cpp	/^int calculate_stomp_damage(char_data& attacker, int prob)$/;"	f	namespace:olog_hai	typeref:typename:int
calculate_weapon_damage	combat_manager.cpp	/^double combat_manager::calculate_weapon_damage(const char_data& attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:double
call_trigger	script.cc	/^int call_trigger(int trigger_type, void* subject, void* subject2, void* subject3)$/;"	f	typeref:typename:int
can_attack	combat_manager.cpp	/^bool combat_manager::can_attack(char_data* attacker, char_data* victim)$/;"	f	class:game_rules::combat_manager	typeref:typename:bool
can_bear_skill	act_offe.cc	/^bool can_bear_skill(char_data* ch, int skill)$/;"	f	typeref:typename:bool
can_beorning_swipe	fight.cc	/^bool can_beorning_swipe(struct char_data* character)$/;"	f	typeref:typename:bool
can_breathe	utility.cc	/^int can_breathe(struct char_data* ch)$/;"	f	typeref:typename:int
can_carry_object	char_utils.cpp	/^bool can_carry_object(const char_data& character, const obj_data& object)$/;"	f	namespace:utils	typeref:typename:bool
can_cast_spell	spell_pa.cc	/^bool can_cast_spell(char_data& character, int spell_index, const skill_data& spell)$/;"	f	namespace:__anon98d986090111	typeref:typename:bool
can_ch_blind	ranger.cc	/^bool can_ch_blind(char_data* ch, int mana_cost)$/;"	f	typeref:typename:bool
can_ch_mark	ranger.cc	/^bool can_ch_mark(char_data* ch)$/;"	f	typeref:typename:bool
can_ch_shoot	ranger.cc	/^bool can_ch_shoot(char_data* archer)$/;"	f	typeref:typename:bool
can_do_trap	ranger.cc	/^bool can_do_trap(char_data& character, int subcmd)$/;"	f	typeref:typename:bool
can_double_hit	fight.cc	/^bool can_double_hit(const char_data* character)$/;"	f	typeref:typename:bool
can_get_object	char_utils.cpp	/^bool can_get_object(const char_data& character, const obj_data& object, const weather_data& weat/;"	f	namespace:utils	typeref:typename:bool
can_harad_use_skill	ranger.cc	/^bool can_harad_use_skill(char_data* ch, int mana_cost, int move_cost, int skill)$/;"	f	typeref:typename:bool
can_orc_follower_cast_spell	spell_pa.cc	/^bool can_orc_follower_cast_spell(int spell_index)$/;"	f	namespace:__anon98d986090111	typeref:typename:bool
can_prepare_spell	battle_mage_handler.cpp	/^bool battle_mage_handler::can_prepare_spell() const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:bool
can_see	char_utils.cpp	/^bool can_see(const char_data& character, const weather_data& weather, const room_data& room)$/;"	f	namespace:utils	typeref:typename:bool
can_see_object	char_utils.cpp	/^bool can_see_object(const char_data& character, const obj_data& object, const weather_data& weat/;"	f	namespace:utils	typeref:typename:bool
can_sense	utility.cc	/^int can_sense(char_data* sub, char_data* obj)$/;"	f	typeref:typename:int
can_swim	handler.cc	/^int can_swim(struct char_data* ch)$/;"	f	typeref:typename:int
can_take_obj	act_obj1.cc	/^int can_take_obj(char_data* character, obj_data* item)$/;"	f	typeref:typename:int
can_wear	object_utils.cpp	/^bool can_wear(const obj_data& object, int body_part)$/;"	f	namespace:utils	typeref:typename:bool
carried_by	structs.h	/^    struct char_data* carried_by; \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data	typeref:struct:char_data *
carry_items	structs.h	/^    byte carry_items; \/* Number of items carried                 *\/$/;"	m	struct:char_special_data	typeref:typename:byte
carry_weight	structs.h	/^    int carry_weight; \/* Carried weight                          *\/$/;"	m	struct:char_special_data	typeref:typename:int
carrying	structs.h	/^    struct obj_data* carrying; \/* Head of list                  *\/$/;"	m	struct:char_data	typeref:struct:obj_data *
casting	consts.cc	/^char* casting[] = {$/;"	v	typeref:typename:char * []
casting	structs.h	/^    ubyte casting; \/*  casting speed for spell casters*\/$/;"	m	struct:char_special_data	typeref:typename:ubyte
ch	protos.h	/^    char_data* ch[3]; \/\/  Variables$/;"	m	struct:info_script	typeref:typename:char_data * [3]
ch	structs.h	/^        char_data* ch;$/;"	m	union:universal_list::__anonb37368f3040a	typeref:typename:char_data *
ch	structs.h	/^        struct char_data* ch;$/;"	m	union:target_data::__anonb37368f3010a	typeref:struct:char_data *
chVictimName	db.h	/^    char chVictimName[30]; \/* in case char has been deleted *\/$/;"	m	struct:exploit_record	typeref:typename:char[30]
ch_file	db.h	/^    char ch_file[80]; \/* for speed in locating the file to load *\/$/;"	m	struct:player_index_element	typeref:typename:char[80]
ch_get_confuse_modifier	char_utils.cpp	/^    int ch_get_confuse_modifier(const char_data& character)$/;"	f	namespace:utils::TEMPORARY	typeref:typename:int
ch_num	structs.h	/^    sh_int ch_num; \/* abs_number, if the target is a character, or just some$/;"	m	struct:target_data	typeref:typename:sh_int
change	structs.h	/^    int change; \/* How fast and in what way does it change? *\/$/;"	m	struct:weather_data	typeref:typename:int
change_alignment	fight.cc	/^void change_alignment(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
change_arrow_target	ranger.cc	/^void change_arrow_target(char_data* archer, char_data* victim, obj_data* arrow)$/;"	f	typeref:typename:void
change_comm	act_othe.cc	/^char* change_comm[] = {$/;"	v	typeref:typename:char * []
channels	act_comm.cc	/^int channels[] = {$/;"	v	typeref:typename:int[]
char_ability_data	structs.h	/^struct char_ability_data {$/;"	s
char_auto	db.h	/^    char* char_auto; \/* The victim turned out to be the character *\/$/;"	m	struct:social_messg	typeref:typename:char *
char_control_array	handler.cc	/^char char_control_array[MAX_CHARACTERS \/ 8 + 1];$/;"	v	typeref:typename:char[]
char_data	structs.h	/^struct char_data {$/;"	s
char_exists	handler.cc	/^int char_exists(int num)$/;"	f	typeref:typename:int
char_file_u	structs.h	/^struct char_file_u {$/;"	s
char_found	db.h	/^    char* char_found; \/* if NULL, read no further, ignore args *\/$/;"	m	struct:social_messg	typeref:typename:char *
char_from_room	handler.cc	/^void char_from_room(struct char_data* ch)$/;"	f	typeref:typename:void
char_has_script	script.cc	/^script_data* char_has_script(int* return_index, int script_no, int script_type)$/;"	f	typeref:typename:script_data *
char_iter	big_brother.cpp	/^            typedef character_id_set::iterator char_iter;$/;"	t	function:game_rules::big_brother::on_loot_item	typeref:typename:character_id_set::iterator	file:
char_iter	structs.h	/^typedef char_vector::iterator char_iter;$/;"	t	typeref:typename:char_vector::iterator
char_no_arg	db.h	/^    char* char_no_arg; \/* No argument was supplied *\/$/;"	m	struct:social_messg	typeref:typename:char *
char_number	structs.h	/^    sh_int char_number; \/\/ race number for players, virt_number for mobs$/;"	m	struct:room_track_data	typeref:typename:sh_int
char_number	structs.h	/^    sh_int char_number;$/;"	m	struct:room_bleed_data	typeref:typename:sh_int
char_perception_check	spell_pa.cc	/^char char_perception_check(struct char_data* ch)$/;"	f	typeref:typename:char
char_player_data	structs.h	/^struct char_player_data {$/;"	s
char_point_data	structs.h	/^struct char_point_data {$/;"	s
char_power	handler.cc	/^int char_power(int lev)$/;"	f	typeref:typename:int
char_prof_data	structs.h	/^struct char_prof_data {$/;"	s
char_set	structs.h	/^typedef std::set<struct char_data*> char_set;$/;"	t	typeref:typename:std::set<struct char_data * >
char_set_iter	structs.h	/^typedef char_set::iterator char_set_iter;$/;"	t	typeref:typename:char_set::iterator
char_special2_data	structs.h	/^struct char_special2_data {$/;"	s
char_special_data	structs.h	/^struct char_special_data {$/;"	s
char_to_room	handler.cc	/^void char_to_room(struct char_data* ch, int room)$/;"	f	typeref:typename:void
char_to_store	db.cc	/^void char_to_store(struct char_data* ch, struct char_file_u* st)$/;"	f	typeref:typename:void
char_utils.o	Makefile	/^char_utils.o : char_utils.cpp base_utils.h char_utils.h object_utils.h \\$/;"	t
char_utils_combat.o	Makefile	/^char_utils_combat.o : char_utils_combat.cpp structs.h base_utils.h char_utils.h object_utils.h  /;"	t
char_vector	structs.h	/^typedef std::vector<struct char_data*> char_vector;$/;"	t	typeref:typename:std::vector<struct char_data * >
character	structs.h	/^    struct char_data* character; \/* linked to char			*\/$/;"	m	struct:descriptor_data	typeref:struct:char_data *
character	warrior_spec_handlers.h	/^    char_data* character = nullptr;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:char_data *
character	warrior_spec_handlers.h	/^    char_data* character = nullptr;$/;"	m	class:player_spec::weapon_master_handler	typeref:typename:char_data *
character	warrior_spec_handlers.h	/^    char_data* character = nullptr;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:char_data *
character_id_set	big_brother.h	/^    typedef std::set<int> character_id_set;$/;"	t	class:game_rules::big_brother	typeref:typename:std::set<int>
character_list	db.cc	/^struct char_data* character_list = 0; \/* global linked list of chars	*\/$/;"	v	typeref:struct:char_data *
character_set	big_brother.h	/^    typedef std::set<const char_data*> character_set;$/;"	t	class:game_rules::big_brother	typeref:typename:std::set<const char_data * >
chc_get_confuse_modifier	char_utils_combat.cpp	/^    int chc_get_confuse_modifier(const char_data& character)$/;"	f	namespace:utils::TEMPORARY	typeref:typename:int
check_archery_accuracy	ranger.cc	/^bool check_archery_accuracy(const char_data& archer, const char_data& victim)$/;"	f	typeref:typename:bool
check_autowiz	limits.cc	/^void check_autowiz(struct char_data* ch)$/;"	f	typeref:typename:void
check_break_key	act_move.cc	/^void check_break_key(struct obj_data* obj, struct char_data* ch)$/;"	f	typeref:typename:void
check_break_prep	spell_pa.cc	/^void check_break_prep(struct char_data* ch)$/;"	f	typeref:typename:void
check_breathing	limits.cc	/^void check_breathing(char_data* ch)$/;"	f	typeref:typename:void
check_container_proto	utility.cc	/^static void check_container_proto(struct obj_data* obj, struct char_data* ch)$/;"	f	typeref:typename:void	file:
check_death_ward	fight.cc	/^int check_death_ward(struct char_data* ch)$/;"	f	typeref:typename:int
check_equipment_proto	utility.cc	/^void check_equipment_proto(struct char_data* ch)$/;"	f	typeref:typename:void
check_find_weakness	fight.cc	/^int check_find_weakness(struct char_data* ch, struct char_data* victim, int dam)$/;"	f	typeref:typename:int
check_gather_conditions	ranger.cc	/^int check_gather_conditions(struct char_data* ch, int percent, int gather_type)$/;"	f	typeref:typename:int
check_grip	combat_manager.cpp	/^void combat_manager::check_grip(char_data* character, obj_data* weapon)$/;"	f	class:game_rules::combat_manager	typeref:typename:void
check_grip	fight.cc	/^void check_grip(struct char_data* ch, struct obj_data* wielded)$/;"	f	typeref:typename:void
check_hallucinate	fight.cc	/^int check_hallucinate(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:int
check_idling	limits.cc	/^int check_idling(char_data* character)$/;"	f	typeref:typename:int
check_if_flag	zone.cc	/^int check_if_flag(int if_flag, int last_cmd, int last_mob, int last_obj)$/;"	f	typeref:typename:int
check_inventory_proto	utility.cc	/^void check_inventory_proto(struct char_data* ch)$/;"	f	typeref:typename:void
check_keywords	obj2html.cc	/^int check_keywords(struct obj2html_type* list, char* arg)$/;"	f	typeref:typename:int
check_mind_block	clerics.cc	/^bool check_mind_block(char_data* character, char_data* attacker, int amount, int stat_num)$/;"	f	typeref:typename:bool
check_overkill	fight.cc	/^int check_overkill(struct char_data* ch)$/;"	f	typeref:typename:int
check_resistances	utility.cc	/^int check_resistances(char_data* victim, int attack_type)$/;"	f	typeref:typename:int
check_riposte	fight.cc	/^int check_riposte(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:int
check_sanctuary	fight.cc	/^int check_sanctuary(char_data* ch, char_data* victim)$/;"	f	typeref:typename:int
check_script_syntax	shapescript.cc	/^void check_script_syntax(struct char_data* ch)$/;"	f	typeref:typename:void
check_simple_move	act_move.cc	/^int check_simple_move(struct char_data* ch, int cmd,$/;"	f	typeref:typename:int
check_skill_success	ranger.cc	/^bool check_skill_success(char_data* ch, int skill)$/;"	f	typeref:typename:bool
check_start_rooms	db.cc	/^void check_start_rooms(void)$/;"	f	typeref:typename:void
check_stat_increase	profs.cc	/^void check_stat_increase(char_data* character)$/;"	f	namespace:__anon2a51bc030111	typeref:typename:void
check_sun_change	weather.cc	/^int check_sun_change()$/;"	f	typeref:typename:int
check_weapon_poison	fight.cc	/^void check_weapon_poison(char_data* attacker, char_data* victim, obj_data* weapon)$/;"	f	typeref:typename:void
checkpointing	signals.cc	/^void checkpointing(int fake)$/;"	f	typeref:typename:void
choice	structs.h	/^    int choice; \/* what kind of target is this   *\/$/;"	m	struct:target_data	typeref:typename:int
choose_caster_target	spec_pro.cc	/^char_data* choose_caster_target(char_data* caster)$/;"	f	namespace:__anon89a785540111	typeref:typename:char_data *
choose_mage_spell	spec_pro.cc	/^int choose_mage_spell(const char_data* caster, const char_data* target)$/;"	f	namespace:__anon89a785540111	typeref:typename:int
choose_mystic_spell	spec_pro.cc	/^int choose_mystic_spell(char_data* caster, char_data* target)$/;"	f	namespace:__anon89a785540111	typeref:typename:int
chr	mudlle.h	/^    struct char_data* chr;$/;"	m	union:list_field	typeref:struct:char_data *
chtime	db.h	/^    char chtime[30]; \/* str date of death *\/$/;"	m	struct:exploit_record	typeref:typename:char[30]
circle_follow	handler.cc	/^char circle_follow(struct char_data* ch, struct char_data* victim, int mode)$/;"	f	typeref:typename:char
circle_reboot	comm.cc	/^int circle_reboot = 0; \/* reboot the game after a shutdown *\/$/;"	v	typeref:typename:int
circle_shutdown	comm.cc	/^int circle_shutdown = 0; \/* clean shutdown *\/$/;"	v	typeref:typename:int
circlemud_version	consts.cc	/^char circlemud_version[] = {$/;"	v	typeref:typename:char[]
clamp_OB_coef	object_utils.cpp	/^    double clamp_OB_coef(double OB_coef)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
clamp_damage_coef	object_utils.cpp	/^    double clamp_damage_coef(double damage_coef)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
clamp_parry_coef	object_utils.cpp	/^    double clamp_parry_coef(double parry_coef)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
class_HP	profs.cc	/^inline int class_HP(const char_data* character)$/;"	f	typeref:typename:int
classpoints	structs.h	/^    int classpoints; \/* Only used for character creation in interpre.cc new_player_select.  Mov/;"	m	struct:char_data	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean_expose_elements	comm.cc	/^void clean_expose_elements()$/;"	f	typeref:typename:void
clean_text	shapemob.cc	/^void clean_text(char* str)$/;"	f	typeref:typename:void
cleanup	interpre.cc	/^void target_data::cleanup()$/;"	f	class:target_data	typeref:typename:void
clear_char	db.cc	/^void clear_char(struct char_data* ch, int mode)$/;"	f	typeref:typename:void
clear_invalid_list	ban.cc	/^void clear_invalid_list(void)$/;"	f	typeref:typename:void
clear_memory	mobact.cc	/^void clear_memory(struct char_data* ch)$/;"	f	typeref:typename:void
clear_object	db.cc	/^void clear_object(struct obj_data* obj)$/;"	f	typeref:typename:void
clear_script_info	script.cc	/^void clear_script_info(info_script* inf)$/;"	f	typeref:typename:void
cleave_proc_chance	weapon_master_handler.cpp	/^    constexpr const float cleave_proc_chance = 0.50f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
clerics.o	Makefile	/^clerics.o : clerics.cc structs.h utils.h comm.h handler.h interpre.h db.h spells.h limits.h$/;"	t
clock.o	Makefile	/^clock.o : clock.cpp clock.h$/;"	t
close1	shop.cc	/^    int close1, close2; \/* When does the shop close?		*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
close2	shop.cc	/^    int close1, close2; \/* When does the shop close?		*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
close_socket	comm.cc	/^void close_socket(descriptor_data* conn_descriptor, int drop_all)$/;"	f	typeref:typename:void
close_sockets	comm.cc	/^void close_sockets(SocketType s)$/;"	f	typeref:typename:void
closing_time	shop.cc	/^void closing_time(struct char_data* keeper)$/;"	f	typeref:typename:void
clr	color.h	/^#define clr(/;"	d
cmd	act_wiz.cc	/^        char* cmd;$/;"	m	struct:ACMD::show_struct	typeref:typename:char *	file:
cmd	act_wiz.cc	/^    char* cmd;$/;"	m	struct:set_struct	typeref:typename:char *	file:
cmd	spec_pro.cc	/^    char* cmd;$/;"	m	struct:social_type	typeref:typename:char *	file:
cmd	structs.h	/^    int cmd; \/* command to be performed after delay -$/;"	m	struct:waiting_type	typeref:typename:int
cmd	zone.h	/^    struct reset_com* cmd; \/* command table for reset	          *\/$/;"	m	struct:zone_data	typeref:struct:reset_com *
cmd_info	interpre.cc	/^struct command_info cmd_info[MAX_CMD_LIST];$/;"	v	typeref:struct:command_info[]
cmdno	zone.h	/^    int cmdno; \/* Number of zone commands *\/$/;"	m	struct:zone_data	typeref:typename:int
coef	spec_pro.cc	/^    int coef; \/* A bitvector of classes this will load for *\/$/;"	m	struct:kit_item	typeref:typename:int	file:
cold_spec_data	structs.h	/^    cold_spec_data()$/;"	f	struct:cold_spec_data
cold_spec_data	structs.h	/^struct cold_spec_data : public elemental_spec_data {$/;"	s
color.o	Makefile	/^color.o: color.cc color.h$/;"	t
color_color	color.cc	/^const char* color_color[] = {$/;"	v	typeref:typename:const char * []
color_fields	color.cc	/^const char* color_fields[] = {$/;"	v	typeref:typename:const char * []
color_liquid	consts.cc	/^char* color_liquid[] = {$/;"	v	typeref:typename:char * []
color_mask	structs.h	/^    long color_mask;$/;"	m	struct:char_prof_data	typeref:typename:long
color_sequence	color.cc	/^char* color_sequence[] = {$/;"	v	typeref:typename:char * []
colors	structs.h	/^    char colors[16];$/;"	m	struct:char_prof_data	typeref:typename:char[16]
com_msgs	act_comm.cc	/^char* com_msgs[][3] = {$/;"	v	typeref:typename:char * [][3]
com_msgs_col	act_comm.cc	/^char* com_msgs_col[] = {$/;"	v	typeref:typename:char * []
combat_list	fight.cc	/^struct char_data* combat_list = 0; \/* head of l-list of fighting chars *\/$/;"	v	typeref:struct:char_data *
combat_manager	combat_manager.cpp	/^combat_manager::combat_manager(const weather_data& weather, const room_data* world)$/;"	f	class:game_rules::combat_manager
combat_manager	combat_manager.h	/^class combat_manager {$/;"	c	namespace:game_rules
combat_manager.o	Makefile	/^combat_manager.o : combat_manager.cpp combat_manager.h base_utils.h$/;"	t
combat_next_dude	fight.cc	/^struct char_data* combat_next_dude = 0; \/* Next dude global trick *\/$/;"	v	typeref:struct:char_data *
combat_result_struct	structs.h	/^    combat_result_struct()$/;"	f	struct:combat_result_struct
combat_result_struct	structs.h	/^    combat_result_struct(bool wimpy, bool dead)$/;"	f	struct:combat_result_struct
combat_result_struct	structs.h	/^struct combat_result_struct {$/;"	s
comm	protos.h	/^    struct reset_com comm;$/;"	m	struct:zone_tree	typeref:struct:reset_com
comm.o	Makefile	/^comm.o : comm.cc structs.h utils.h comm.h interpre.h handler.h db.h \\$/;"	t
command	db.h	/^    char command; \/* current command *\/$/;"	m	struct:reset_com	typeref:typename:char
command	db.h	/^    char* command;$/;"	m	struct:social_messg	typeref:typename:char *
command	interpre.cc	/^const char* command[] = {$/;"	v	typeref:typename:const char * []
command	structs.h	/^    char* command;$/;"	m	struct:alias_list	typeref:typename:char *
command_info	interpre.h	/^struct command_info {$/;"	s
command_interpreter	interpre.cc	/^void command_interpreter(struct char_data* ch, char* argument_chr,$/;"	f	typeref:typename:void
command_pointer	interpre.h	/^    void (*command_pointer)(struct char_data* ch, char* argument,$/;"	m	struct:command_info	typeref:typename:void (*)(struct char_data * ch,char * argument,struct waiting_type *,int cmd,int subcmd)
command_room	shapezon.cc	/^int command_room(struct reset_com* com)$/;"	f	typeref:typename:int
command_simple_convert	shapemob.cc	/^int command_simple_convert(int key)$/;"	f	typeref:typename:int
command_type	protos.h	/^    int command_type; \/\/  See script.h - type of command$/;"	m	struct:script_data	typeref:typename:int
comment	protos.h	/^    char* comment;$/;"	m	struct:zone_tree	typeref:typename:char *
compare_list	mudlle2.cc	/^int compare_list(struct char_data* host, struct target_data* it1,$/;"	f	typeref:typename:int
compare_obj_to_proto	utility.cc	/^int compare_obj_to_proto(struct obj_data* obj)$/;"	f	typeref:typename:int
complete_delay	comm.cc	/^void complete_delay(struct char_data* ch)$/;"	f	typeref:typename:void
complete_delay	wait_functions.cpp	/^void wait_list::complete_delay(char_data* character)$/;"	f	class:game_types::wait_list	typeref:typename:void
con	structs.h	/^    signed char con;$/;"	m	struct:char_ability_data	typeref:typename:signed char
concussion_subtypes	obj2html.cc	/^struct obj2html_type concussion_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
condition	structs.h	/^    sh_int condition; \/\/ Effective condition of the tracks in hours$/;"	m	struct:room_track_data	typeref:typename:sh_int
condition	structs.h	/^    sh_int condition;$/;"	m	struct:room_bleed_data	typeref:typename:sh_int
conditions	structs.h	/^    int conditions[3]; \/* Drunk full etc.			*\/$/;"	m	struct:char_special2_data	typeref:typename:int[3]
config.o	Makefile	/^config.o : config.cc structs.h$/;"	t
connected	structs.h	/^    int connected; \/* mode of 'connectedness'		*\/$/;"	m	struct:descriptor_data	typeref:typename:int
connected_types	consts.cc	/^char* connected_types[] = {$/;"	v	typeref:typename:char * []
const_char_iter	structs.h	/^typedef char_vector::const_iterator const_char_iter;$/;"	t	typeref:typename:char_vector::const_iterator
const_char_set_iter	structs.h	/^typedef char_set::const_iterator const_char_set_iter;$/;"	t	typeref:typename:char_set::const_iterator
constabilities	structs.h	/^    struct char_ability_data constabilities; \/* Rolled abilities *\/$/;"	m	struct:char_data	typeref:struct:char_ability_data
constabilities	structs.h	/^    struct char_ability_data constabilities;$/;"	m	struct:char_file_u	typeref:struct:char_ability_data
consts.o	Makefile	/^consts.o : consts.cc structs.h limits.h$/;"	t
contains	char_utils.cpp	/^bool contains(const char* a, const char* b) { return strstr(a, b) != NULL; }$/;"	f	namespace:string_func	typeref:typename:bool
contains	structs.h	/^    bool contains(const char_data* character) { return std::find(members.begin(), members.end(),/;"	f	class:group_data	typeref:typename:bool
contains	structs.h	/^    struct obj_data* contains; \/* Contains objects                 *\/$/;"	m	struct:obj_data	typeref:struct:obj_data *
contents	structs.h	/^    struct obj_data* contents; \/* List of items in room              *\/$/;"	m	struct:room_data	typeref:struct:obj_data *
continue_char_script	script.cc	/^void continue_char_script(char_data* ch)$/;"	f	typeref:typename:void
convert_exit_flag	shaperom.cc	/^int convert_exit_flag(int tmp, int mode)$/;"	f	typeref:typename:int
convert_old_colormask	color.cc	/^void convert_old_colormask(struct char_file_u* ch)$/;"	f	typeref:typename:void
convert_string	comm.cc	/^void convert_string(const char* str, int hide_invisible, struct char_data* ch,$/;"	f	typeref:typename:void
corpse_decay_time	fight.cc	/^void corpse_decay_time(char_data* character, obj_data* corpse, int duration)$/;"	f	typeref:typename:void
corpse_iter	big_brother.cpp	/^    typedef corpse_map::iterator corpse_iter;$/;"	t	function:game_rules::big_brother::on_character_disconnected	typeref:typename:corpse_map::iterator	file:
corpse_map	big_brother.h	/^    typedef std::map<obj_data*, player_corpse_data> corpse_map;$/;"	t	class:game_rules::big_brother	typeref:typename:std::map<obj_data *,player_corpse_data>
corpse_num	structs.h	/^    int corpse_num; \/* what object to use as a corpse        *\/$/;"	m	struct:char_player_data	typeref:typename:int
cost	structs.h	/^    int cost; \/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
cost_per_day	objsave.cc	/^int cost_per_day(struct obj_data* obj)$/;"	f	typeref:typename:int
cost_per_day	structs.h	/^    sh_int cost_per_day; \/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data	typeref:typename:sh_int
count	act_info.cc	/^    int count;$/;"	m	struct:__anon131f9bdc0111::inventory_data	typeref:typename:int	file:
count_hash_records	db.cc	/^int count_hash_records(FILE* fl)$/;"	f	typeref:typename:int
count_msg	boards.cc	/^int board_info_type::count_msg(char_data* ch, int cur_num)$/;"	f	class:board_info_type	typeref:typename:int
count_obj_in_list	handler.cc	/^int count_obj_in_list(int num, struct obj_data* list)$/;"	f	typeref:typename:int
counter	skill_timer.h	/^        int counter;$/;"	m	struct:game_timer::skill_timer::skill_data	typeref:typename:int
counter	structs.h	/^    sh_int counter;$/;"	m	struct:affected_type	typeref:typename:sh_int
create	combat_manager.h	/^    static void create(const weather_data& weather, const room_data* world)$/;"	f	class:game_rules::combat_manager	typeref:typename:void
create	singleton.h	/^    static void create()$/;"	f	class:singleton	typeref:typename:void
create	singleton.h	/^    static void create(const weather_data& weather, const room_data* world)$/;"	f	class:world_singleton	typeref:typename:void
create	wait_functions.h	/^    static void create()$/;"	f	class:game_types::wait_list	typeref:typename:void
create_bulk	db.cc	/^void room_data::create_bulk(int amount)$/;"	f	class:room_data	typeref:typename:void
create_entry	db.cc	/^int create_entry(char* name)$/;"	f	typeref:typename:int
create_exit	db.cc	/^void room_data::create_exit(int dir, int room, char connect)$/;"	f	class:room_data	typeref:typename:void
create_function	utility.cc	/^void* create_function(int elem_size, int elem_num, int line, const char* file)$/;"	f	typeref:typename:void *
create_money	handler.cc	/^struct obj_data* create_money(int amount)$/;"	f	typeref:struct:obj_data *
create_pointer	utility.cc	/^void* create_pointer = 0;$/;"	v	typeref:typename:void *
create_room	db.cc	/^int room_data::create_room(int zone)$/;"	f	class:room_data	typeref:typename:int
create_room	shaperom.cc	/^int create_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
credits	db.cc	/^char* credits = 0; \/* game credits			*\/$/;"	v	typeref:typename:char *
crime	db.h	/^    int crime;$/;"	m	struct:crime_record_type	typeref:typename:int
crime_file	db.cc	/^FILE* crime_file = 0;$/;"	v	typeref:typename:FILE *
crime_record	db.cc	/^struct crime_record_type* crime_record = 0;$/;"	v	typeref:struct:crime_record_type *
crime_record_type	db.h	/^struct crime_record_type {$/;"	s
crime_time	db.h	/^    int crime_time;$/;"	m	struct:crime_record_type	typeref:typename:int
criminal	db.h	/^    sh_int criminal;$/;"	m	struct:crime_record_type	typeref:typename:sh_int
cur_room	protos.h	/^    int cur_room; \/* for 'in this room only' mode *\/$/;"	m	struct:shape_zone	typeref:typename:int
cur_room	protos.h	/^    int cur_room; \/\/  Current room (if set)$/;"	m	struct:shape_script	typeref:typename:int
cur_str	structs.h	/^    unsigned int cur_str; \/* current pointer position in *str     *\/$/;"	m	struct:descriptor_data	typeref:typename:unsigned int
curr	protos.h	/^    struct zone_tree* curr; \/* currently reviewed command   *\/$/;"	m	struct:shape_zone	typeref:struct:zone_tree *
current_bodypart	structs.h	/^    sh_int current_bodypart; \/* The number of current bodypart *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
current_health	warrior_spec_handlers.h	/^    int current_health = 0;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:int
current_parry	structs.h	/^    sh_int current_parry; \/*parry currently affected by 'parry split' *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
current_spec	structs.h	/^    game_types::player_specs current_spec;$/;"	m	struct:specialization_data	typeref:typename:game_types::player_specs
current_spec_info	structs.h	/^    specialization_info* current_spec_info;$/;"	m	struct:specialization_data	typeref:typename:specialization_info *
current_time	clock.h	/^    timeval current_time;$/;"	m	class:rots_clock	typeref:typename:timeval
current_time	fight.cc	/^timeval current_time;$/;"	v	namespace:__anon286ec0cb0211	typeref:typename:timeval
dam_message	fight.cc	/^void dam_message(int damage, char_data* attacker, char_data* victim, int w_type, char* bodypart)$/;"	f	typeref:typename:void
dam_weapon_type	fight.cc	/^static struct dam_weapon_type {$/;"	s	file:
dam_weapons	fight.cc	/^} dam_weapons[] = {$/;"	v	typeref:struct:dam_weapon_type[]
damage	fight.cc	/^int damage(char_data* attacker, char_data* victim, int dam, int attacktype, int hit_location)$/;"	f	typeref:typename:int
damage	structs.h	/^    sh_int damage; \/*  damage in normal tactics *\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
damage_details	structs.h	/^    damage_details()$/;"	f	class:damage_details
damage_details	structs.h	/^    player_damage_details damage_details; \/* structure for storing damage data *\/$/;"	m	struct:char_data	typeref:typename:player_damage_details
damage_details	structs.h	/^class damage_details {$/;"	c
damage_map	structs.h	/^    std::map<int, damage_details> damage_map;$/;"	m	class:player_damage_details	typeref:typename:std::map<int,damage_details>
damage_report	structs.h	/^    group_damaga_data damage_report;$/;"	m	class:group_data	typeref:typename:group_damaga_data
damage_stat	clerics.cc	/^combat_result_struct damage_stat(struct char_data* killer, struct char_data* victim, int stat_nu/;"	f	typeref:typename:combat_result_struct
dance_description	spec_pro.cc	/^char* dance_description[][2] = {$/;"	v	typeref:typename:char * [][2]
dark_power	zone.h	/^    int white_power, dark_power, magi_power; \/* power of races present *\/$/;"	m	struct:zone_data	typeref:typename:int
darkness_spec_data	structs.h	/^struct darkness_spec_data : public elemental_spec_data {$/;"	s
data	structs.h	/^    byte data; \/\/ data\/8 = time of the track, data & 8 = direction$/;"	m	struct:room_track_data	typeref:typename:byte
data	structs.h	/^    byte data;$/;"	m	struct:room_bleed_data	typeref:typename:byte
data_block_type	mail.h	/^typedef struct data_block_type_d data_block_type;$/;"	t	typeref:struct:data_block_type_d
data_block_type_d	mail.h	/^struct data_block_type_d {$/;"	s
date	db.h	/^    long date;$/;"	m	struct:ban_list_element	typeref:typename:long
day	structs.h	/^    byte hours, day, month, moon;$/;"	m	struct:time_info_data	typeref:typename:byte
day_to_str	utility.cc	/^void day_to_str(struct time_info_data* loc_time_info, char* str)$/;"	f	typeref:typename:void
db.o	Makefile	/^db.o : db.cc structs.h utils.h db.h comm.h handler.h limits.h spells.h \\$/;"	t
death_cry	fight.cc	/^void death_cry(struct char_data* ch)$/;"	f	typeref:typename:void
death_cry	structs.h	/^    char* death_cry; \/* NPC - message to give in death        *\/$/;"	m	struct:char_player_data	typeref:typename:char *
death_cry2	structs.h	/^    char* death_cry2; \/* NPC - message to other rooms         *\/$/;"	m	struct:char_player_data	typeref:typename:char *
death_waiting_list	db.cc	/^struct char_data* death_waiting_list = 0; \/* list of those flagged to die... *\/$/;"	v	typeref:struct:char_data *
decrypt_line	utility.cc	/^void decrypt_line(unsigned char* lp, int len)$/;"	f	typeref:typename:void
decrypt_line_line	utility.cc	/^unsigned char decrypt_line_line[1000];$/;"	v	typeref:typename:unsigned char[1000]
default_exit_width	utility.cc	/^int default_exit_width[] = {$/;"	v	typeref:typename:int[]
default_pos	structs.h	/^    sh_int default_pos; \/* Default position for NPC                *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
defender_data	structs.h	/^    defender_data()$/;"	f	struct:defender_data
defender_data	structs.h	/^struct defender_data : public specialization_info {$/;"	s
defender_effect	fight.cc	/^int defender_effect(char_data* attacker, char_data* victim, int damage)$/;"	f	typeref:typename:int
delay	structs.h	/^    struct waiting_type delay;$/;"	m	struct:char_data	typeref:struct:waiting_type
delayed_command_interpreter	delayed_command_interpreter.cpp	/^delayed_command_interpreter::delayed_command_interpreter(char_data* character)$/;"	f	class:game_types::delayed_command_interpreter
delayed_command_interpreter	delayed_command_interpreter.h	/^class delayed_command_interpreter {$/;"	c	namespace:game_types
delayed_command_interpreter.o	Makefile	/^delayed_command_interpreter.o : delayed_command_interpreter.cpp delayed_command_interpreter.h$/;"	t
delete_character_file	db.cc	/^void delete_character_file(struct char_data* ch)$/;"	f	typeref:typename:void
delete_exploits_file	db.cc	/^int delete_exploits_file(char* name)$/;"	f	typeref:typename:int
delete_list_iter	wait_functions.h	/^    typedef delete_list_type::iterator delete_list_iter;$/;"	t	class:game_types::wait_list	typeref:typename:delete_list_type::iterator
delete_list_type	wait_functions.h	/^    typedef std::list<char_data*> delete_list_type;$/;"	t	class:game_types::wait_list	typeref:typename:std::list<char_data * >
delete_room	db.cc	/^void room_data::delete_room()$/;"	f	class:room_data	typeref:typename:void
desc	structs.h	/^    struct descriptor_data* desc; \/* NULL for mobiles              *\/$/;"	m	struct:char_data	typeref:struct:descriptor_data *
desc_num	structs.h	/^    int desc_num; \/* unique num assigned to desc		*\/$/;"	m	struct:descriptor_data	typeref:typename:int
descr	db.h	/^    char* descr;$/;"	m	struct:help_index_summary	typeref:typename:char *
description	act_info.cc	/^    std::string description;$/;"	m	struct:__anon131f9bdc0111::inventory_data	typeref:typename:std::string	file:
description	protos.h	/^    char* description; \/\/  Description of what the script does.  ** Saved to script file **$/;"	m	struct:script_head	typeref:typename:char *
description	protos.h	/^    char* description; \/\/  Long description$/;"	m	struct:shape_script	typeref:typename:char *
description	structs.h	/^    char description[512];$/;"	m	struct:char_file_u	typeref:typename:char[512]
description	structs.h	/^    char* description; \/* Extra descriptions                   	*\/$/;"	m	struct:char_player_data	typeref:typename:char *
description	structs.h	/^    char* description; \/* Shown when entered                 *\/$/;"	m	struct:room_data	typeref:typename:char *
description	structs.h	/^    char* description; \/* What to see                      *\/$/;"	m	struct:extra_descr_data	typeref:typename:char *
description	structs.h	/^    char* description; \/* When in room                     *\/$/;"	m	struct:obj_data	typeref:typename:char *
description	zone.h	/^    char* description;$/;"	m	struct:zone_data	typeref:typename:char *
descriptor	structs.h	/^    SocketType descriptor; \/* file descriptor for socket	*\/$/;"	m	struct:descriptor_data	typeref:typename:SocketType
descriptor_data	structs.h	/^struct descriptor_data {$/;"	s
descriptor_list	comm.cc	/^struct descriptor_data *descriptor_list = 0, *next_to_process = 0;$/;"	v	typeref:struct:descriptor_data *
dex	structs.h	/^    signed char dex;$/;"	m	struct:char_ability_data	typeref:typename:signed char
dflags	structs.h	/^    unsigned char dflags; \/* flags for this descriptor            *\/$/;"	m	struct:descriptor_data	typeref:typename:unsigned char
diag_char_to_char	act_info.cc	/^void diag_char_to_char(char_data* looked_at, char_data* viewer)$/;"	f	typeref:typename:void
dice	utility.cc	/^int dice(int number, int size)$/;"	f	typeref:typename:int
die	fight.cc	/^void die(char_data* dead_man, char_data* killer, int attack_type)$/;"	f	typeref:typename:void
die_follower	handler.cc	/^void die_follower(char_data* character)$/;"	f	typeref:typename:void
die_msg	structs.h	/^    struct msg_type die_msg; \/* messages when death			*\/$/;"	m	struct:message_type	typeref:struct:msg_type
diesig	signals.cc	/^void diesig(int fake)$/;"	f	typeref:typename:void
dir	graph.cc	/^    char dir;$/;"	m	struct:bfs_queue_struct	typeref:typename:char	file:
dir_option	structs.h	/^    struct room_direction_data* dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	m	struct:room_data	typeref:struct:room_direction_data * []
dirs	consts.cc	/^char* dirs[] = {$/;"	v	typeref:typename:char * []
display_joined_group	act_othe.cc	/^void display_joined_group(char_data* character, char_data* leader)$/;"	f	typeref:typename:void
display_msg	boards.cc	/^int board_info_type::display_msg(struct char_data* ch,$/;"	f	class:board_info_type	typeref:typename:int
do_details	act_info.cc	/^void do_details(char_data* character, char* argument, waiting_type* wait_list, int command, int /;"	f	typeref:typename:void
do_dodge	fight.cc	/^void do_dodge(struct char_data* ch, struct char_data* victim, int type)$/;"	f	typeref:typename:void
do_evade	fight.cc	/^void do_evade(struct char_data* ch, struct char_data* victim, int type)$/;"	f	typeref:typename:void
do_fame_leader_string	act_info.cc	/^void do_fame_leader_string(LEADER* ldr, char* buffer)$/;"	f	typeref:typename:void
do_fame_war_bonuses	limits.cc	/^void do_fame_war_bonuses(struct char_data* ch)$/;"	f	typeref:typename:void
do_flag_values_display	act_info.cc	/^void do_flag_values_display(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
do_food_display	act_info.cc	/^void do_food_display(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
do_identify_object	act_info.cc	/^void do_identify_object(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
do_light_display	act_info.cc	/^void do_light_display(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
do_mental	clerics.cc	/^void do_mental(struct char_data* ch, char* argument, struct waiting_type* wtl, int cmd, int subc/;"	f	typeref:typename:void
do_move_arrow_to_room	ranger.cc	/^void do_move_arrow_to_room(char_data* archer, obj_data* arrow, int room_num)$/;"	f	typeref:typename:void
do_not_buy	shop.cc	/^    char* do_not_buy; \/* If keeper dosn't buy such things. 	*\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
do_on_damage_dealt	weapon_master_handler.cpp	/^void weapon_master_handler::do_on_damage_dealt(int damage, char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:void
do_on_damage_rolled	weapon_master_handler.cpp	/^int weapon_master_handler::do_on_damage_rolled(int damage_roll, char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:int
do_parry	fight.cc	/^void do_parry(struct char_data* ch, struct char_data* victim, int type)$/;"	f	typeref:typename:void
do_pass_through	fight.cc	/^void do_pass_through(struct char_data* ch, struct char_data* victim, int type)$/;"	f	typeref:typename:void
do_power_of_arda	limits.cc	/^void do_power_of_arda(char_data* ch)$/;"	f	typeref:typename:void
do_recover	ranger.cc	/^void do_recover(char_data* character, char* argument, waiting_type* wait_list, int command, int /;"	f	typeref:typename:void
do_riposte	combat_manager.cpp	/^void combat_manager::do_riposte(char_data* attacker, char_data* riposter)$/;"	f	class:game_rules::combat_manager	typeref:typename:void
do_riposte	fight.cc	/^void do_riposte(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
do_rush	wild_fighting_handler.cpp	/^int wild_fighting_handler::do_rush(int starting_damage) const$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:int
do_sanctuary_check	olog_hai.cpp	/^void do_sanctuary_check(char_data* ch)$/;"	f	namespace:olog_hai	typeref:typename:void
do_scan	ranger.cc	/^void do_scan(char_data* character, char* argument, waiting_type* wait_list, int command, int sub/;"	f	typeref:typename:void
do_sense_magic	spell_pa.cc	/^void do_sense_magic(char_data* caster, int spell_number)$/;"	f	typeref:typename:void
do_squareroot	act_info.cc	/^int do_squareroot(int i)$/;"	f	typeref:typename:int
do_squareroot	profs.cc	/^inline int do_squareroot(int i, char_data* character)$/;"	f	typeref:typename:int
do_squareroot	utility.cc	/^do_squareroot(int i, struct char_data* ch)$/;"	f	typeref:typename:int
do_start	limits.cc	/^void do_start(struct char_data* ch)$/;"	f	typeref:typename:void
do_stat_character	act_wiz.cc	/^void do_stat_character(struct char_data* ch, struct char_data* k)$/;"	f	typeref:typename:void
do_stat_object	act_wiz.cc	/^void do_stat_object(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
do_stat_room	act_wiz.cc	/^void do_stat_room(struct char_data* ch)$/;"	f	typeref:typename:void
do_weapon_display	act_info.cc	/^void do_weapon_display(struct char_data* ch, struct obj_data* j)$/;"	f	typeref:typename:void
dodge	structs.h	/^    sh_int dodge; \/* dodge. all in this file are tactics independent.*\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
does_armor_fail_spell	battle_mage_handler.cpp	/^bool battle_mage_handler::does_armor_fail_spell() const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:bool
does_arrow_break	ranger.cc	/^bool does_arrow_break(const char_data* archer, const char_data* victim, const obj_data* arrow)$/;"	f	typeref:typename:bool
does_beorning_swipe_proc	fight.cc	/^bool does_beorning_swipe_proc(struct char_data* character)$/;"	f	typeref:typename:bool
does_double_hit_proc	fight.cc	/^bool does_double_hit_proc(const char_data* character)$/;"	f	typeref:typename:bool
does_find_weakness	combat_manager.cpp	/^bool combat_manager::does_find_weakness(const char_data& attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:bool
does_mental_attack_interrupt_spell	battle_mage_handler.cpp	/^bool battle_mage_handler::does_mental_attack_interrupt_spell() const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:bool
does_rush	combat_manager.cpp	/^bool combat_manager::does_rush(const char_data& attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:bool
does_spear_proc	weapon_master_handler.cpp	/^bool weapon_master_handler::does_spear_proc(char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:bool
does_spell_get_interrupted	battle_mage_handler.cpp	/^bool battle_mage_handler::does_spell_get_interrupted() const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:bool
does_sword_proc	weapon_master_handler.cpp	/^bool weapon_master_handler::does_sword_proc() const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:bool
does_victim_riposte	combat_manager.cpp	/^bool combat_manager::does_victim_riposte(char_data* attacker, char_data* riposter)$/;"	f	class:game_rules::combat_manager	typeref:typename:bool
does_victim_save_on_weapon_poison	fight.cc	/^bool does_victim_save_on_weapon_poison(struct char_data* victim, struct obj_data* weapon)$/;"	f	typeref:typename:bool
draw_coofs	profs.cc	/^void draw_coofs(char* buf, struct char_data* ch)$/;"	f	typeref:typename:void
draw_line	profs.cc	/^void draw_line(char* buf, int length)$/;"	f	typeref:typename:void
draw_map	db.cc	/^void draw_map()$/;"	f	typeref:typename:void
drink_aff	consts.cc	/^int drink_aff[][3] = {$/;"	v	typeref:typename:int[][3]
drinknames	consts.cc	/^char* drinknames[] = {$/;"	v	typeref:typename:char * []
drinks	consts.cc	/^char* drinks[] = {$/;"	v	typeref:typename:char * []
dummy_affected_var	handler.cc	/^int dummy_affected_var = 17;$/;"	v	typeref:typename:int
dummy_room_data	db.cc	/^void dummy_room_data(room_data* room)$/;"	f	typeref:typename:void
dump_all	obj2html.cc	/^int dump_all; \/* If asserted, then we dump \/all objects\/ *\/$/;"	v	typeref:typename:int
dump_output	obj2html.cc	/^void dump_output(struct char_data* ch, FILE* f, struct obj2html_type* list)$/;"	f	typeref:typename:void
duration	structs.h	/^    int duration; \/* For how long its effects will last      *\/$/;"	m	struct:affected_type	typeref:typename:int
e	mage.cc	/^    signed char e; \/\/ north\/east\/up coordinates$/;"	m	struct:loclife_coord	typeref:typename:signed char	file:
echo_off	utility.cc	/^void echo_off(int sock)$/;"	f	typeref:typename:void
echo_on	utility.cc	/^void echo_on(int sock)$/;"	f	typeref:typename:void
edit_mudlle	shapemdl.cc	/^void edit_mudlle(struct char_data* ch)$/;"	f	typeref:typename:void
editflag	protos.h	/^    char editflag; \/* for edit, which case is invoked      *\/$/;"	m	struct:shape_object	typeref:typename:char
editflag	protos.h	/^    char editflag; \/* for edit, which case is invoked      *\/$/;"	m	struct:shape_proto	typeref:typename:char
editflag	protos.h	/^    char editflag; \/* for edit, which case is invoked      *\/$/;"	m	struct:shape_room	typeref:typename:char
editflag	protos.h	/^    char editflag; \/* for edit, which case is invoked      *\/$/;"	m	struct:shape_zone	typeref:typename:char
editflag	protos.h	/^    char editflag; \/\/  Current shaping (internal) command$/;"	m	struct:shape_script	typeref:typename:char
elapsed_combat_seconds	structs.h	/^    float elapsed_combat_seconds;$/;"	m	class:player_damage_details	typeref:typename:float
elapsed_combat_seconds	structs.h	/^    float elapsed_combat_seconds;$/;"	m	class:timed_damage_details	typeref:typename:float
elemental_spec_data	structs.h	/^    elemental_spec_data()$/;"	f	struct:elemental_spec_data
elemental_spec_data	structs.h	/^struct elemental_spec_data : public specialization_info {$/;"	s
encrypt_line	utility.cc	/^void encrypt_line(unsigned char* line, int len)$/;"	f	typeref:typename:void
encrypt_line_lp	utility.cc	/^unsigned char encrypt_line_lp[1000];$/;"	v	typeref:typename:unsigned char[1000]
encumb	structs.h	/^    sh_int encumb; \/* how encumbered a player is, affects casting and$/;"	m	struct:char_point_data	typeref:typename:sh_int
encumb_table	consts.cc	/^sh_int encumb_table[MAX_WEAR] = {$/;"	v	typeref:typename:sh_int[]
encumb_weight	structs.h	/^    sh_int encumb_weight; \/* weight for skill encumberance            *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
end	structs.h	/^    char_iter end() { return members.end(); }$/;"	f	class:group_data	typeref:typename:char_iter
end	structs.h	/^    const_char_iter end() const { return members.end(); }$/;"	f	class:group_data	typeref:typename:const_char_iter
enemy	structs.h	/^    struct char_data* enemy;$/;"	m	struct:memory_rec	typeref:struct:char_data *
enemy_number	structs.h	/^    int enemy_number;$/;"	m	struct:memory_rec	typeref:typename:int
enforce_position	mobact.cc	/^void enforce_position(struct char_data* ch, int new_pos)$/;"	f	typeref:typename:void
entries	obj2html.cc	/^int entries; \/* The number of entries in the current table so far*\/$/;"	v	typeref:typename:int
environment_utils.o	Makefile	/^environment_utils.o : environment_utils.cpp structs.h environment_utils.h$/;"	t
equals	char_utils.cpp	/^bool equals(const char* a, const char* b) { return strcmp(a, b) == 0; }$/;"	f	namespace:string_func	typeref:typename:bool
equip_char	handler.cc	/^void equip_char(char_data* character, obj_data* item, int item_slot)$/;"	f	typeref:typename:void
equipment	structs.h	/^    struct obj_data* equipment[MAX_WEAR]; \/* Equipment array               *\/$/;"	m	struct:char_data	typeref:struct:obj_data * []
equipment_types	consts.cc	/^char* equipment_types[] = {$/;"	v	typeref:typename:char * []
evil_ranking	pkill.c	/^RANKING evil_ranking = { NULL, 0, 0, 0 };$/;"	v	typeref:typename:RANKING
ex_description	structs.h	/^    struct extra_descr_data* ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data	typeref:struct:extra_descr_data *
ex_description	structs.h	/^    struct extra_descr_data* ex_description; \/* for examine\/look       *\/$/;"	m	struct:room_data	typeref:struct:extra_descr_data *
existing	db.h	/^    int existing;$/;"	m	struct:reset_com	typeref:typename:int
existing_profs	profs.cc	/^struct prof_type existing_profs[DEFAULT_PROFS] = {$/;"	v	typeref:struct:prof_type[]
exit_bits	consts.cc	/^char* exit_bits[] = {$/;"	v	typeref:typename:char * []
exit_chosen	protos.h	/^    sh_int exit_chosen; \/* number of exit chosen for editing   *\/$/;"	m	struct:shape_room	typeref:typename:sh_int
exit_convert	shaperom.cc	/^char* exit_convert(int i)$/;"	f	typeref:typename:char *
exit_info	structs.h	/^    int exit_info; \/* Exit info    changed from sh_int                   *\/$/;"	m	struct:room_direction_data	typeref:typename:int
exit_mark	act_info.cc	/^char* exit_mark[] = {$/;"	v	typeref:typename:char * []
exit_width	structs.h	/^    ubyte exit_width; \/* 1-6, default should be 4 *\/$/;"	m	struct:room_direction_data	typeref:typename:ubyte
exp	limits.h	/^    int exp;$/;"	m	struct:title_type	typeref:typename:int
exp	structs.h	/^    int exp; \/* The experience of the player            *\/$/;"	m	struct:char_point_data	typeref:typename:int
exp	structs.h	/^    int exp;$/;"	m	struct:follower_file_elem	typeref:typename:int
exp_with_modifiers	fight.cc	/^int exp_with_modifiers(char_data* character, char_data* dead_man, int base_exp)$/;"	f	typeref:typename:int
exploit_record	db.h	/^struct exploit_record {$/;"	s
exposed_target	structs.h	/^    char_data* exposed_target;$/;"	m	struct:elemental_spec_data	typeref:typename:char_data *
extension_next	structs.h	/^    room_data_extension* extension_next;$/;"	m	struct:room_data_extension	typeref:typename:room_data_extension *
extension_world	structs.h	/^    room_data* extension_world;$/;"	m	struct:room_data_extension	typeref:typename:room_data *
extra_bits	consts.cc	/^char* extra_bits[] = {$/;"	v	typeref:typename:char * []
extra_coms_obj	shapeobj.cc	/^void extra_coms_obj(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
extra_coms_proto	shapemob.cc	/^void extra_coms_proto(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
extra_coms_room	shaperom.cc	/^void extra_coms_room(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
extra_coms_script	shapescript.cc	/^void extra_coms_script(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
extra_coms_zone	shapezon.cc	/^void extra_coms_zone(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
extra_descr_data	structs.h	/^struct extra_descr_data {$/;"	s
extra_flags	structs.h	/^    int extra_flags; \/* If it hums,glows etc             *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
extra_flags	structs.h	/^    int extra_flags;$/;"	m	struct:obj_file_elem	typeref:typename:int
extra_messages	act_info.cc	/^char* extra_messages[] = {$/;"	v	typeref:typename:char * []
extra_specialization_data	structs.h	/^    specialization_data extra_specialization_data; \/* extra data used by some specializations */;"	m	struct:char_data	typeref:typename:specialization_data
extract_char	handler.cc	/^void extract_char(struct char_data* ch)$/;"	f	typeref:typename:void
extract_char	handler.cc	/^void extract_char(struct char_data* ch, int new_room)$/;"	f	typeref:typename:void
extract_followers	objsave.cc	/^void extract_followers(struct char_data* ch)$/;"	f	typeref:typename:void
extract_obj	handler.cc	/^void extract_obj(struct obj_data* obj)$/;"	f	typeref:typename:void
f_from	protos.h	/^    char f_from[80]; \/* file descriptors for loading         *\/$/;"	m	struct:shape_mudlle	typeref:typename:char[80]
f_from	protos.h	/^    char f_from[80]; \/* file descriptors for loading         *\/$/;"	m	struct:shape_object	typeref:typename:char[80]
f_from	protos.h	/^    char f_from[80]; \/* file descriptors for loading         *\/$/;"	m	struct:shape_proto	typeref:typename:char[80]
f_from	protos.h	/^    char f_from[80]; \/* file descriptors for loading         *\/$/;"	m	struct:shape_room	typeref:typename:char[80]
f_from	protos.h	/^    char f_from[80]; \/* file descriptors for loading         *\/$/;"	m	struct:shape_zone	typeref:typename:char[80]
f_from	protos.h	/^    char f_from[80]; \/\/  File$/;"	m	struct:shape_script	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/* and saving mobiles                   *\/$/;"	m	struct:shape_mudlle	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/* and saving mobiles                   *\/$/;"	m	struct:shape_object	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/* and saving mobiles                   *\/$/;"	m	struct:shape_proto	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/* and saving mobiles                   *\/$/;"	m	struct:shape_room	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/* and saving mobiles                   *\/$/;"	m	struct:shape_zone	typeref:typename:char[80]
f_old	protos.h	/^    char f_old[80]; \/\/  Old file$/;"	m	struct:shape_script	typeref:typename:char[80]
failed_chill_ray_count	structs.h	/^    int failed_chill_ray_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
failed_cone_of_cold_count	structs.h	/^    int failed_cone_of_cold_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
fame	pkill.h	/^    int fame;$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
fast_update	limits.cc	/^void fast_update()$/;"	f	typeref:typename:void
fast_update_list	db.cc	/^struct char_data* fast_update_list = 0; \/* list for fast updating *\/$/;"	v	typeref:struct:char_data *
fd	objsave.cc	/^FILE* fd;$/;"	v	typeref:typename:FILE *
ferry_boat_data	consts.cc	/^ferry_boat_type ferry_boat_data[] = {$/;"	v	typeref:typename:ferry_boat_type[]
ferry_boat_type	interpre.h	/^struct ferry_boat_type {$/;"	s
ferry_captain_data	consts.cc	/^ferry_captain_type ferry_captain_data[] = {$/;"	v	typeref:typename:ferry_captain_type[]
ferry_captain_type	interpre.h	/^struct ferry_captain_type {$/;"	s
ferry_route	interpre.h	/^    int ferry_route[100]; \/\/ where to put the ferry object$/;"	m	struct:ferry_captain_type	typeref:typename:int[100]
field	act_othe.cc	/^    char* field;$/;"	m	struct:__anonef1ab1600208	typeref:typename:char *	file:
field	act_wiz.cc	/^    char* field;$/;"	m	struct:__anon85c5388a0108	typeref:typename:char *	file:
field	mudlle.h	/^    struct target_data field[SPECIAL_STACKLEN];$/;"	m	struct:special_list	typeref:struct:target_data[]
fields	act_wiz.cc	/^} fields[] = {$/;"	v	typeref:struct:set_struct[]
fight.o	Makefile	/^fight.o	: fight.cc structs.h utils.h comm.h handler.h interpre.h db.h spells.h limits.h$/;"	t
fight_messages	db.cc	/^struct message_list fight_messages[MAX_MESSAGES]; \/* fighting messages	*\/$/;"	v	typeref:struct:message_list[]
fighting	structs.h	/^    struct char_data* fighting; \/* Opponent                             *\/$/;"	m	struct:char_special_data	typeref:struct:char_data *
file	db.h	/^    FILE* file;$/;"	m	struct:help_index_summary	typeref:typename:FILE *
file_end_pos	mail.cc	/^long file_end_pos = 0; \/* length of file *\/$/;"	v	typeref:typename:long
file_to_string	db.cc	/^int file_to_string(char* name, char* buf)$/;"	f	typeref:typename:int
file_to_string_alloc	db.cc	/^int file_to_string_alloc(char* name, char** buf)$/;"	f	typeref:typename:int
filename	boards.h	/^    char filename[50]; \/* file to save this board to *\/$/;"	m	struct:board_info_type	typeref:typename:char[50]
filename	db.h	/^    char* filename;$/;"	m	struct:help_index_summary	typeref:typename:char *
fill	interpre.cc	/^char* fill[] = {$/;"	v	typeref:typename:char * []
fill_word	interpre.cc	/^int fill_word(char* argument)$/;"	f	typeref:typename:int
find_action	act_soci.cc	/^int find_action(char* arg)$/;"	f	typeref:typename:int
find_action_old	act_soci.cc	/^int find_action_old(char* arg)$/;"	f	typeref:typename:int
find_all_dots	handler.cc	/^int find_all_dots(char* arg)$/;"	f	typeref:typename:int
find_board	boards.cc	/^board_info_type* find_board(struct char_data* ch)$/;"	f	typeref:typename:board_info_type *
find_char_in_index	mail.cc	/^find_char_in_index(char* searchee)$/;"	f	typeref:typename:mail_index_type *
find_door	act_move.cc	/^int find_door(struct char_data* ch, char* type, char* dir)$/;"	f	typeref:typename:int
find_eq_pos	act_obj2.cc	/^int find_eq_pos(struct char_data* ch, struct obj_data* obj, char* arg)$/;"	f	typeref:typename:int
find_ex_description	act_info.cc	/^char* find_ex_description(char* word, struct extra_descr_data* list)$/;"	f	typeref:typename:char *
find_first_step	graph.cc	/^int find_first_step(int src, int target)$/;"	f	typeref:typename:int
find_mob	shapemob.cc	/^int find_mob(FILE* f, int n)$/;"	f	typeref:typename:int
find_name	interpre.cc	/^int find_name(char* name)$/;"	f	typeref:typename:int
find_obj	shapeobj.cc	/^int find_obj(FILE* f, int n)$/;"	f	typeref:typename:int
find_player_in_table	utility.cc	/^int find_player_in_table(char* name, int idnum)$/;"	f	typeref:typename:int
find_playing_char	utility.cc	/^find_playing_char(int idnum)$/;"	f	typeref:struct:char_data *
find_script_by_number	script.cc	/^int find_script_by_number(int number)$/;"	f	typeref:typename:int
find_slot	boards.cc	/^int find_slot(void)$/;"	f	typeref:typename:int
find_target_room	act_wiz.cc	/^int find_target_room(struct char_data* ch, char* rawroomstr)$/;"	f	typeref:typename:int
find_zone	shapezon.cc	/^int find_zone(FILE* f, int n)$/;"	f	typeref:typename:int
fire_spec_data	structs.h	/^struct fire_spec_data : public elemental_spec_data {$/;"	s
flag_config	structs.h	/^    int flag_config;$/;"	m	struct:follower_file_elem	typeref:typename:int
flag_modify	act_othe.cc	/^int (*flag_modify)(struct char_data*, int, char**, int);$/;"	v	typeref:typename:int (*)(struct char_data *,int,char **,int)
flag_off	act_othe.cc	/^int flag_off(struct char_data* ch, int flag, char** message, int which)$/;"	f	typeref:typename:int
flag_on	act_othe.cc	/^int flag_on(struct char_data* ch, int flag, char** message, int which)$/;"	f	typeref:typename:int
flag_toggle	act_othe.cc	/^int flag_toggle(struct char_data* ch, int flag, char** message, int which)$/;"	f	typeref:typename:int
flag_void	act_othe.cc	/^int flag_void(struct char_data* ch, int flag, char** message, int which)$/;"	f	typeref:typename:int
flags	db.h	/^    long flags;$/;"	m	struct:player_index_element	typeref:typename:long
flags	protos.h	/^    sh_int flags; \/* and flags they are                   *\/$/;"	m	struct:shape_object	typeref:typename:sh_int
flags	protos.h	/^    sh_int flags; \/* and flags they are                   *\/$/;"	m	struct:shape_proto	typeref:typename:sh_int
flags	protos.h	/^    sh_int flags; \/* and flags they are                   *\/$/;"	m	struct:shape_room	typeref:typename:sh_int
flags	protos.h	/^    sh_int flags; \/* and flags they are                   *\/$/;"	m	struct:shape_zone	typeref:typename:sh_int
flags	protos.h	/^    sh_int flags;$/;"	m	struct:shape_script	typeref:typename:sh_int
flail_proc_chance	weapon_master_handler.cpp	/^    constexpr const float flail_proc_chance = 0.40f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
flg	structs.h	/^    int flg; \/* also for whatever needed, flags mostly *\/$/;"	m	struct:waiting_type	typeref:typename:int
flush_board	boards.cc	/^void board_info_type::flush_board()$/;"	f	class:board_info_type	typeref:typename:void
flush_queues	comm.cc	/^void flush_queues(struct descriptor_data* d)$/;"	f	typeref:typename:void
fname	handler.cc	/^char* fname(char* namelist)$/;"	f	typeref:typename:char *
fname_nameholder	handler.cc	/^char fname_nameholder[100];$/;"	v	typeref:typename:char[100]
fol_number	structs.h	/^    int fol_number; \/* abs_number of the follower, for safety *\/$/;"	m	struct:follow_type	typeref:typename:int
fol_vnum	structs.h	/^    int fol_vnum;$/;"	m	struct:follower_file_elem	typeref:typename:int
follow_type	structs.h	/^struct follow_type {$/;"	s
follow_type_counter	handler.cc	/^int follow_type_counter = 0;$/;"	v	typeref:typename:int
follow_type_pool	handler.cc	/^follow_type* follow_type_pool = 0;$/;"	v	typeref:typename:follow_type *
follower	structs.h	/^    struct char_data* follower;$/;"	m	struct:follow_type	typeref:struct:char_data *
follower_file_elem	structs.h	/^struct follower_file_elem {$/;"	s
followers	structs.h	/^    struct follow_type* followers; \/* List of chars followers       *\/$/;"	m	struct:char_data	typeref:struct:follow_type *
food_messages	act_info.cc	/^char* food_messages[] = {$/;"	v	typeref:typename:char * []
forget	mobact.cc	/^void forget(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
forget_crimes	db.cc	/^void forget_crimes(char_data* ch, int criminal)$/;"	f	typeref:typename:void
format	Makefile	/^format:$/;"	t
format_inventory	act_info.cc	/^    std::string format_inventory()$/;"	f	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:std::string	file:
format_string	modify.cc	/^char* format_string(char* str)$/;"	f	typeref:typename:char *
fpCommand	comm.cc	/^FILE* fpCommand; \/\/ DEBUGGING$/;"	v	typeref:typename:FILE *
fread_action	act_soci.cc	/^char* fread_action(FILE* fl, int nr)$/;"	f	typeref:typename:char *
fread_line	db.cc	/^char* fread_line(FILE* fp)$/;"	f	typeref:typename:char *
fread_string	db.cc	/^char* fread_string(FILE* fl, char* error)$/;"	f	typeref:typename:char *
free_char	db.cc	/^void free_char(struct char_data* ch)$/;"	f	typeref:typename:void
free_function	utility.cc	/^void free_function(void* pnt)$/;"	f	typeref:typename:void
free_list	mail.cc	/^position_list_type* free_list = 0; \/* list of free positions in file *\/$/;"	v	typeref:typename:position_list_type *
free_mudlle	shapemdl.cc	/^void free_mudlle(struct char_data* ch)$/;"	f	typeref:typename:void
free_obj	db.cc	/^void free_obj(struct obj_data* obj)$/;"	f	typeref:typename:void
free_object	shapeobj.cc	/^void free_object(struct char_data* ch)$/;"	f	typeref:typename:void
free_proto	shapemob.cc	/^void free_proto(struct char_data* ch)$/;"	f	typeref:typename:void
free_room	shaperom.cc	/^void free_room(struct char_data* ch)$/;"	f	typeref:typename:void
free_script	shapescript.cc	/^void free_script(struct char_data* ch)$/;"	f	typeref:typename:void
free_script_list	shapescript.cc	/^void free_script_list(script_data* root)$/;"	f	typeref:typename:void
free_zone	shapezon.cc	/^void free_zone(struct char_data* ch)$/;"	f	typeref:typename:void
freeze_level	structs.h	/^    byte freeze_level; \/* Level of god who froze char, if any	*\/$/;"	m	struct:char_special2_data	typeref:typename:byte
frenzy_effect	fight.cc	/^int frenzy_effect(char_data& attacker, int damage)$/;"	f	typeref:typename:int
from	mail.h	/^    char from[NAME_SIZE + 1]; \/* who is this letter from?		 *\/$/;"	m	struct:header_block_type_d	typeref:typename:char[]
from_list_to_pool	utility.cc	/^void from_list_to_pool(universal_list** list, universal_list** head, universal_list* body)$/;"	f	typeref:typename:void
from_room	interpre.h	/^    int from_room[100];$/;"	m	struct:ferry_boat_type	typeref:typename:int[100]
frozen_start_room	config.cc	/^int frozen_start_room = 1110;$/;"	v	typeref:typename:int
fullness	consts.cc	/^char* fullness[] = {$/;"	v	typeref:typename:char * []
funct	structs.h	/^    int (*funct)(struct char_data*, struct char_data*, int, char*,$/;"	m	struct:room_data	typeref:typename:int (*)(struct char_data *,struct char_data *,int,char *,int,waiting_type *)
gain_condition	limits.cc	/^void gain_condition(struct char_data* ch, int condition, int value)$/;"	f	typeref:typename:void
gain_exp	limits.cc	/^void gain_exp(struct char_data* ch, int gain)$/;"	f	typeref:typename:void
gain_exp_regardless	limits.cc	/^void gain_exp_regardless(char_data* character, int gain)$/;"	f	typeref:typename:void
game_loop	comm.cc	/^void game_loop(SocketType s)$/;"	f	typeref:typename:void
game_rules	big_brother.cpp	/^namespace game_rules {$/;"	n	file:
game_rules	big_brother.h	/^namespace game_rules {$/;"	n
game_rules	combat_manager.cpp	/^namespace game_rules {$/;"	n	file:
game_rules	combat_manager.h	/^namespace game_rules {$/;"	n
game_timer	skill_timer.cpp	/^namespace game_timer {$/;"	n	file:
game_timer	skill_timer.h	/^namespace game_timer {$/;"	n
game_types	delayed_command_interpreter.cpp	/^namespace game_types {$/;"	n	file:
game_types	delayed_command_interpreter.h	/^namespace game_types {$/;"	n
game_types	object_utils.cpp	/^namespace game_types {$/;"	n	file:
game_types	structs.h	/^namespace game_types {$/;"	n
game_types	wait_functions.cpp	/^namespace game_types {$/;"	n	file:
game_types	wait_functions.h	/^namespace game_types {$/;"	n
gen_receptionist	objsave.cc	/^int gen_receptionist(struct char_data* ch, int cmd, char* arg, int mode)$/;"	f	typeref:typename:int
genders	consts.cc	/^char* genders[] = {$/;"	v	typeref:typename:char * []
general_description	structs.h	/^    char* general_description; \/* When look DIR.                  *\/$/;"	m	struct:room_direction_data	typeref:typename:char *
generate_damage_message	fight.cc	/^void generate_damage_message(char_data* attacker, char_data* victim, int damage, int attacktype,/;"	f	typeref:typename:void
generate_frenzy_message	olog_hai.cpp	/^void generate_frenzy_message(char_data* character)$/;"	f	namespace:olog_hai	typeref:typename:void
generate_smash_dismount_messages	olog_hai.cpp	/^void generate_smash_dismount_messages(char_data* attacker, char_data* victim)$/;"	f	namespace:olog_hai	typeref:typename:void
generic_find	handler.cc	/^int generic_find(char* arg, int bitvector, struct char_data* ch,$/;"	f	typeref:typename:int
generic_poison	spec_ass.cc	/^struct obj_data generic_poison;$/;"	v	typeref:struct:obj_data
generic_scalp	act_obj1.cc	/^int generic_scalp = 1122;$/;"	v	typeref:typename:int
generic_water	spec_ass.cc	/^struct obj_data generic_water;$/;"	v	typeref:struct:obj_data
get_arrow_landing_location	ranger.cc	/^int get_arrow_landing_location(const room_data& room)$/;"	f	typeref:typename:int
get_attack_speed_multiplier	weapon_master_handler.cpp	/^float weapon_master_handler::get_attack_speed_multiplier() const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:float
get_attack_speed_multiplier	wild_fighting_handler.cpp	/^float wild_fighting_handler::get_attack_speed_multiplier() const$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:float
get_average_damage	structs.h	/^    float get_average_damage() const$/;"	f	class:damage_details	typeref:typename:float
get_bal_strength	char_utils.cpp	/^int get_bal_strength(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_bal_strength_d	char_utils.cpp	/^double get_bal_strength_d(const char_data& character)$/;"	f	namespace:utils	typeref:typename:double
get_base_damage_reduction	structs.h	/^    int get_base_damage_reduction() const { return obj_flags.get_base_damage_reduction(); }$/;"	f	struct:obj_data	typeref:typename:int
get_base_damage_reduction	structs.h	/^    int get_base_damage_reduction() const { return value[1]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_base_skill_damage	olog_hai.cpp	/^int get_base_skill_damage(char_data& olog_hai, int prob)$/;"	f	namespace:olog_hai	typeref:typename:int
get_bonus_OB	weapon_master_handler.cpp	/^int weapon_master_handler::get_bonus_OB() const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:int
get_bonus_PB	weapon_master_handler.cpp	/^int weapon_master_handler::get_bonus_PB() const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:int
get_bonus_hit_gain	limits.cc	/^float get_bonus_hit_gain(const char_data* character)$/;"	f	typeref:typename:float
get_bonus_mana_gain	limits.cc	/^float get_bonus_mana_gain(const char_data* character)$/;"	f	typeref:typename:float
get_bonus_move_gain	limits.cc	/^float get_bonus_move_gain(const char_data* character)$/;"	f	typeref:typename:float
get_bonus_spell_pen	battle_mage_handler.cpp	/^int battle_mage_handler::get_bonus_spell_pen(int spell_pen) const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:int
get_bonus_spell_power	battle_mage_handler.cpp	/^int battle_mage_handler::get_bonus_spell_power(int spell_power) const$/;"	f	class:player_spec::battle_mage_handler	typeref:typename:int
get_bow_weapon_damage	object_utils.cpp	/^    double get_bow_weapon_damage(const obj_data& weapon)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
get_bow_weapon_damage	utility.cc	/^int get_bow_weapon_damage(const obj_data& weapon)$/;"	f	typeref:typename:int
get_bulk	structs.h	/^    int get_bulk() const { return obj_flags.get_bulk(); }$/;"	f	struct:obj_data	typeref:typename:int
get_bulk	structs.h	/^    int get_bulk() const { return object_flag_data->value[2]; }$/;"	f	struct:weapon_flag_data	typeref:typename:int
get_bulk	structs.h	/^    int get_bulk() const { return value[2]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_capped_level	structs.h	/^    int get_capped_level() const { return std::min(get_level(), LEVEL_MAX); }$/;"	f	struct:char_data	typeref:typename:int
get_carry_item_limit	char_utils.cpp	/^int get_carry_item_limit(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_carry_weight_limit	char_utils.cpp	/^int get_carry_weight_limit(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_casting	char_utils.cpp	/^int get_casting(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_casting_level	spell_pa.cc	/^double get_casting_level(const char_data* caster, int casting_level, int casting_stat, int spec_/;"	f	namespace:__anon98d986090111	typeref:typename:double
get_char	handler.cc	/^struct char_data* get_char(char* name)$/;"	f	typeref:struct:char_data *
get_char_directory	db.cc	/^int get_char_directory(char* orig_name, char* filename)$/;"	f	typeref:typename:int
get_char_flag_line	act_info.cc	/^void get_char_flag_line(char_data* viewer, char_data* viewed, char* character_message)$/;"	f	typeref:typename:void
get_char_name	comm.cc	/^const char* get_char_name(int character_id)$/;"	f	typeref:typename:const char *
get_char_num	handler.cc	/^struct char_data* get_char_num(int nr)$/;"	f	typeref:struct:char_data *
get_char_param	script.cc	/^char_data* get_char_param(int param, info_script* info)$/;"	f	typeref:typename:char_data *
get_char_position_line	act_info.cc	/^void get_char_position_line(struct char_data* ch, struct char_data* i, char* str)$/;"	f	typeref:typename:void
get_char_room	handler.cc	/^struct char_data* get_char_room(char* name, int room)$/;"	f	typeref:struct:char_data *
get_char_room_vis	handler.cc	/^struct char_data* get_char_room_vis(struct char_data* ch, char* name, int dark_ok)$/;"	f	typeref:struct:char_data *
get_char_vis	handler.cc	/^struct char_data* get_char_vis(struct char_data* ch, char* name, int dark_ok)$/;"	f	typeref:struct:char_data *
get_character	comm.cc	/^char_data* get_character(int character_id)$/;"	f	typeref:typename:char_data *
get_character_item_weight	char_utils.cpp	/^    int get_character_item_weight(const char_data& character, const sh_int* encumb_table, int de/;"	f	namespace:utils::__anon85c32d440111	typeref:typename:int
get_character_saving_throw	spell_pa.cc	/^int get_character_saving_throw(const char_data* victim)$/;"	f	typeref:typename:int
get_check_money	act_obj1.cc	/^void get_check_money(struct char_data* ch, struct obj_data* obj)$/;"	f	typeref:typename:void
get_chill_ray_count	structs.h	/^    int get_chill_ray_count() const { return total_chill_ray_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_chill_success_percentage	structs.h	/^    double get_chill_success_percentage() const { return double(successful_chill_ray_count) \/ d/;"	f	struct:cold_spec_data	typeref:typename:double
get_colornum	color.cc	/^char get_colornum(struct char_data* ch, int col)$/;"	f	typeref:typename:char
get_combat_time	structs.h	/^    float get_combat_time() const { return elapsed_combat_seconds; }$/;"	f	class:timed_damage_details	typeref:typename:float
get_command	shapescript.cc	/^int get_command(char* command)$/;"	f	typeref:typename:int
get_con_mod	profs.cc	/^sh_int get_con_mod(int race)$/;"	f	typeref:typename:sh_int
get_condition	char_utils.cpp	/^int get_condition(const char_data& character, int index)$/;"	f	namespace:utils	typeref:typename:int
get_cone_count	structs.h	/^    int get_cone_count() const { return total_cone_of_cold_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_cone_success_percentage	structs.h	/^    double get_cone_success_percentage() const { return double(successful_cone_of_cold_count) \//;"	f	struct:cold_spec_data	typeref:typename:double
get_confuse_modifier	utility.cc	/^int get_confuse_modifier(struct char_data* ch)$/;"	f	typeref:typename:int
get_controlling_player	char_utils_combat.cpp	/^char_data* get_controlling_player(char_data* character)$/;"	f	namespace:utils	typeref:typename:char_data *
get_corpse_desc	fight.cc	/^void get_corpse_desc(struct obj_data* corpse, struct char_data* ch,$/;"	f	typeref:typename:void
get_corpse_tagged_arrows	ranger.cc	/^void get_corpse_tagged_arrows(const char_data* character, std::vector<obj_data*>& arrows)$/;"	f	typeref:typename:void
get_cur_con	structs.h	/^    int get_cur_con() const { return tmpabilities.con; }$/;"	f	struct:char_data	typeref:typename:int
get_cur_dex	structs.h	/^    int get_cur_dex() const { return tmpabilities.dex; }$/;"	f	struct:char_data	typeref:typename:int
get_cur_int	structs.h	/^    int get_cur_int() const { return tmpabilities.intel; }$/;"	f	struct:char_data	typeref:typename:int
get_cur_lea	structs.h	/^    int get_cur_lea() const { return tmpabilities.lea; }$/;"	f	struct:char_data	typeref:typename:int
get_cur_str	structs.h	/^    int get_cur_str() const { return tmpabilities.str; }$/;"	f	struct:char_data	typeref:typename:int
get_cur_wil	structs.h	/^    int get_cur_wil() const { return tmpabilities.wil; }$/;"	f	struct:char_data	typeref:typename:int
get_current_spec	structs.h	/^    game_types::player_specs get_current_spec() const { return current_spec; }$/;"	f	struct:specialization_data	typeref:typename:game_types::player_specs
get_current_time_phase	utility.cc	/^char get_current_time_phase()$/;"	f	typeref:typename:char
get_damage_message_number	fight.cc	/^int get_damage_message_number(int damage)$/;"	f	typeref:typename:int
get_damage_report	char_utils.cpp	/^std::string group_damaga_data::get_damage_report() const$/;"	f	class:group_damaga_data	typeref:typename:std::string
get_damage_report	char_utils.cpp	/^std::string player_damage_details::get_damage_report(const char_data* character) const$/;"	f	class:player_damage_details	typeref:typename:std::string
get_damage_report	structs.h	/^    std::string get_damage_report() const { return damage_report.get_damage_report(); }$/;"	f	class:group_data	typeref:typename:std::string
get_dex_mod	profs.cc	/^sh_int get_dex_mod(int race)$/;"	f	typeref:typename:sh_int
get_direction	olog_hai.cpp	/^int get_direction(std::string direction)$/;"	f	typeref:typename:int
get_dodge	structs.h	/^    int get_dodge() const { return points.dodge; }$/;"	f	struct:char_data	typeref:typename:int
get_dodge_penalty	char_utils.cpp	/^int get_dodge_penalty(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_dodge_skill_factor	char_utils_combat.cpp	/^    double get_dodge_skill_factor(const char_data& character)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
get_dps	structs.h	/^    float get_dps() const { return static_cast<float>(get_total_damage()) \/ std::max(elapsed_co/;"	f	class:timed_damage_details	typeref:typename:float
get_elapsed_seconds	clock.cpp	/^float rots_clock::get_elapsed_seconds()$/;"	f	class:rots_clock	typeref:typename:float
get_encumb_table	consts.cc	/^sh_int* get_encumb_table()$/;"	f	typeref:typename:sh_int *
get_encumbrance	char_utils.cpp	/^    int get_encumbrance(const char_data& character, const sh_int* encumb_table, int default_valu/;"	f	namespace:utils::__anon85c32d440111	typeref:typename:int
get_encumbrance	char_utils.cpp	/^int get_encumbrance(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_encumbrance_weight	char_utils.cpp	/^int get_encumbrance_weight(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_energy_regen	char_utils.cpp	/^int get_energy_regen(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_engaged_characters	char_utils_combat.cpp	/^std::vector<char_data*> get_engaged_characters(const char_data* character, const room_data& room/;"	f	namespace:utils	typeref:typename:std::vector<char_data * >
get_evasion_malus	combat_manager.cpp	/^double combat_manager::get_evasion_malus(const char_data& attacker, const char_data& victim)$/;"	f	class:game_rules::combat_manager	typeref:typename:double
get_evasion_malus	fight.cc	/^int get_evasion_malus(const char_data& attacker, const char_data& victim)$/;"	f	typeref:typename:int
get_exit_width	utility.cc	/^int get_exit_width(struct room_data* room, int dir)$/;"	f	typeref:typename:int
get_expose_spell_message	mage.cc	/^const char* get_expose_spell_message(int spell_id)$/;"	f	typeref:typename:const char *
get_followers_level	utility.cc	/^int get_followers_level(char_data* ch) \/* summ of levels of mobs\/players charmed by ch *\/$/;"	f	typeref:typename:int
get_from_affected_type_pool	handler.cc	/^struct affected_type* get_from_affected_type_pool()$/;"	f	typeref:struct:affected_type *
get_from_container	act_obj1.cc	/^void get_from_container(struct char_data* ch, struct obj_data* cont, char* arg, int mode)$/;"	f	typeref:typename:void
get_from_follow_type_pool	handler.cc	/^struct follow_type* get_from_follow_type_pool()$/;"	f	typeref:struct:follow_type *
get_from_memory_rec_pool	mobact.cc	/^get_from_memory_rec_pool()$/;"	f	typeref:struct:memory_rec *
get_from_q	comm.cc	/^int get_from_q(struct txt_q* queue, char* dest)$/;"	f	typeref:typename:int
get_from_reset_q_pool	zone.cc	/^get_from_reset_q_pool(void)$/;"	f	typeref:struct:reset_q_element *
get_from_room	act_obj1.cc	/^void get_from_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
get_from_txt_block_pool	comm.cc	/^struct txt_block* get_from_txt_block_pool(char* line)$/;"	f	typeref:struct:txt_block *
get_group_leader	structs.h	/^    char_data* get_group_leader() const { return group ? group->get_leader() : NULL; }$/;"	f	struct:char_data	typeref:typename:char_data *
get_guardian_type	consts.cc	/^int get_guardian_type(int race_number, const char_data* in_guardian_mob)$/;"	f	typeref:typename:int
get_highest_coeffs	char_utils.cpp	/^int get_highest_coeffs(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_hike_bonus	profs.cc	/^int get_hike_bonus(const char_data& character, int profession)$/;"	f	namespace:__anon2a51bc030111	typeref:typename:int
get_hit_location	combat_manager.cpp	/^    int get_hit_location(const char_data& victim)$/;"	f	namespace:game_rules::__anon35b427860111	typeref:typename:int
get_hit_location	ranger.cc	/^int get_hit_location(const char_data& victim)$/;"	f	typeref:typename:int
get_hit_text	fight.cc	/^const attack_hit_type& get_hit_text(int w_type)$/;"	f	typeref:typename:const attack_hit_type &
get_idnum	char_utils.cpp	/^long get_idnum(const char_data& character)$/;"	f	namespace:utils	typeref:typename:long
get_index	char_utils.cpp	/^int get_index(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_instance_count	structs.h	/^    int get_instance_count() const { return instance_count; }$/;"	f	class:damage_details	typeref:typename:int
get_int_mod	profs.cc	/^sh_int get_int_mod(int race)$/;"	f	typeref:typename:sh_int
get_int_param	script.cc	/^int* get_int_param(int param, info_script* info)$/;"	f	typeref:typename:int *
get_item_bulk	object_utils.cpp	/^int get_item_bulk(const obj_data& object)$/;"	f	namespace:utils	typeref:typename:int
get_item_description	act_info.cc	/^    void get_item_description(obj_data* object, std::string& working_data)$/;"	f	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:void	file:
get_item_type	object_utils.cpp	/^int get_item_type(const obj_data& object)$/;"	f	namespace:utils	typeref:typename:int
get_knowledge	char_utils.cpp	/^int get_knowledge(const char_data& character, int skill_index)$/;"	f	namespace:utils	typeref:typename:int
get_largest_damage	structs.h	/^    int get_largest_damage() const { return largest_damage; }$/;"	f	class:damage_details	typeref:typename:int
get_lea_mod	profs.cc	/^sh_int get_lea_mod(int race)$/;"	f	typeref:typename:sh_int
get_leader	structs.h	/^    struct char_data* get_leader() const { return leader; }$/;"	f	class:group_data	typeref:struct:char_data *
get_leg_encumb_table	consts.cc	/^sh_int* get_leg_encumb_table()$/;"	f	typeref:typename:sh_int *
get_leg_encumbrance	char_utils.cpp	/^int get_leg_encumbrance(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_level	structs.h	/^    int get_level() const { return level; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_level	structs.h	/^    int get_level() const { return obj_flags.get_level(); }$/;"	f	struct:obj_data	typeref:typename:int
get_level	structs.h	/^    int get_level() const { return player.level; }$/;"	f	struct:char_data	typeref:typename:int
get_level_a	char_utils.cpp	/^int get_level_a(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_level_abbr	act_info.cc	/^get_level_abbr(sh_int level, sh_int race)$/;"	f	typeref:typename:char *	file:
get_level_b	char_utils.cpp	/^int get_level_b(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_level_legend_cap	char_utils.cpp	/^int get_level_legend_cap(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_logged_in_count_message	comm.cc	/^std::string get_logged_in_count_message(descriptor_data* list)$/;"	f	typeref:typename:std::string
get_mage_caster_level	mage.cc	/^int get_mage_caster_level(const char_data* caster)$/;"	f	typeref:typename:int
get_mage_caster_level	magic.cpp	/^int get_mage_caster_level(const char_data* caster)$/;"	f	typeref:typename:int
get_mage_spec	structs.h	/^    elemental_spec_data* get_mage_spec() const$/;"	f	struct:specialization_data	typeref:typename:elemental_spec_data *
get_magic_power	mage.cc	/^int get_magic_power(const char_data* caster)$/;"	f	typeref:typename:int
get_magic_power	magic.cpp	/^int get_magic_power(const char_data* caster)$/;"	f	typeref:typename:int
get_max_con	structs.h	/^    int get_max_con() const { return abilities.con; }$/;"	f	struct:char_data	typeref:typename:int
get_max_dex	structs.h	/^    int get_max_dex() const { return abilities.dex; }$/;"	f	struct:char_data	typeref:typename:int
get_max_int	structs.h	/^    int get_max_int() const { return abilities.intel; }$/;"	f	struct:char_data	typeref:typename:int
get_max_lea	structs.h	/^    int get_max_lea() const { return abilities.lea; }$/;"	f	struct:char_data	typeref:typename:int
get_max_practice_count	char_utils.cpp	/^int char_data::get_max_practice_count() const$/;"	f	class:char_data	typeref:typename:int
get_max_race_prof_level	char_utils.cpp	/^int get_max_race_prof_level(int prof, const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_max_str	structs.h	/^    int get_max_str() const { return abilities.str; }$/;"	f	struct:char_data	typeref:typename:int
get_max_wil	structs.h	/^    int get_max_wil() const { return abilities.wil; }$/;"	f	struct:char_data	typeref:typename:int
get_mob_spell_type	spec_pro.cc	/^int get_mob_spell_type(const char_data* caster)$/;"	f	namespace:__anon89a785540111	typeref:typename:int
get_mystic_caster_level	magic.cpp	/^int get_mystic_caster_level(const char_data* caster)$/;"	f	typeref:typename:int
get_mystic_caster_level	mystic.cc	/^int get_mystic_caster_level(const char_data* caster)$/;"	f	typeref:typename:int
get_naked_perception	utility.cc	/^get_naked_perception(struct char_data* ch)$/;"	f	typeref:typename:sh_int
get_naked_willpower	utility.cc	/^get_naked_willpower(struct char_data* ch)$/;"	f	typeref:typename:sh_int
get_name	char_utils.cpp	/^const char* get_name(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
get_next_command	script.cc	/^script_data* get_next_command(script_data* curr)$/;"	f	typeref:typename:script_data *
get_number	handler.cc	/^int get_number(char** name)$/;"	f	typeref:typename:int
get_ob_bonus	char_utils_combat.cpp	/^    double get_ob_bonus(const char_data& character)$/;"	f	namespace:utils::__anon102589590211	typeref:typename:double
get_ob_coef	structs.h	/^    int get_ob_coef() const { return obj_flags.get_ob_coef(); }$/;"	f	struct:obj_data	typeref:typename:int
get_ob_coef	structs.h	/^    int get_ob_coef() const { return object_flag_data->value[0]; }$/;"	f	struct:weapon_flag_data	typeref:typename:int
get_ob_coef	structs.h	/^    int get_ob_coef() const { return value[0]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_ob_tactics_modifier	char_utils_combat.cpp	/^    double get_ob_tactics_modifier(const char_data& character, double ob_bonus, int& skill_multi/;"	f	namespace:utils::__anon102589590211	typeref:typename:double
get_ob_value	combat_manager.h	/^        double get_ob_value() { return m_ob_value; }$/;"	f	struct:game_rules::combat_manager::ob_roll	typeref:typename:double
get_obj	handler.cc	/^struct obj_data* get_obj(char* name)$/;"	f	typeref:struct:obj_data *
get_obj_in_list	handler.cc	/^struct obj_data* get_obj_in_list(char* name, struct obj_data* list)$/;"	f	typeref:struct:obj_data *
get_obj_in_list_num	handler.cc	/^struct obj_data* get_obj_in_list_num(int num, struct obj_data* list)$/;"	f	typeref:struct:obj_data *
get_obj_in_list_num_containers	handler.cc	/^struct obj_data* get_obj_in_list_num_containers(int num, struct obj_data* list)$/;"	f	typeref:struct:obj_data *
get_obj_in_list_vis	handler.cc	/^struct obj_data* get_obj_in_list_vis(struct char_data* ch, char* name,$/;"	f	typeref:struct:obj_data *
get_obj_in_list_vnum	handler.cc	/^struct obj_data* get_obj_in_list_vnum(int vnum, struct obj_data* list)$/;"	f	typeref:struct:obj_data *
get_obj_num	handler.cc	/^struct obj_data* get_obj_num(int nr)$/;"	f	typeref:struct:obj_data *
get_obj_param	script.cc	/^obj_data* get_obj_param(int param, info_script* info)$/;"	f	typeref:typename:obj_data *
get_obj_vis	handler.cc	/^struct obj_data* get_obj_vis(struct char_data* ch, char* name)$/;"	f	typeref:struct:obj_data *
get_object_in_equip_vis	handler.cc	/^struct obj_data* get_object_in_equip_vis(struct char_data* ch,$/;"	f	typeref:struct:obj_data *
get_object_name	char_utils.cpp	/^const char* get_object_name(const char_data& character, const obj_data& object,$/;"	f	namespace:utils	typeref:typename:const char *
get_object_string	char_utils.cpp	/^const char* get_object_string(const char_data& character, const obj_data& object,$/;"	f	namespace:utils	typeref:typename:const char *
get_object_weight	object_utils.cpp	/^int get_object_weight(const obj_data& object)$/;"	f	namespace:utils	typeref:typename:int
get_owner	structs.h	/^    const char_data* get_owner() const { return carried_by; }$/;"	f	struct:obj_data	typeref:typename:const char_data *
get_param_text	shapescript.cc	/^char* get_param_text(int param)$/;"	f	typeref:typename:char *
get_parameter	shapescript.cc	/^int get_parameter(char* param)$/;"	f	typeref:typename:int
get_parry_coef	structs.h	/^    int get_parry_coef() const { return obj_flags.get_parry_coef(); }$/;"	f	struct:obj_data	typeref:typename:int
get_parry_coef	structs.h	/^    int get_parry_coef() const { return object_flag_data->value[1]; }$/;"	f	struct:weapon_flag_data	typeref:typename:int
get_parry_coef	structs.h	/^    int get_parry_coef() const { return value[1]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_parry_skill_factor	char_utils_combat.cpp	/^    double get_parry_skill_factor(const char_data& character, const obj_data* weapon)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
get_pc_count	structs.h	/^    int get_pc_count() const { return pc_count; }$/;"	f	class:group_data	typeref:typename:int
get_pcs_in_room	char_utils.cpp	/^void group_data::get_pcs_in_room(char_vector& pc_vec, int room_number) const$/;"	f	class:group_data	typeref:typename:void
get_percent_absorb	act_info.cc	/^int get_percent_absorb(char_data* character)$/;"	f	typeref:typename:int
get_perception	char_utils.cpp	/^int get_perception(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_permission	shapemob.cc	/^int get_permission(int zonnum, struct char_data* ch, int mode)$/;"	f	typeref:typename:int
get_player_vis	handler.cc	/^struct char_data* get_player_vis(struct char_data* ch, char* name)$/;"	f	typeref:struct:char_data *
get_poison_duration	structs.h	/^    int get_poison_duration() const { return poisondata[0]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_poison_multipler	structs.h	/^    int get_poison_multipler() const { return poisondata[2]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_poison_strength	structs.h	/^    int get_poison_strength() const { return poisondata[1]; }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_power_of_arda	utility.cc	/^int get_power_of_arda(struct char_data* ch)$/;"	f	typeref:typename:int
get_primary_stat	profs.cc	/^RotS_Stats get_primary_stat(int class_prof)$/;"	f	namespace:_INTERNAL	typeref:typename:RotS_Stats
get_prob_skill	act_offe.cc	/^int get_prob_skill(char_data* attacker, char_data* victim, int skill)$/;"	f	typeref:typename:int
get_prob_skill	olog_hai.cpp	/^int get_prob_skill(char_data* attacker, char_data* victim, int skill)$/;"	f	namespace:olog_hai	typeref:typename:int
get_prof_abbrev	char_utils.cpp	/^const char* get_prof_abbrev(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
get_prof_coof	char_utils.cpp	/^int get_prof_coof(int prof, const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_prof_level	char_utils.cpp	/^int get_prof_level(int prof, const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_prof_name	profs.cc	/^const char* get_prof_name(int class_prof)$/;"	f	namespace:_INTERNAL	typeref:typename:const char *
get_prof_points	char_utils.cpp	/^int get_prof_points(int prof, const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_race	char_utils.cpp	/^int get_race(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_race_abbrev	char_utils.cpp	/^const char* get_race_abbrev(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
get_race_height	utility.cc	/^int get_race_height(struct char_data* ch)$/;"	f	typeref:typename:int
get_race_perception	char_utils.cpp	/^int get_race_perception(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_race_perception	utility.cc	/^get_race_perception(struct char_data* ch)$/;"	f	typeref:typename:sh_int
get_race_weight	utility.cc	/^int get_race_weight(struct char_data* ch)$/;"	f	typeref:typename:int
get_random_target	olog_hai.cpp	/^char_data* get_random_target(char_data* ch, char_data* original_victim)$/;"	f	namespace:olog_hai	typeref:typename:char_data *
get_ranger_level_multiplier	ranger.cc	/^double get_ranger_level_multiplier(int ranger_level)$/;"	f	typeref:typename:double
get_ranking_tier	char_utils.cpp	/^int get_ranking_tier(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_ranking_tier	char_utils.cpp	/^int get_ranking_tier(int ranking)$/;"	f	namespace:utils	typeref:typename:int
get_raw_knowledge	char_utils.cpp	/^int get_raw_knowledge(const char_data& character, int skill_index)$/;"	f	namespace:utils	typeref:typename:int
get_raw_skill	char_utils.cpp	/^int get_raw_skill(const char_data& character, int skill_index)$/;"	f	namespace:utils	typeref:typename:int
get_real_OB	utility.cc	/^int get_real_OB(char_data* ch)$/;"	f	typeref:typename:int
get_real_dodge	char_utils_combat.cpp	/^double get_real_dodge(const char_data& character)$/;"	f	namespace:utils	typeref:typename:double
get_real_dodge	utility.cc	/^int get_real_dodge(struct char_data* ch)$/;"	f	typeref:typename:int
get_real_npc_dodge	char_utils_combat.cpp	/^    double get_real_npc_dodge(const char_data& character)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
get_real_npc_ob	char_utils_combat.cpp	/^    double get_real_npc_ob(const char_data& character)$/;"	f	namespace:utils::__anon102589590211	typeref:typename:double
get_real_npc_parry	char_utils_combat.cpp	/^    double get_real_npc_parry(const char_data& character)$/;"	f	namespace:utils::__anon102589590111	typeref:typename:double
get_real_ob	char_utils_combat.cpp	/^double get_real_ob(const char_data& character, const weather_data& weather, const room_data& roo/;"	f	namespace:utils	typeref:typename:double
get_real_parry	char_utils_combat.cpp	/^double get_real_parry(const char_data& character, const weather_data& weather, const room_data& /;"	f	namespace:utils	typeref:typename:double
get_real_parry	utility.cc	/^int get_real_parry(struct char_data* ch)$/;"	f	typeref:typename:int
get_real_stealth	utility.cc	/^int get_real_stealth(struct char_data* ch)$/;"	f	typeref:typename:int
get_room_move_penalty	act_move.cc	/^int get_room_move_penalty(const char_data* character, int room_sector)$/;"	f	typeref:typename:int
get_room_param	script.cc	/^room_data* get_room_param(int param, info_script* info)$/;"	f	typeref:typename:room_data *
get_room_tagged_arrows	ranger.cc	/^void get_room_tagged_arrows(const char_data* character, std::vector<obj_data*>& arrows)$/;"	f	typeref:typename:void
get_rush_chance	wild_fighting_handler.cpp	/^float wild_fighting_handler::get_rush_chance() const$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:float
get_save_bonus	mage.cc	/^int get_save_bonus(const char_data& caster, const char_data& victim, game_types::player_specs pr/;"	f	typeref:typename:int
get_saved_chills	structs.h	/^    int get_saved_chills() const { return failed_chill_ray_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_saved_cones	structs.h	/^    int get_saved_cones() const { return failed_cone_of_cold_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_saving_throw_dc	spell_pa.cc	/^int get_saving_throw_dc(const char_data* caster)$/;"	f	typeref:typename:int
get_season	weather.cc	/^int get_season()$/;"	f	typeref:typename:int
get_seasonal_pressure	weather.cc	/^int get_seasonal_pressure(int month)$/;"	f	typeref:typename:int
get_shooting	char_utils.cpp	/^int get_shooting(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_skill	char_utils.cpp	/^int get_skill(const char_data& character, int skill_index)$/;"	f	namespace:utils	typeref:typename:int
get_skill_array	consts.cc	/^const skill_data* get_skill_array() { return skills; }$/;"	f	typeref:typename:const skill_data *
get_skill_name	char_utils.cpp	/^const char* get_skill_name(const int skill_id)$/;"	f	namespace:utils	typeref:typename:const char *
get_skill_penalty	char_utils.cpp	/^int get_skill_penalty(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_sky_conditions	weather.cc	/^int get_sky_conditions(int pressure)$/;"	f	typeref:typename:int
get_sort_index	act_othe.cc	/^int get_sort_index(const char* argument)$/;"	f	namespace:__anonef1ab1600111	typeref:typename:int
get_special_function	spec_ass.cc	/^special_func_ptr get_special_function(int number)$/;"	f	typeref:typename:special_func_ptr
get_specialization	char_utils.cpp	/^game_types::player_specs get_specialization(const char_data& character)$/;"	f	namespace:utils	typeref:typename:game_types::player_specs
get_spell_pen	structs.h	/^    sh_int get_spell_pen() const { return spell_pen; };$/;"	f	struct:char_point_data	typeref:typename:sh_int
get_spell_pen_value	mage.cc	/^double get_spell_pen_value(const char_data* caster)$/;"	f	typeref:typename:double
get_spell_pen_value	magic.cpp	/^double get_spell_pen_value(const char_data* caster)$/;"	f	typeref:typename:double
get_spell_power	structs.h	/^    sh_int get_spell_power() const { return spell_power; };$/;"	f	struct:char_point_data	typeref:typename:sh_int
get_spent_practice_count	char_utils.cpp	/^int char_data::get_spent_practice_count() const$/;"	f	class:char_data	typeref:typename:int
get_spirits	char_utils.cpp	/^int get_spirits(char_data* character)$/;"	f	namespace:utils	typeref:typename:int
get_stat_array	profs.cc	/^std::vector<int> get_stat_array(int num_stats, int sum_min, int sum_max, int num_tries)$/;"	f	namespace:__anon2a51bc030211	typeref:typename:std::vector<int>
get_stat_name	profs.cc	/^const char* get_stat_name(RotS_Stats stat)$/;"	f	namespace:_INTERNAL	typeref:typename:const char *
get_statsum	profs.cc	/^int get_statsum(const char_data& character)$/;"	f	namespace:__anon2a51bc030111	typeref:typename:int
get_statsum_probability_modifier	profs.cc	/^int get_statsum_probability_modifier(int current_statsum)$/;"	f	namespace:__anon2a51bc030111	typeref:typename:int
get_str_mod	profs.cc	/^sh_int get_str_mod(int race)$/;"	f	typeref:typename:sh_int
get_successful_chills	structs.h	/^    int get_successful_chills() const { return successful_chill_ray_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_successful_cones	structs.h	/^    int get_successful_cones() const { return successful_cone_of_cold_count; }$/;"	f	struct:cold_spec_data	typeref:typename:int
get_sun_level	weather.cc	/^int get_sun_level(int room)$/;"	f	typeref:typename:int
get_sun_offense_malus	char_utils_combat.cpp	/^    double get_sun_offense_malus(const char_data& character, double base_ob)$/;"	f	namespace:utils::__anon102589590211	typeref:typename:double
get_sunlight_level	weather.cc	/^int get_sunlight_level(int current_time, int sun_rise_time, int sun_set_time)$/;"	f	typeref:typename:int
get_tactics	char_utils.cpp	/^int get_tactics(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
get_tagged_arrows	ranger.cc	/^void get_tagged_arrows(const char_data* character, obj_data* obj_list, std::vector<obj_data*>& a/;"	f	typeref:typename:void
get_text	shapemob.cc	/^int get_text(FILE* f, char** line)$/;"	f	typeref:typename:int
get_text_param	script.cc	/^char* get_text_param(int param, info_script* info)$/;"	f	typeref:typename:char *
get_text_param_writable	script.cc	/^get_text_param_writable(int param, struct info_script* info)$/;"	f	typeref:typename:char **
get_total_blocked_damage	structs.h	/^    unsigned int get_total_blocked_damage() { return blocked_damage; }$/;"	f	struct:defender_data	typeref:typename:unsigned int
get_total_damage	structs.h	/^    int get_total_damage() const { return total_damage; }$/;"	f	class:damage_details	typeref:typename:int
get_total_damage	weapon_master_handler.cpp	/^int weapon_master_handler::get_total_damage(int starting_damage) const$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:int
get_total_energy_sapped	structs.h	/^    long get_total_energy_sapped() const { return total_energy_sapped; }$/;"	f	struct:cold_spec_data	typeref:typename:long
get_total_heavy_fighting_damage	structs.h	/^    unsigned int get_total_heavy_fighting_damage() { return heavy_fighting_damage; }$/;"	f	struct:heavy_fighting_data	typeref:typename:unsigned int
get_total_light_fighting_procs	structs.h	/^    unsigned int get_total_light_fighting_procs() { return light_fighting_extra_hits; }$/;"	f	struct:light_fighting_data	typeref:typename:unsigned int
get_total_rush_damage	structs.h	/^    unsigned int get_total_rush_damage() { return rush_forward_damage; }$/;"	f	struct:wild_fighting_data	typeref:typename:unsigned int
get_typemask	obj2html.cc	/^    unsigned long (*get_typemask)(struct obj_data*);$/;"	m	struct:obj2html_type	typeref:typename:unsigned long (*)(struct obj_data *)	file:
get_valid_target	big_brother.cpp	/^char_data* big_brother::get_valid_target(char_data* attacker, const char_data* victim, const cha/;"	f	class:game_rules::big_brother	typeref:typename:char_data *
get_value_ranges	act_info.cc	/^int get_value_ranges(int range, int value1, int value2,$/;"	f	typeref:typename:int
get_victim_saving_throw	mage.cc	/^double get_victim_saving_throw(const char_data* caster, const char_data* victim)$/;"	f	typeref:typename:double
get_victim_saving_throw	magic.cpp	/^double get_victim_saving_throw(const char_data* caster, const char_data* victim)$/;"	f	typeref:typename:double
get_weapon_damage	object_utils.cpp	/^double get_weapon_damage(const obj_data& weapon)$/;"	f	namespace:utils	typeref:typename:double
get_weapon_damage	utility.cc	/^int get_weapon_damage(struct obj_data* obj)$/;"	f	typeref:typename:int
get_weapon_name	object_utils.cpp	/^const char* get_weapon_name(weapon_type type)$/;"	f	namespace:game_types	typeref:typename:const char *
get_weapon_skill_type	combat_manager.cpp	/^int combat_manager::get_weapon_skill_type(const char_data& attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:int
get_weapon_type	structs.h	/^    game_types::weapon_type get_weapon_type() const { return game_types::weapon_type(object_flag/;"	f	struct:weapon_flag_data	typeref:typename:game_types::weapon_type
get_weapon_type	structs.h	/^    game_types::weapon_type get_weapon_type() const { return game_types::weapon_type(value[3]); /;"	f	struct:obj_flag_data	typeref:typename:game_types::weapon_type
get_weapon_type	structs.h	/^    game_types::weapon_type get_weapon_type() const { return obj_flags.get_weapon_type(); }$/;"	f	struct:obj_data	typeref:typename:game_types::weapon_type
get_weapon_type_modifiers	object_utils.cpp	/^    weapon_coef_mod get_weapon_type_modifiers(int weapon_type)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:weapon_coef_mod
get_weather	singleton.h	/^    const weather_data& get_weather() const { return *m_weather; }$/;"	f	class:world_singleton	typeref:typename:const weather_data &
get_weight	structs.h	/^    int get_weight() const { return obj_flags.get_weight(); }$/;"	f	struct:obj_data	typeref:typename:int
get_weight	structs.h	/^    int get_weight() const { return std::max(weight, 1); }$/;"	f	struct:obj_flag_data	typeref:typename:int
get_weight_bulk_factor	object_utils.cpp	/^    double get_weight_bulk_factor(const obj_data& weapon)$/;"	f	namespace:utils::__anon20d0bf1d0111	typeref:typename:double
get_wil_mod	profs.cc	/^sh_int get_wil_mod(int race)$/;"	f	typeref:typename:sh_int
get_wild_swing_damage_multiplier	wild_fighting_handler.cpp	/^float wild_fighting_handler::get_wild_swing_damage_multiplier() const$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:float
get_world	singleton.h	/^    const room_data* get_world() const { return m_world; }$/;"	f	class:world_singleton	typeref:typename:const room_data *
get_worn_weight	char_utils.cpp	/^int get_worn_weight(const char_data& character)$/;"	f	namespace:utils	typeref:typename:int
give_find_vict	act_obj1.cc	/^struct char_data* give_find_vict(struct char_data* ch, char* arg1)$/;"	f	typeref:struct:char_data *
give_share	act_othe.cc	/^void give_share(char_data* sender, char_data* receiver, int share_amount)$/;"	f	typeref:typename:void
global_release_flag	structs.h	/^int global_release_flag = 1;$/;"	v	typeref:typename:int
gold	structs.h	/^    int gold; \/* Money carried                           *\/$/;"	m	struct:char_point_data	typeref:typename:int
gold	structs.h	/^    int gold;$/;"	m	struct:rent_info	typeref:typename:int
good_ranking	pkill.c	/^RANKING good_ranking = { NULL, 0, 0, 0 };$/;"	v	typeref:typename:RANKING
graceful_tried	signals.cc	/^int graceful_tried = 0;$/;"	v	typeref:typename:int
graf	limits.cc	/^int graf(int age, int p0, int p1, int p2, int p3, int p4, int p5, int p6)$/;"	f	typeref:typename:int
graph.o	Makefile	/^graph.o : graph.cc structs.h utils.h comm.h interpre.h handler.h db.h \\$/;"	t
group	structs.h	/^    group_data* group; \/* The group that the character belongs to.  Can be null. *\/$/;"	m	struct:char_data	typeref:typename:group_data *
group_damaga_data	structs.h	/^    group_damaga_data()$/;"	f	class:group_damaga_data
group_damaga_data	structs.h	/^class group_damaga_data {$/;"	c
group_data	structs.h	/^    group_data(struct char_data* in_leader)$/;"	f	class:group_data
group_data	structs.h	/^class group_data {$/;"	c
group_gain	fight.cc	/^void group_gain(char_data* killer, char_data* dead_man)$/;"	f	typeref:typename:void
guardian_mob	consts.cc	/^int guardian_mob[MAX_RACES][3] = {$/;"	v	typeref:typename:int[][3]
guildmaster_number	consts.cc	/^char guildmaster_number = 61;$/;"	v	typeref:typename:char
guildmasters	consts.cc	/^struct skill_teach_data guildmasters[] = {$/;"	v	typeref:struct:skill_teach_data[]
half_chop	interpre.cc	/^void half_chop(char* string, char* arg1, char* arg2)$/;"	f	typeref:typename:void
handbook	db.cc	/^char* handbook = 0; \/* handbook for new immortals	*\/$/;"	v	typeref:typename:char *
handed_keywords	obj2html.cc	/^char* handed_keywords[][3] = {$/;"	v	typeref:typename:char * [][3]
handed_typemask	obj2html.cc	/^handed_typemask(struct obj_data* o)$/;"	f	typeref:typename:unsigned long
handler.o	Makefile	/^handler.o : handler.cc structs.h utils.h comm.h db.h handler.h interpre.h$/;"	t
harad_skill_calculate_save	ranger.cc	/^int harad_skill_calculate_save(char_data* ch, char_data* victim, int skill_check)$/;"	f	typeref:typename:int
has_already	shop.cc	/^int has_already(struct obj_data* item, int shop_nr)$/;"	f	typeref:typename:int
has_argument	act_othe.cc	/^bool has_argument(const char* argument)$/;"	f	namespace:__anonef1ab1600111	typeref:typename:bool
has_bonus_attack_speed	wild_fighting_handler.cpp	/^bool wild_fighting_handler::has_bonus_attack_speed() const$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:bool
has_critical_stat_damage	utility.cc	/^int has_critical_stat_damage(struct char_data* ch)$/;"	f	typeref:typename:int
has_key	act_move.cc	/^obj_data* has_key(char_data* character, int key)$/;"	f	typeref:typename:obj_data *
has_mail	mail.cc	/^int has_mail(char* recipient)$/;"	f	typeref:typename:int
he_or_she	char_utils.cpp	/^const char* he_or_she(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
head	mudlle.h	/^    signed char head;$/;"	m	struct:special_list	typeref:typename:signed char
head	structs.h	/^    struct txt_block* head;$/;"	m	struct:txt_q	typeref:struct:txt_block *
head	zone.cc	/^    struct reset_q_element* head;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_element *	file:
header_block_type	mail.h	/^typedef struct header_block_type_d header_block_type;$/;"	t	typeref:struct:header_block_type_d
header_block_type_d	mail.h	/^struct header_block_type_d {$/;"	s
heading	boards.h	/^    char* heading; \/* pointer to message's heading *\/$/;"	m	struct:board_msginfo	typeref:typename:char *
heading_len	boards.h	/^    int heading_len; \/* size of header (for file write) *\/$/;"	m	struct:board_msginfo	typeref:typename:int
health_diagnose	consts.cc	/^struct prompt_type health_diagnose[] = {$/;"	v	typeref:struct:prompt_type[]
health_percentage	warrior_spec_handlers.h	/^    float health_percentage = 0.0f;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:float
health_regen	structs.h	/^    int health_regen = 0; \/* bonus health regen from spells etc. *\/$/;"	m	struct:char_point_data	typeref:typename:int
heavy_fighting_damage	structs.h	/^    unsigned int heavy_fighting_damage;$/;"	m	struct:heavy_fighting_data	typeref:typename:unsigned int
heavy_fighting_data	structs.h	/^    heavy_fighting_data()$/;"	f	struct:heavy_fighting_data
heavy_fighting_data	structs.h	/^struct heavy_fighting_data : public specialization_info {$/;"	s
heavy_fighting_effect	fight.cc	/^int heavy_fighting_effect(char_data& attacker, int damage)$/;"	f	typeref:typename:int
heavy_fighting_encumb_table	char_utils.cpp	/^    const int heavy_fighting_encumb_table[MAX_WEAR] = {$/;"	v	namespace:utils::__anon85c32d440111	typeref:typename:const int[]
heavy_fighting_weight_table	char_utils.cpp	/^    const int heavy_fighting_weight_table[MAX_WEAR] = {$/;"	v	namespace:utils::__anon85c32d440111	typeref:typename:const int[]
height	structs.h	/^    int height; \/* PC \/ NPC s height                    	*\/$/;"	m	struct:char_player_data	typeref:typename:int
height	structs.h	/^    int height;$/;"	m	struct:char_file_u	typeref:typename:int
help	db.cc	/^char* help = 0; \/* help screen			*\/$/;"	v	typeref:typename:char *
help_content	consts.cc	/^struct help_index_summary help_content[] = {$/;"	v	typeref:struct:help_index_summary[]
help_fl	db.cc	/^FILE* help_fl = 0; \/* file for help text		*\/$/;"	v	typeref:typename:FILE *
help_index	db.cc	/^struct help_index_element* help_index = 0; \/* the help table		*\/$/;"	v	typeref:struct:help_index_element *
help_index_element	db.h	/^struct help_index_element {$/;"	s
help_index_summary	db.h	/^struct help_index_summary {$/;"	s
help_summary_length	consts.cc	/^int help_summary_length = 8;$/;"	v	typeref:typename:int
hide	db.h	/^    int hide;$/;"	m	struct:social_messg	typeref:typename:int
hide_flags	structs.h	/^    int hide_flags; \/* flag set for hide info *\/$/;"	m	struct:char_special2_data	typeref:typename:int
hide_prof	ranger.cc	/^int hide_prof(struct char_data* hider)$/;"	f	typeref:typename:int
hide_value	structs.h	/^    byte hide_value; \/* how good you are hidden, if at all *\/$/;"	m	struct:char_special_data	typeref:typename:byte
him_or_her	char_utils.cpp	/^const char* him_or_her(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
his_or_her	char_utils.cpp	/^const char* his_or_her(const char_data& character)$/;"	f	namespace:utils	typeref:typename:const char *
hit	fight.cc	/^void hit(char_data* ch, char_data* victim, int type)$/;"	f	typeref:typename:void
hit	structs.h	/^    int hit;$/;"	m	struct:char_ability_data	typeref:typename:int
hit_gain	limits.cc	/^float hit_gain(const char_data* character)$/;"	f	typeref:typename:float
hit_msg	structs.h	/^    struct msg_type hit_msg; \/* messages when hit			*\/$/;"	m	struct:message_type	typeref:struct:msg_type
hometown	structs.h	/^    int hometown; \/* PC s Hometown (zone)                 	*\/$/;"	m	struct:char_player_data	typeref:typename:int
hometown	structs.h	/^    sh_int hometown;$/;"	m	struct:char_file_u	typeref:typename:sh_int
homezone	structs.h	/^    int homezone; \/* zone where it was loaded *\/$/;"	m	struct:char_special_data	typeref:typename:int
host	protos.h	/^    int* host; \/\/  Whether the script is for char, obj or room _data - the structure calling t/;"	m	struct:script_head	typeref:typename:int *
host	structs.h	/^    char host[50]; \/* hostname				*\/$/;"	m	struct:descriptor_data	typeref:typename:char[50]
host	structs.h	/^    char host[HOST_LEN + 1]; \/* host of last logon *\/$/;"	m	struct:char_file_u	typeref:typename:char[]
hours	structs.h	/^    byte hours, day, month, moon;$/;"	m	struct:time_info_data	typeref:typename:byte
how_good	spec_pro.cc	/^char* how_good(int percent)$/;"	f	typeref:typename:char *
html_message_line	boards.cc	/^static char html_message_line[MAX_STRING_LENGTH + 200];$/;"	v	typeref:typename:char[]	file:
hunt_victim	graph.cc	/^void hunt_victim(struct char_data* ch)$/;"	f	typeref:typename:void
hunting	structs.h	/^    struct char_data* hunting; \/* Hunting person..                     *\/$/;"	m	struct:char_special_data	typeref:struct:char_data *
hupsig	signals.cc	/^void hupsig(int fake)$/;"	f	typeref:typename:void
iCommands	comm.cc	/^int iCommands = 0;$/;"	v	typeref:typename:int
iIntParam	db.h	/^    int iIntParam; \/* reserved *\/$/;"	m	struct:exploit_record	typeref:typename:int
iKillerLevel	db.h	/^    int iKillerLevel; \/* at time of kill *\/$/;"	m	struct:exploit_record	typeref:typename:int
iVictimLevel	db.h	/^    int iVictimLevel; \/* at time of kill *\/$/;"	m	struct:exploit_record	typeref:typename:int
id	structs.h	/^    long id;$/;"	m	struct:memory_rec	typeref:typename:long
idnum	db.h	/^    int idnum;$/;"	m	struct:player_index_element	typeref:typename:int
idnum	structs.h	/^    long idnum; \/* player's idnum			*\/$/;"	m	struct:char_special2_data	typeref:typename:long
if_flag	db.h	/^    int if_flag; \/* if TRUE: exe only if preceding exe'd *\/$/;"	m	struct:reset_com	typeref:typename:int
ignores_armor	weapon_master_handler.cpp	/^bool weapon_master_handler::ignores_armor(char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:bool
ignores_shields	weapon_master_handler.cpp	/^bool weapon_master_handler::ignores_shields(char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:bool
imm_abbrevs	consts.cc	/^char* imm_abbrevs[] = {$/;"	v	typeref:typename:char * []
imm_only	db.h	/^    char imm_only;$/;"	m	struct:help_index_summary	typeref:typename:char
immlist	db.cc	/^char* immlist = 0; \/* list of peon gods		*\/$/;"	v	typeref:typename:char *
immort_start_room	config.cc	/^int immort_start_room = 1101;$/;"	v	typeref:typename:int
imotd	db.cc	/^char* imotd = 0; \/* message of the day - immorts *\/$/;"	v	typeref:typename:char *
implement_mudlle	shapemdl.cc	/^void implement_mudlle(struct char_data* ch)$/;"	f	typeref:typename:void
implement_object	shapeobj.cc	/^void implement_object(struct char_data* ch)$/;"	f	typeref:typename:void
implement_proto	shapemob.cc	/^void implement_proto(struct char_data* ch)$/;"	f	typeref:typename:void
implement_room	shaperom.cc	/^void implement_room(struct char_data* ch)$/;"	f	typeref:typename:void
implement_script	shapescript.cc	/^void implement_script(struct char_data* ch)$/;"	f	typeref:typename:void
implement_zone	shapezon.cc	/^void implement_zone(struct char_data* ch)$/;"	f	typeref:typename:void
in_affected_list	handler.cc	/^int in_affected_list(struct char_data* ch)$/;"	f	typeref:typename:int
in_obj	structs.h	/^    struct obj_data* in_obj; \/* In what object NULL when none    *\/$/;"	m	struct:obj_data	typeref:struct:obj_data *
in_room	shop.cc	/^    int in_room; \/* Where is the shop?			*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
in_room	structs.h	/^    int in_room; \/* In what room -1 when conta\/carr  *\/$/;"	m	struct:obj_data	typeref:typename:int
in_room	structs.h	/^    int in_room; \/* Location                      *\/$/;"	m	struct:char_data	typeref:typename:int
in_waiting_list	comm.cc	/^int in_waiting_list(struct char_data* ch)$/;"	f	typeref:typename:int
in_waiting_list	wait_functions.cpp	/^bool wait_list::in_waiting_list(char_data* character)$/;"	f	class:game_types::wait_list	typeref:typename:bool
inc_p_table	db.cc	/^void inc_p_table(void)$/;"	f	typeref:typename:void
index	db.h	/^    struct help_index_element* index;$/;"	m	struct:help_index_summary	typeref:struct:help_index_element *
index	protos.h	/^    int index; \/\/  Index number in the script_table of this script$/;"	m	struct:info_script	typeref:typename:int
index_boot	db.cc	/^void index_boot(int mode)$/;"	f	typeref:typename:void
index_data	db.h	/^struct index_data {$/;"	s
index_mail	mail.cc	/^void index_mail(char* raw_name_to_index, long pos)$/;"	f	typeref:typename:void
index_pos	protos.h	/^    int index_pos; \/\/  Position in the script_table (-1 if not present)$/;"	m	struct:shape_script	typeref:typename:int
info	db.cc	/^char* info = 0; \/* info page			*\/$/;"	v	typeref:typename:char *
info_script	protos.h	/^struct info_script { \/\/  The structure which each char\/obj\/zon will have if it has a script.$/;"	s
init_boards	boards.cc	/^void init_boards(void)$/;"	f	typeref:typename:void
init_char	db.cc	/^void init_char(struct char_data* ch)$/;"	f	typeref:typename:void
init_socket	comm.cc	/^SocketType init_socket(sh_int port)$/;"	f	typeref:typename:SocketType
initialiaze_small_map	db.cc	/^void initialiaze_small_map()$/;"	f	typeref:typename:void
initialise_script_info_char	script.cc	/^void initialise_script_info_char(char_data* ch, int index)$/;"	f	typeref:typename:void
initialise_script_info_obj	script.cc	/^void initialise_script_info_obj(obj_data* obj, int index)$/;"	f	typeref:typename:void
initialize_buffers	utility.cc	/^void initialize_buffers()$/;"	f	typeref:typename:void
initialize_weather	weather.cc	/^void initialize_weather()$/;"	f	typeref:typename:void
input	structs.h	/^    struct txt_q input; \/* q of unprocessed input		*\/$/;"	m	struct:descriptor_data	typeref:struct:txt_q
instance	combat_manager.h	/^    static combat_manager& instance()$/;"	f	class:game_rules::combat_manager	typeref:typename:combat_manager &
instance	singleton.h	/^    static T& instance()$/;"	f	class:singleton	typeref:typename:T &
instance	singleton.h	/^    static T& instance()$/;"	f	class:world_singleton	typeref:typename:T &
instance	wait_functions.h	/^    static wait_list& instance()$/;"	f	class:game_types::wait_list	typeref:typename:wait_list &
instance_count	structs.h	/^    int instance_count;$/;"	m	class:damage_details	typeref:typename:int
int_0ary_op	script.cc	/^int int_0ary_op(struct info_script* info, int command)$/;"	f	typeref:typename:int
int_binary_op	script.cc	/^int int_binary_op(struct info_script* info, int command, int* a, int* b)$/;"	f	typeref:typename:int
int_fromstack	mudlle.cc	/^void int_fromstack(struct char_data* host, char* arg, int cmd,$/;"	f	typeref:typename:void
int_itemtostring	mudlle2.cc	/^void int_itemtostring(struct char_data* host)$/;"	f	typeref:typename:void
int_tolist	mudlle.cc	/^void int_tolist(struct char_data* host, struct char_data* ch, char* cmdline,$/;"	f	typeref:typename:void
int_tostack	mudlle.cc	/^void int_tostack(struct char_data* host, char* arg, int cmd,$/;"	f	typeref:typename:void
int_unary_op	script.cc	/^int int_unary_op(struct info_script* info, int command, int* a)$/;"	f	typeref:typename:int
intel	structs.h	/^    signed char intel;$/;"	m	struct:char_ability_data	typeref:typename:signed char
interpre.o	Makefile	/^interpre.o : interpre.cc structs.h comm.h interpre.h db.h utils.h \\$/;"	t
introduce_char	interpre.cc	/^void introduce_char(struct descriptor_data* d)$/;"	f	typeref:typename:void
ints	protos.h	/^    int ints[3]; \/\/  Variables$/;"	m	struct:info_script	typeref:typename:int[3]
inv_sorting	act_othe.cc	/^std::array<std::string_view, 4> inv_sorting = { "default", "grouped", "alpha", "length" };$/;"	v	typeref:typename:std::array<std::string_view,4>
invalid	pkill.h	/^    int invalid; \/* Non-zero means this leader was invalid *\/$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
invalid_list	ban.cc	/^char** invalid_list = NULL;$/;"	v	typeref:typename:char **
inventory_data	act_info.cc	/^    inventory_data()$/;"	f	struct:__anon131f9bdc0111::inventory_data	file:
inventory_data	act_info.cc	/^struct inventory_data {$/;"	s	namespace:__anon131f9bdc0111	file:
inventory_data_sort_alphabetically	act_info.cc	/^struct inventory_data_sort_alphabetically {$/;"	s	namespace:__anon131f9bdc0111	file:
inventory_data_sort_by_length	act_info.cc	/^struct inventory_data_sort_by_length {$/;"	s	namespace:__anon131f9bdc0111	file:
inventory_formatter	act_info.cc	/^    inventory_formatter(obj_data* root_object, char_data* character)$/;"	f	class:__anon131f9bdc0111::inventory_formatter	file:
inventory_formatter	act_info.cc	/^class inventory_formatter {$/;"	c	namespace:__anon131f9bdc0111	file:
invis_level	structs.h	/^    int invis_level; \/* level of invisibility		       *\/$/;"	m	struct:char_special_data	typeref:typename:int
is_abbrev	interpre.cc	/^int is_abbrev(char* arg1, char* arg2)$/;"	f	typeref:typename:int
is_affected	char_utils.cpp	/^bool char_data::is_affected() const$/;"	f	class:char_data	typeref:typename:bool
is_affected_by	char_utils.cpp	/^bool is_affected_by(const char_data& character, long skill_id)$/;"	f	namespace:utils	typeref:typename:bool
is_affected_by_spell	char_utils.cpp	/^affected_type* is_affected_by_spell(char_data& character, int skill_id)$/;"	f	namespace:utils	typeref:typename:affected_type *
is_artifact	object_utils.cpp	/^bool is_artifact(const obj_data& object)$/;"	f	namespace:utils	typeref:typename:bool
is_awake	char_utils.cpp	/^bool is_awake(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_battle_spec	warrior_spec_handlers.h	/^    bool is_battle_spec = false;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:bool
is_bite_targ_valid	act_offe.cc	/^char_data* is_bite_targ_valid(char_data* biter, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_blocking	structs.h	/^    bool is_blocking;$/;"	m	struct:defender_data	typeref:typename:bool
is_chain	structs.h	/^    bool is_chain() const { return material == 3; }$/;"	f	struct:obj_flag_data	typeref:typename:bool
is_changed	boards.h	/^    byte is_changed;$/;"	m	struct:board_info_type	typeref:typename:byte
is_cloth	structs.h	/^    bool is_cloth() const { return material == 1; }$/;"	f	struct:obj_flag_data	typeref:typename:bool
is_corpse	act_obj1.cc	/^bool is_corpse(obj_data* container)$/;"	f	typeref:typename:bool
is_corpse_protected	big_brother.cpp	/^bool big_brother::is_corpse_protected(const char_data* looter, obj_data* corpse) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_crit	combat_manager.h	/^        bool is_crit() { return m_is_crit; }$/;"	f	struct:game_rules::combat_manager::ob_roll	typeref:typename:bool
is_dark	environment_utils.cpp	/^bool is_dark(const room_data& room, const weather_data& weather)$/;"	f	namespace:utils	typeref:typename:bool
is_direction_valid	olog_hai.cpp	/^bool is_direction_valid(char_data* ch, int cmd)$/;"	f	typeref:typename:bool
is_empty	zone.cc	/^int is_empty(int zone_nr)$/;"	f	typeref:typename:int
is_engaged_with_victim	spec_pro.cc	/^bool is_engaged_with_victim(const char_data* character, const char_data* victim)$/;"	f	namespace:__anon89a785540111	typeref:typename:bool
is_evil	char_utils.cpp	/^bool is_evil(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_evil_race	char_utils.cpp	/^bool is_evil_race(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_fast	spells.h	/^    byte is_fast; \/* non-zero if fast-updating skill *\/$/;"	m	struct:skill_data	typeref:typename:byte
is_frenzy_active	fight.cc	/^bool is_frenzy_active(char_data& attacker)$/;"	f	typeref:typename:bool
is_frenzying	structs.h	/^    bool is_frenzying;$/;"	m	struct:wild_fighting_data	typeref:typename:bool
is_friendly_taget	mage.cc	/^bool is_friendly_taget(const char_data* caster, const char_data* victim)$/;"	f	typeref:typename:bool
is_good	char_utils.cpp	/^bool is_good(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_guardian	char_utils.cpp	/^bool is_guardian(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_hit_accurate	combat_manager.cpp	/^bool combat_manager::is_hit_accurate(const char_data& attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:bool
is_hostile_to	char_utils.cpp	/^bool is_hostile_to(const char_data& character, const char_data& victim)$/;"	f	namespace:utils	typeref:typename:bool
is_int_param_writable	script.cc	/^int is_int_param_writable(int param)$/;"	f	typeref:typename:int
is_key	act_move.cc	/^bool is_key(obj_data* item)$/;"	f	typeref:typename:bool
is_killer_pc	big_brother.h	/^        bool is_killer_pc;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:bool
is_leader	structs.h	/^    bool is_leader(struct char_data* character) const { return character == leader; }$/;"	f	class:group_data	typeref:typename:bool
is_leather	structs.h	/^    bool is_leather() const { return material == 2; }$/;"	f	struct:obj_flag_data	typeref:typename:bool
is_legend	structs.h	/^    bool is_legend() const { return player.level >= LEVEL_MAX; }$/;"	f	struct:char_data	typeref:typename:bool
is_level_range_appropriate	big_brother.cpp	/^bool big_brother::is_level_range_appropriate(const char_data* attacker, const char_data* victim)/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_light	environment_utils.cpp	/^bool is_light(const room_data& room, const weather_data& weather)$/;"	f	namespace:utils	typeref:typename:bool
is_mage_spec	structs.h	/^    bool is_mage_spec() const$/;"	f	struct:specialization_data	typeref:typename:bool
is_maul_targ_valid	act_offe.cc	/^char_data* is_maul_targ_valid(char_data* mauler, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_member	char_utils.cpp	/^bool group_data::is_member(struct char_data* character) const$/;"	f	class:group_data	typeref:typename:bool
is_mental	char_utils.cpp	/^bool is_mental(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_mental_stat	clerics.cc	/^bool is_mental_stat(int stat_num)$/;"	f	namespace:__anon63d8ba7e0111	typeref:typename:bool
is_metal	structs.h	/^    bool is_metal() const { return material == 4; }$/;"	f	struct:obj_flag_data	typeref:typename:bool
is_mob	char_utils.cpp	/^bool is_mob(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_mob_flagged	char_utils.cpp	/^bool is_mob_flagged(const char_data& mob, long flag)$/;"	f	namespace:utils	typeref:typename:bool
is_neutral	char_utils.cpp	/^bool is_neutral(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_npc	big_brother.h	/^        bool is_npc;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:bool
is_npc	char_utils.cpp	/^bool is_npc(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_null_or_empty	char_utils.cpp	/^bool is_null_or_empty(const char* a) { return !a || a[0] == '\\0'; }$/;"	f	namespace:string_func	typeref:typename:bool
is_number	interpre.cc	/^int is_number(char* str)$/;"	f	typeref:typename:int
is_object_stat	object_utils.cpp	/^bool is_object_stat(const obj_data& object, int stat)$/;"	f	namespace:utils	typeref:typename:bool
is_ok	shop.cc	/^int is_ok(struct char_data* keeper, struct char_data* ch, int shop_nr)$/;"	f	typeref:typename:int
is_open	shop.cc	/^    char is_open;$/;"	m	struct:shop_data	typeref:typename:char	file:
is_pc	char_utils.cpp	/^bool is_pc(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_player_flagged	char_utils.cpp	/^bool is_player_flagged(const char_data& character, long flag)$/;"	f	namespace:utils	typeref:typename:bool
is_player_mode_on	char_utils.cpp	/^bool is_player_mode_on(const char_data& character, long flag)$/;"	f	namespace:utils	typeref:typename:bool
is_preference_flagged	char_utils.cpp	/^bool is_preference_flagged(const char_data& character, long flag)$/;"	f	namespace:utils	typeref:typename:bool
is_quiver	object_utils.cpp	/^bool obj_data::is_quiver() const$/;"	f	class:obj_data	typeref:typename:bool
is_race_easterling	char_utils.cpp	/^bool is_race_easterling(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_race_easterling	char_utils.cpp	/^bool is_race_easterling(int race)$/;"	f	namespace:utils	typeref:typename:bool
is_race_evil	char_utils.cpp	/^bool is_race_evil(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_race_evil	char_utils.cpp	/^bool is_race_evil(int race)$/;"	f	namespace:utils	typeref:typename:bool
is_race_good	char_utils.cpp	/^bool is_race_good(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_race_good	char_utils.cpp	/^bool is_race_good(int race)$/;"	f	namespace:utils	typeref:typename:bool
is_race_haradrim	char_utils.cpp	/^bool is_race_haradrim(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_race_haradrim	char_utils.cpp	/^bool is_race_haradrim(int race)$/;"	f	namespace:utils	typeref:typename:bool
is_race_magi	char_utils.cpp	/^bool is_race_magi(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_race_magi	char_utils.cpp	/^bool is_race_magi(int race)$/;"	f	namespace:utils	typeref:typename:bool
is_ranged_weapon	object_utils.cpp	/^bool obj_data::is_ranged_weapon() const$/;"	f	class:obj_data	typeref:typename:bool
is_rank_valid	limits.cc	/^bool is_rank_valid(int ranking)$/;"	f	typeref:typename:bool
is_rend_targ_valid	act_offe.cc	/^char_data* is_rend_targ_valid(char_data* render, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_resistant	char_utils.cpp	/^bool is_resistant(const char_data& character, int attack_group)$/;"	f	namespace:utils	typeref:typename:bool
is_retired	char_utils.cpp	/^bool is_retired(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_ridden	char_utils.cpp	/^bool is_ridden(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_riding	char_utils.cpp	/^bool is_riding(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_room_outside	environment_utils.cpp	/^bool is_room_outside(const room_data& room)$/;"	f	namespace:utils	typeref:typename:bool
is_room_sunlit	environment_utils.cpp	/^bool is_room_sunlit(const weather_data& weather, const room_data& room)$/;"	f	namespace:utils	typeref:typename:bool
is_rp_race_check	char_utils.cpp	/^bool is_rp_race_check(const char_data& character, const char_data& victim)$/;"	f	namespace:utils	typeref:typename:bool
is_same_side_race_war	big_brother.cpp	/^bool big_brother::is_same_side_race_war(int attacker_race, int victim_race) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_set	base_utils.h	/^bool is_set(T flag, T bit)$/;"	f	namespace:utils	typeref:typename:bool
is_shadow	char_utils.cpp	/^bool is_shadow(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_shadowy_exit	environment_utils.cpp	/^bool is_shadowy_exit(const room_data& current_room, const room_data& adjacent_room, int door_ind/;"	f	namespace:utils	typeref:typename:bool
is_skill_allowed	skill_timer.cpp	/^bool skill_timer::is_skill_allowed(const char_data& ch, const int skill_id)$/;"	f	class:game_timer::skill_timer	typeref:typename:bool
is_skill_offensive	big_brother.cpp	/^bool big_brother::is_skill_offensive(int skill_id) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_skill_valid	olog_hai.cpp	/^bool is_skill_valid(char_data* ch, const int& skill_id)$/;"	f	namespace:olog_hai	typeref:typename:bool
is_smash_target_valid	olog_hai.cpp	/^char_data* is_smash_target_valid(char_data* attacker, waiting_type* target)$/;"	f	namespace:olog_hai	typeref:typename:char_data *
is_social	interpre.h	/^    byte is_social;$/;"	m	struct:command_info	typeref:typename:byte
is_stat_critical	clerics.cc	/^bool is_stat_critical(const char_data* victim)$/;"	f	typeref:typename:bool
is_strong_enough_to_tame	ranger.cc	/^bool is_strong_enough_to_tame(char_data* tamer, char_data* animal, bool include_current_follower/;"	f	typeref:typename:bool
is_sunlit_exit	environment_utils.cpp	/^bool is_sunlit_exit(const weather_data& weather, const room_data& current_room, const room_data&/;"	f	namespace:utils	typeref:typename:bool
is_targ_blind_valid	ranger.cc	/^char_data* is_targ_blind_valid(char_data* ch, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_targ_valid	ranger.cc	/^char_data* is_targ_valid(char_data* archer, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_targ_valid_mark	ranger.cc	/^char_data* is_targ_valid_mark(char_data* marker, waiting_type* target)$/;"	f	typeref:typename:char_data *
is_target_afk	big_brother.cpp	/^bool big_brother::is_target_afk(const char_data* victim) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_target_in_room	olog_hai.cpp	/^bool is_target_in_room(char_data* attacker, char_data* victim)$/;"	f	namespace:olog_hai	typeref:typename:bool
is_target_looting	big_brother.cpp	/^bool big_brother::is_target_looting(const char_data* victim) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_target_valid	big_brother.cpp	/^bool big_brother::is_target_valid(char_data* attacker, const char_data* victim) const$/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_target_valid	big_brother.cpp	/^bool big_brother::is_target_valid(char_data* attacker, const char_data* victim, int skill_id) co/;"	f	class:game_rules::big_brother	typeref:typename:bool
is_target_valid	olog_hai.cpp	/^char_data* is_target_valid(char_data* attacker, waiting_type* target)$/;"	f	namespace:olog_hai	typeref:typename:char_data *
is_twohanded	char_utils.cpp	/^bool is_twohanded(const char_data& character)$/;"	f	namespace:utils	typeref:typename:bool
is_valid_subcommand	ranger.cc	/^bool is_valid_subcommand(char_data& character, int sub_command, const waiting_type* wtl)$/;"	f	typeref:typename:bool
is_victim_around	fight.cc	/^bool is_victim_around(const char_data* character)$/;"	f	typeref:typename:bool
is_victim_player	char_utils_combat.cpp	/^bool is_victim_player(const char_data* victim)$/;"	f	namespace:utils	typeref:typename:bool
is_vulnerable	char_utils.cpp	/^bool is_vulnerable(const char_data& character, int attack_group)$/;"	f	namespace:utils	typeref:typename:bool
is_water_room	environment_utils.cpp	/^bool is_water_room(const room_data& room)$/;"	f	namespace:utils	typeref:typename:bool
is_weapon_poisoned	structs.h	/^    bool is_weapon_poisoned() const { return poisoned; }$/;"	f	struct:obj_flag_data	typeref:typename:bool
is_wearable	object_utils.cpp	/^bool obj_flag_data::is_wearable() const$/;"	f	class:obj_flag_data	typeref:typename:bool
is_wearable	structs.h	/^    bool is_wearable() const { return obj_flags.is_wearable(); }$/;"	f	struct:obj_data	typeref:typename:bool
isbanned	ban.cc	/^int isbanned(char* hostname)$/;"	f	typeref:typename:int
isname	handler.cc	/^int isname(const char* str, const char* namelist, char full)$/;"	f	typeref:typename:int
item_messages	act_info.cc	/^char* item_messages[] = {$/;"	v	typeref:typename:char * []
item_number	structs.h	/^    int item_number; \/* Where in data-base               *\/$/;"	m	struct:obj_data	typeref:typename:int
item_number	structs.h	/^    int item_number; \/\/ this used to be spare2, but we needed more item numbers.$/;"	m	struct:obj_file_elem	typeref:typename:int
item_number_deprecated	structs.h	/^    sh_int item_number_deprecated; \/\/ this used to be the ID number, but it wasn't big enough.$/;"	m	struct:obj_file_elem	typeref:typename:sh_int
item_typemask	obj2html.cc	/^item_typemask(struct obj_data* o)$/;"	f	typeref:typename:unsigned long
item_types	consts.cc	/^char* item_types[] = {$/;"	v	typeref:typename:char * []
iter	big_brother.cpp	/^    typedef character_id_set::iterator iter;$/;"	t	function:game_rules::big_brother::remove_character_from_looting_set	typeref:typename:character_id_set::iterator	file:
iter	big_brother.cpp	/^    typedef character_set::iterator iter;$/;"	t	function:game_rules::big_brother::remove_character_from_afk_set	typeref:typename:character_set::iterator	file:
iter	big_brother.cpp	/^    typedef corpse_map::const_iterator iter;$/;"	t	function:game_rules::big_brother::is_corpse_protected	typeref:typename:corpse_map::const_iterator	file:
iter	big_brother.cpp	/^    typedef corpse_map::iterator iter;$/;"	t	function:game_rules::big_brother::on_loot_item	typeref:typename:corpse_map::iterator	file:
iter	ranger.cc	/^    typedef std::vector<char_data*>::iterator iter;$/;"	t	function:change_arrow_target	typeref:typename:std::vector<char_data * >::iterator	file:
iter	ranger.cc	/^    typedef std::vector<obj_data*>::iterator iter;$/;"	t	function:do_recover	typeref:typename:std::vector<obj_data * >::iterator	file:
judpavailable	db.cc	/^int judpavailable; \/\/ 1 if JUDP is available, 0 otherwise$/;"	v	typeref:typename:int
judppwd	db.cc	/^long judppwd; \/\/ password for JUDP IP registration$/;"	v	typeref:typename:long
keeper	shop.cc	/^    int keeper; \/* The mobil who owns the shop (virtual)*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
key	structs.h	/^    int key; \/* Key's number (-1 for no key)    *\/$/;"	m	struct:room_direction_data	typeref:typename:int
keyword	db.h	/^    char* keyword;$/;"	m	struct:help_index_element	typeref:typename:char *
keyword	db.h	/^    char* keyword;$/;"	m	struct:help_index_summary	typeref:typename:char *
keyword	structs.h	/^    char keyword[20];$/;"	m	struct:alias_list	typeref:typename:char[20]
keyword	structs.h	/^    char* keyword; \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data	typeref:typename:char *
keyword	structs.h	/^    char* keyword; \/* for open\/close                  *\/$/;"	m	struct:room_direction_data	typeref:typename:char *
keyword_matches_char	handler.cc	/^int keyword_matches_char(struct char_data* ch, struct char_data* vict, char* keyword)$/;"	f	typeref:typename:int
keywords	act_info.cc	/^char* keywords[] = {$/;"	v	typeref:typename:char * []
keywords	obj2html.cc	/^    char** keywords;$/;"	m	struct:obj2html_type	typeref:typename:char **	file:
kill_time	pkill.h	/^    int kill_time;$/;"	m	struct:__anonb27b44b70108	typeref:typename:int
killer	pkill.h	/^    int killer;$/;"	m	struct:__anonb27b44b70108	typeref:typename:int
killer_id	big_brother.h	/^        int killer_id;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:int
killer_level	pkill.h	/^    unsigned char killer_level;$/;"	m	struct:__anonb27b44b70108	typeref:typename:unsigned char
killer_points	pkill.h	/^    int killer_points;$/;"	m	struct:__anonb27b44b70108	typeref:typename:int
kit_eq	spec_pro.cc	/^struct kit_item kit_eq[] = {$/;"	v	typeref:struct:kit_item[]
kit_item	spec_pro.cc	/^struct kit_item {$/;"	s	file:
kit_item_num	spec_pro.cc	/^int kit_item_num = sizeof(kit_eq) \/ sizeof(kit_item);$/;"	v	typeref:typename:int
know_of_crime	db.cc	/^int know_of_crime(int criminal, int victim, int witness)$/;"	f	typeref:typename:int
knowledge	spells.h	/^    byte knowledge[MAX_SKILLS];$/;"	m	struct:skill_teach_data	typeref:typename:byte[]
knowledge	structs.h	/^    byte knowledge[MAX_SKILLS];$/;"	m	struct:player_skill_data	typeref:typename:byte[]
knowledge	structs.h	/^    byte* knowledge; \/* array of knowledge, computed from$/;"	m	struct:char_data	typeref:typename:byte *
language	structs.h	/^    byte language; \/* the lang he's presently speaking      *\/$/;"	m	struct:char_player_data	typeref:typename:byte
language	structs.h	/^    byte language;$/;"	m	struct:char_file_u	typeref:typename:byte
language_number	consts.cc	/^byte language_number = 3;$/;"	v	typeref:typename:byte
language_skills	consts.cc	/^byte language_skills[] = {$/;"	v	typeref:typename:byte[]
large_outbuf	structs.h	/^    struct txt_block* large_outbuf; \/* ptr to large buffer, if we need it *\/$/;"	m	struct:descriptor_data	typeref:struct:txt_block *
largest_damage	structs.h	/^    int largest_damage;$/;"	m	class:damage_details	typeref:typename:int
last_block_time	structs.h	/^    time_t last_block_time;$/;"	m	struct:defender_data	typeref:typename:time_t
last_control_set	handler.cc	/^long last_control_set = -1;$/;"	v	typeref:typename:long
last_desc	comm.cc	/^int last_desc = 0; \/* last unique num assigned to a desc. *\/$/;"	v	typeref:typename:int
last_direction	structs.h	/^    signed char last_direction; \/* The last direction the monster went     *\/$/;"	m	struct:char_special_data	typeref:typename:signed char
last_input	structs.h	/^    char last_input[MAX_INPUT_LENGTH]; \/* the last input			*\/$/;"	m	struct:descriptor_data	typeref:typename:char[]
last_input_time	structs.h	/^    time_t last_input_time; \/* time(0) of last_input               *\/$/;"	m	struct:descriptor_data	typeref:typename:time_t
last_logon	structs.h	/^    time_t last_logon; \/* Time (in secs) of last logon *\/$/;"	m	struct:char_file_u	typeref:typename:time_t
last_message	boards.h	/^    int last_message; \/* max number of the message written so far *\/$/;"	m	struct:board_info_type	typeref:typename:int
last_time	fight.cc	/^timeval last_time;$/;"	v	namespace:__anon286ec0cb0211	typeref:typename:timeval
lastdeath	db.cc	/^char* lastdeath = 0; \/* policies page		*\/$/;"	v	typeref:typename:char *
lea	structs.h	/^    signed char lea;$/;"	m	struct:char_ability_data	typeref:typename:signed char
leader	structs.h	/^    struct char_data* leader;$/;"	m	class:group_data	typeref:struct:char_data *
learn_diff	spells.h	/^    int learn_diff; \/* difficulty *\/$/;"	m	struct:skill_data	typeref:typename:int
learn_type	spells.h	/^    char learn_type; \/* If the skill is spec only set to 65 otherwise 1  *\/$/;"	m	struct:skill_data	typeref:typename:char
learned_message	spells.h	/^    char* learned_message;$/;"	m	struct:skill_teach_data	typeref:typename:char *
leave_to_inside	interpre.h	/^    char leave_to_inside[255]; \/\/ $o - for the ferry$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
leave_to_outside	interpre.h	/^    char leave_to_outside[255]; \/\/ $n stands for the captain,$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
leg_encumb	structs.h	/^    int leg_encumb; \/* how encumbered is char for movement\/dodging? *\/$/;"	m	struct:char_special2_data	typeref:typename:int
leg_encumb_table	consts.cc	/^sh_int leg_encumb_table[MAX_WEAR] = {$/;"	v	typeref:typename:sh_int[]
len_str	structs.h	/^    unsigned int len_str; \/* present length of *str               *\/$/;"	m	struct:descriptor_data	typeref:typename:unsigned int
length	interpre.h	/^    int length; \/\/ route length$/;"	m	struct:ferry_captain_type	typeref:typename:int
length	interpre.h	/^    int length;$/;"	m	struct:ferry_boat_type	typeref:typename:int
length	modify.cc	/^unsigned int length[] = {$/;"	v	typeref:typename:unsigned int[]
letter	structs.h	/^    char letter;$/;"	m	struct:prof_type	typeref:typename:char
level	act_wiz.cc	/^        char level;$/;"	m	struct:ACMD::show_struct	typeref:typename:char	file:
level	act_wiz.cc	/^    char level;$/;"	m	struct:set_struct	typeref:typename:char	file:
level	boards.h	/^    int level; \/* level of poster *\/$/;"	m	struct:board_msginfo	typeref:typename:int
level	db.h	/^    sh_int level;$/;"	m	struct:player_index_element	typeref:typename:sh_int
level	protos.h	/^    int x, y, level;$/;"	m	struct:shape_zone	typeref:typename:int
level	spec_pro.cc	/^    int level; \/* The highest level that this object will load for *\/$/;"	m	struct:kit_item	typeref:typename:int	file:
level	spells.h	/^    char level;$/;"	m	struct:skill_data	typeref:typename:char
level	structs.h	/^    byte level;$/;"	m	struct:char_file_u	typeref:typename:byte
level	structs.h	/^    byte level;$/;"	m	struct:room_data	typeref:typename:byte
level	structs.h	/^    int level; \/* PC \/ NPC s level                     	*\/$/;"	m	struct:char_player_data	typeref:typename:int
level	structs.h	/^    ubyte level; \/* level of an item (not to correspond to character's*\/$/;"	m	struct:obj_flag_data	typeref:typename:ubyte
level	zone.h	/^    int level;$/;"	m	struct:zone_data	typeref:typename:int
lifespan	protos.h	/^    int lifespan;$/;"	m	struct:shape_zone	typeref:typename:int
lifespan	zone.h	/^    int lifespan; \/* how long between resets (minutes)  *\/$/;"	m	struct:zone_data	typeref:typename:int
light	structs.h	/^    byte light; \/* Number of lightsources in room     *\/$/;"	m	struct:room_data	typeref:typename:byte
light_fighting_data	structs.h	/^    light_fighting_data()$/;"	f	struct:light_fighting_data
light_fighting_data	structs.h	/^struct light_fighting_data : public specialization_info {$/;"	s
light_fighting_encumb_table	char_utils.cpp	/^    const int light_fighting_encumb_table[MAX_WEAR] = {$/;"	v	namespace:utils::__anon85c32d440111	typeref:typename:const int[]
light_fighting_extra_hits	structs.h	/^    unsigned int light_fighting_extra_hits;$/;"	m	struct:light_fighting_data	typeref:typename:unsigned int
light_fighting_weight_table	char_utils.cpp	/^    const int light_fighting_weight_table[MAX_WEAR] = {$/;"	v	namespace:utils::__anon85c32d440111	typeref:typename:const int[]
light_messages	act_info.cc	/^char* light_messages[] = {$/;"	v	typeref:typename:char * []
lightning_spec_data	structs.h	/^struct lightning_spec_data : public elemental_spec_data {$/;"	s
limit_message	spells.h	/^    char* limit_message;$/;"	m	struct:skill_teach_data	typeref:typename:char *
limits.o	Makefile	/^limits.o : limits.cc structs.h limits.h utils.h spells.h comm.h db.h handler.h          profs.h$/;"	t
list_char_to_char	act_info.cc	/^void list_char_to_char(struct char_data* list, struct char_data* ch, int mode)$/;"	f	typeref:typename:void
list_field	mudlle.h	/^union list_field {$/;"	u
list_help	shapemob.cc	/^void list_help(struct char_data* ch)$/;"	f	typeref:typename:void
list_help_obj	shapeobj.cc	/^void list_help_obj(struct char_data* ch)$/;"	f	typeref:typename:void
list_help_room	shaperom.cc	/^void list_help_room(struct char_data* ch)$/;"	f	typeref:typename:void
list_help_script	shapescript.cc	/^void list_help_script(struct char_data* ch)$/;"	f	typeref:typename:void
list_help_zone	shapezon.cc	/^void list_help_zone(struct char_data* ch)$/;"	f	typeref:typename:void
list_message	spells.h	/^    char* list_message;$/;"	m	struct:skill_teach_data	typeref:typename:char *
list_obj_to_char	act_info.cc	/^void list_obj_to_char(obj_data* list, char_data* ch, int mode, bool show)$/;"	f	typeref:typename:void
list_object	shapeobj.cc	/^void list_object(struct char_data* ch, struct obj_data* obj)$/;"	f	typeref:typename:void
list_proto	shapemob.cc	/^void list_proto(struct char_data* ch, struct char_data* mob)$/;"	f	typeref:typename:void
list_room	shaperom.cc	/^void list_room(struct char_data* ch, struct room_data* mob)$/;"	f	typeref:typename:void
list_script	shapescript.cc	/^void list_script(struct char_data* ch)$/;"	f	typeref:typename:void
list_simple_help	shapemob.cc	/^void list_simple_help(struct char_data* ch)$/;"	f	typeref:typename:void
list_simple_proto	shapemob.cc	/^void list_simple_proto(struct char_data* ch, struct char_data* mob)$/;"	f	typeref:typename:void
list_start	mail.h	/^    position_list_type* list_start; \/* list of mail positions    *\/$/;"	m	struct:mail_index_type_d	typeref:typename:position_list_type *
list_zone	shapezon.cc	/^void list_zone(struct char_data* ch)$/;"	f	typeref:typename:void
lnum	boards.h	/^    byte lnum; \/* local number, should be 0 ... N *\/$/;"	m	struct:board_info_type	typeref:typename:byte
load_banned	ban.cc	/^void load_banned(void)$/;"	f	typeref:typename:void
load_board	boards.cc	/^void board_info_type::load_board()$/;"	f	class:board_info_type	typeref:typename:void
load_char	db.cc	/^int load_char(char* name, struct char_file_u* char_element)$/;"	f	typeref:typename:int
load_character	objsave.cc	/^void load_character(struct char_data* ch)$/;"	f	typeref:typename:void
load_line	structs.h	/^    int load_line; \/* the line in zone that loaded the mob *\/$/;"	m	struct:char_special_data	typeref:typename:int
load_messages	fight.cc	/^void load_messages(void)$/;"	f	typeref:typename:void
load_mobiles	db.cc	/^void load_mobiles(FILE* mob_f)$/;"	f	typeref:typename:void
load_mudlle	db.cc	/^void load_mudlle(FILE* fp)$/;"	f	typeref:typename:void
load_mudlle	shapemdl.cc	/^int load_mudlle(char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_object	shapeobj.cc	/^int load_object(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_objects	db.cc	/^void load_objects(FILE* obj_f)$/;"	f	typeref:typename:void
load_player	db.cc	/^int load_player(char* name, struct char_file_u* char_element)$/;"	f	typeref:typename:int
load_proto	shapemob.cc	/^int load_proto(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_room	shaperom.cc	/^int load_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_room	structs.h	/^    int load_room; \/* Which room to place char in		*\/$/;"	m	struct:char_special2_data	typeref:typename:int
load_rooms	db.cc	/^void load_rooms(FILE* fl)$/;"	f	typeref:typename:void
load_scalp	act_obj1.cc	/^obj_data* load_scalp(int number)$/;"	f	typeref:typename:obj_data *
load_script	shapescript.cc	/^int load_script(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_scripts	db.cc	/^void load_scripts(FILE* fl)$/;"	f	typeref:typename:void
load_zone	shapezon.cc	/^int load_zone(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
load_zones	zone.cc	/^void load_zones(FILE* fl)$/;"	f	typeref:typename:void
loaded_by	structs.h	/^    int loaded_by; \/* idnum of immortal who loaded the object (else 0) *\/$/;"	m	struct:obj_data	typeref:typename:int
loaded_by	structs.h	/^    int loaded_by; \/\/ idnum of immortal who loaded object.  0 if loaded by a zone command etc.$/;"	m	struct:obj_file_elem	typeref:typename:int
localtime	structs.h	/^#define localtime(/;"	d
location	structs.h	/^    byte location; \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type	typeref:typename:byte
location	structs.h	/^    sh_int location; \/* Tells which ability to change(APPLY_XXX)*\/$/;"	m	struct:affected_type	typeref:typename:sh_int
loclife_add_rooms	mage.cc	/^int loclife_add_rooms(loclife_coord room, loclife_coord* roomlist,$/;"	f	typeref:typename:int
loclife_coord	mage.cc	/^struct loclife_coord {$/;"	s	file:
loclife_dir_convert	mage.cc	/^char* loclife_dir_convert(loclife_coord rm)$/;"	f	typeref:typename:char *
loclife_dirnames	mage.cc	/^const char* loclife_dirnames[216] = {$/;"	v	typeref:typename:const char * [216]
log	utility.cc	/^void log(const char* str)$/;"	f	typeref:typename:void
log_death_trap	utility.cc	/^void log_death_trap(struct char_data* ch)$/;"	f	typeref:typename:void
log_item_looted	big_brother.cpp	/^void big_brother::log_item_looted(const char_data* looter, corpse_map::iterator& corpse_iter, ob/;"	f	class:game_rules::big_brother	typeref:typename:void
log_time	db.h	/^    time_t log_time;$/;"	m	struct:player_index_element	typeref:typename:time_t
login_time	structs.h	/^    long login_time; \/* when the person connected		*\/$/;"	m	struct:descriptor_data	typeref:typename:long
logon	structs.h	/^    time_t logon; \/* Time of the last logon (used to calculate played) *\/$/;"	m	struct:time_data	typeref:typename:time_t
logsig	signals.cc	/^void logsig(int fake)$/;"	f	typeref:typename:void
logtypes	act_othe.cc	/^char* logtypes[] = {$/;"	v	typeref:typename:char * []
long_descr	structs.h	/^    char* long_descr; \/* for 'look'.. Only here for testing   	*\/$/;"	m	struct:char_player_data	typeref:typename:char *
m_afk_characters	big_brother.h	/^    character_set m_afk_characters;$/;"	m	class:game_rules::big_brother	typeref:typename:character_set
m_bDestroyed	combat_manager.h	/^    static bool m_bDestroyed;$/;"	m	class:game_rules::combat_manager	typeref:typename:bool
m_bDestroyed	singleton.h	/^    static bool m_bDestroyed;$/;"	m	class:singleton	typeref:typename:bool
m_bDestroyed	singleton.h	/^    static bool m_bDestroyed;$/;"	m	class:world_singleton	typeref:typename:bool
m_bDestroyed	wait_functions.h	/^    static bool m_bDestroyed;$/;"	m	class:game_types::wait_list	typeref:typename:bool
m_can_be_helpful_skills	big_brother.h	/^    skill_id_set m_can_be_helpful_skills;$/;"	m	class:game_rules::big_brother	typeref:typename:skill_id_set
m_character	act_info.cc	/^    char_data* m_character;$/;"	m	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:char_data *	file:
m_character	delayed_command_interpreter.h	/^    char_data* m_character;$/;"	m	class:game_types::delayed_command_interpreter	typeref:typename:char_data *
m_character	profs.cc	/^    char_data& m_character;$/;"	m	struct:_INTERNAL::stat_assigner	typeref:typename:char_data &	file:
m_corpse_map	big_brother.h	/^    corpse_map m_corpse_map;$/;"	m	class:game_rules::big_brother	typeref:typename:corpse_map
m_harmful_skills	big_brother.h	/^    skill_id_set m_harmful_skills;$/;"	m	class:game_rules::big_brother	typeref:typename:skill_id_set
m_is_crit	combat_manager.h	/^        bool m_is_crit;$/;"	m	struct:game_rules::combat_manager::ob_roll	typeref:typename:bool
m_last_engaged_pk_time	big_brother.h	/^    time_map m_last_engaged_pk_time;$/;"	m	class:game_rules::big_brother	typeref:typename:time_map
m_looting_characters	big_brother.h	/^    character_id_set m_looting_characters;$/;"	m	class:game_rules::big_brother	typeref:typename:character_id_set
m_ob_value	combat_manager.h	/^        double m_ob_value;$/;"	m	struct:game_rules::combat_manager::ob_roll	typeref:typename:double
m_pInstance	big_brother.cpp	/^game_rules::big_brother* world_singleton<game_rules::big_brother>::m_pInstance(0);$/;"	m	class:world_singleton<game_rules::big_brother>	typeref:typename:game_rules::big_brother *
m_pInstance	combat_manager.cpp	/^combat_manager* combat_manager::m_pInstance(0);$/;"	m	class:game_rules::combat_manager	typeref:typename:combat_manager *
m_pInstance	combat_manager.h	/^    static combat_manager* m_pInstance;$/;"	m	class:game_rules::combat_manager	typeref:typename:combat_manager *
m_pInstance	singleton.h	/^    static T* m_pInstance;$/;"	m	class:singleton	typeref:typename:T *
m_pInstance	singleton.h	/^    static T* m_pInstance;$/;"	m	class:world_singleton	typeref:typename:T *
m_pInstance	skill_timer.cpp	/^game_timer::skill_timer* world_singleton<game_timer::skill_timer>::m_pInstance(0);$/;"	m	class:world_singleton<game_timer::skill_timer>	typeref:typename:game_timer::skill_timer *
m_pInstance	wait_functions.h	/^    static wait_list* m_pInstance;$/;"	m	class:game_types::wait_list	typeref:typename:wait_list *
m_pendingDeletes	wait_functions.h	/^    delete_list_type m_pendingDeletes;$/;"	m	class:game_types::wait_list	typeref:typename:delete_list_type
m_root_object	act_info.cc	/^    obj_data* m_root_object;$/;"	m	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:obj_data *	file:
m_seen_items	act_info.cc	/^    std::vector<inventory_data> m_seen_items;$/;"	m	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:std::vector<inventory_data>	file:
m_skill_timer	skill_timer.h	/^    std::vector<skill_data> m_skill_timer;$/;"	m	class:game_timer::skill_timer	typeref:typename:std::vector<skill_data>
m_stat_order	profs.cc	/^    RotS_Stats m_stat_order[NUM_STATS];$/;"	m	struct:_INTERNAL::stat_assigner	typeref:typename:RotS_Stats[]	file:
m_waitingList	wait_functions.h	/^    wait_list_type m_waitingList;$/;"	m	class:game_types::wait_list	typeref:typename:wait_list_type
m_weather	combat_manager.h	/^    const weather_data& m_weather;$/;"	m	class:game_rules::combat_manager	typeref:typename:const weather_data &
m_weather	singleton.h	/^    const weather_data* m_weather;$/;"	m	class:world_singleton	typeref:typename:const weather_data *
m_working_data	act_info.cc	/^    std::string m_working_data;$/;"	m	class:__anon131f9bdc0111::inventory_formatter	typeref:typename:std::string	file:
m_world	combat_manager.h	/^    const room_data* m_world;$/;"	m	class:game_rules::combat_manager	typeref:typename:const room_data *
m_world	singleton.h	/^    const room_data* m_world;$/;"	m	class:world_singleton	typeref:typename:const room_data *
mag_affects	magic.cpp	/^void mag_affects(int level, struct char_data* caster, struct char_data* victim,$/;"	f	typeref:typename:void
mag_damage	magic.cpp	/^int mag_damage(int level, struct char_data* caster, struct char_data* victim, int spellnum, int /;"	f	typeref:typename:int
mag_groups	magic.cpp	/^void mag_groups(int level, struct char_data* caster, int spellnum, int savetype)$/;"	f	typeref:typename:void
mag_masses	magic.cpp	/^void mag_masses(int level, struct char_data* caster, int spellnum, int savetype)$/;"	f	typeref:typename:void
mage.o	Makefile	/^mage.o  : mage.cc structs.h utils.h comm.h spells.h handler.h limits.h \\$/;"	t
mage_level	warrior_spec_handlers.h	/^    int mage_level = 0;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:int
magi_power	zone.h	/^    int white_power, dark_power, magi_power; \/* power of races present *\/$/;"	m	struct:zone_data	typeref:typename:int
magic	magic.h	/^namespace magic {$/;"	n
mail.o	Makefile	/^mail.o    : mail.cc structs.h utils.h comm.h interpre.h db.h handler.h$/;"	t
mail_board	boards.cc	/^struct mail_info_type* mail_board;$/;"	v	typeref:struct:mail_info_type *
mail_index	mail.cc	/^mail_index_type* mail_index = 0; \/* list of recs in the mail file  *\/$/;"	v	typeref:typename:mail_index_type *
mail_index_type	mail.h	/^typedef struct mail_index_type_d mail_index_type;$/;"	t	typeref:struct:mail_index_type_d
mail_index_type_d	mail.h	/^struct mail_index_type_d {$/;"	s
mail_info_type	boards.cc	/^mail_info_type::mail_info_type(int objnum, int l_read, int l_write, int l_rem,$/;"	f	class:mail_info_type
mail_info_type	boards.h	/^struct mail_info_type : board_info_type {$/;"	s
mail_ok	mail.cc	/^int mail_ok(struct char_data* ch)$/;"	f	typeref:typename:int
mail_time	mail.h	/^    long mail_time; \/* when was the letter mailed?		 *\/$/;"	m	struct:header_block_type_d	typeref:typename:long
main	comm.cc	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
make_corpse	fight.cc	/^obj_data* make_corpse(char_data* character, char_data* killer, int attack_type)$/;"	f	typeref:typename:obj_data *
make_physical_corpse	fight.cc	/^obj_data* make_physical_corpse(char_data* character, char_data* killer, int attack_type)$/;"	f	typeref:typename:obj_data *
mana	structs.h	/^    sh_int mana;$/;"	m	struct:char_ability_data	typeref:typename:sh_int
mana_gain	limits.cc	/^float mana_gain(const char_data* character)$/;"	f	typeref:typename:float
mana_regen	structs.h	/^    int mana_regen = 0; \/* bonus mana regen from gear\/spells\/etc.  can be negative *\/$/;"	m	struct:char_point_data	typeref:typename:int
map	zone.h	/^    char* map;$/;"	m	struct:zone_data	typeref:typename:char *
map_iter	big_brother.cpp	/^    typedef corpse_map::iterator map_iter;$/;"	t	function:game_rules::big_brother::on_corpse_decayed	typeref:typename:corpse_map::iterator	file:
map_iter	big_brother.cpp	/^    typedef time_map::iterator map_iter;$/;"	t	function:game_rules::big_brother::on_character_afked	typeref:typename:time_map::iterator	file:
map_iter	big_brother.cpp	/^    typedef time_map::iterator map_iter;$/;"	t	function:game_rules::big_brother::on_character_disconnected	typeref:typename:time_map::iterator	file:
map_iter	char_utils.cpp	/^    typedef std::map<char_data*, timed_damage_details>::const_iterator map_iter;$/;"	t	function:group_damaga_data::get_damage_report	typeref:typename:std::map<char_data *,timed_damage_details>::const_iterator	file:
map_iter	char_utils.cpp	/^    typedef std::map<int, damage_details>::const_iterator map_iter;$/;"	t	function:player_damage_details::get_damage_report	typeref:typename:std::map<int,damage_details>::const_iterator	file:
mark_calculate_damage	ranger.cc	/^int mark_calculate_damage(char_data* marker, char_data* victim)$/;"	f	typeref:typename:int
mark_calculate_duration	ranger.cc	/^int mark_calculate_duration(char_data* marker)$/;"	f	typeref:typename:int
mark_calculate_success	ranger.cc	/^int mark_calculate_success(char_data* marker, char_data* victim)$/;"	f	typeref:typename:int
mark_calculate_wait	ranger.cc	/^int mark_calculate_wait(const char_data* marker)$/;"	f	typeref:typename:int
marker	interpre.h	/^    int marker;$/;"	m	struct:ferry_captain_type	typeref:typename:int
mask	interpre.h	/^    unsigned char mask;$/;"	m	struct:command_info	typeref:typename:unsigned char
mask	protos.h	/^    struct reset_com mask; \/* for masked listing *\/$/;"	m	struct:shape_zone	typeref:struct:reset_com
master	structs.h	/^    struct char_data* master; \/* Who is char following?        *\/$/;"	m	struct:char_data	typeref:struct:char_data *
master_gets_credit	fight.cc	/^bool master_gets_credit(const char_data* character)$/;"	f	namespace:__anon286ec0cb0111	typeref:typename:bool
master_number	structs.h	/^    int master_number;$/;"	m	struct:char_data	typeref:typename:int
material	shop.cc	/^    int material; \/* bitvector: materials the shop will buy. 0 = all *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
material	structs.h	/^    signed char material; \/* what is it made of               *\/$/;"	m	struct:obj_flag_data	typeref:typename:signed char
material_messages	act_info.cc	/^char* material_messages[] = {$/;"	v	typeref:typename:char * []
maul_calculate_duration	act_offe.cc	/^int maul_calculate_duration(char_data* mauler)$/;"	f	typeref:typename:int
maul_damage_reduction	fight.cc	/^int maul_damage_reduction(char_data* ch, int damage)$/;"	f	typeref:typename:int
max_health	warrior_spec_handlers.h	/^    int max_health = 0;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:int
max_mini_level	structs.h	/^    int max_mini_level;$/;"	m	struct:char_special2_data	typeref:typename:int
max_npc_corpse_time	config.cc	/^int max_npc_corpse_time = 10;$/;"	v	typeref:typename:int
max_num_items_looted	big_brother.h	/^        int max_num_items_looted;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:int
max_of_msgs	boards.h	/^    int max_of_msgs;$/;"	m	struct:board_info_type	typeref:typename:int
max_pc_corpse_time	config.cc	/^int max_pc_corpse_time = 45;$/;"	v	typeref:typename:int
max_race_align	consts.cc	/^int max_race_align[MAX_RACES] = {$/;"	v	typeref:typename:int[]
max_race_str	consts.cc	/^int max_race_str[MAX_RACES] = {$/;"	v	typeref:typename:int[]
max_str	structs.h	/^    unsigned int max_str; \/*  allocated length of *str		*\/$/;"	m	struct:descriptor_data	typeref:typename:unsigned int
max_value	modify.cc	/^int max_value[] = {$/;"	v	typeref:typename:int[]
maxdesc	comm.cc	/^SocketType maxdesc; \/* highest desc num used *\/$/;"	v	typeref:typename:SocketType
members	structs.h	/^    char_vector members;$/;"	m	class:group_data	typeref:typename:char_vector
memory	structs.h	/^    struct memory_rec* memory; \/* List of attackers to remember *\/$/;"	m	struct:char_special_data	typeref:struct:memory_rec *
memory_rec	structs.h	/^struct memory_rec {$/;"	s
memory_rec_active	mobact.cc	/^struct memory_rec* memory_rec_active = 0;$/;"	v	typeref:struct:memory_rec *
memory_rec_counter	mobact.cc	/^int memory_rec_counter = 0;$/;"	v	typeref:typename:int
memory_rec_pool	mobact.cc	/^struct memory_rec* memory_rec_pool = 0;$/;"	v	typeref:struct:memory_rec *
mental_delay	structs.h	/^    int mental_delay;$/;"	m	struct:char_special_data	typeref:typename:int
message	structs.h	/^    char* message;$/;"	m	struct:prompt_type	typeref:typename:char *
message_buy	shop.cc	/^    char* message_buy; \/* Message when player buys item        *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
message_len	boards.h	/^    int message_len; \/* size of message text (for file write) *\/$/;"	m	struct:board_msginfo	typeref:typename:int
message_list	structs.h	/^struct message_list {$/;"	s
message_sell	shop.cc	/^    char* message_sell; \/* Message when player sells item       *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
message_type	structs.h	/^struct message_type {$/;"	s
min_actor_position	db.h	/^    int min_actor_position; \/* Position of victim *\/$/;"	m	struct:social_messg	typeref:typename:int
min_level	act_wiz.cc	/^    int min_level;$/;"	m	struct:__anon85c5388a0108	typeref:typename:int	file:
min_level_look	zone.h	/^    int min_level_look; \/* minimum level required for zone map etc *\/$/;"	m	struct:zone_data	typeref:typename:int
min_race_align	consts.cc	/^int min_race_align[MAX_RACES] = {$/;"	v	typeref:typename:int[]
min_usesmana	spells.h	/^    int min_usesmana; \/* Amount of mana used by a spell *\/$/;"	m	struct:skill_data	typeref:typename:int
min_victim_position	db.h	/^    int min_victim_position; \/* Position of victim *\/$/;"	m	struct:social_messg	typeref:typename:int
min_wizlist_lev	config.cc	/^int min_wizlist_lev = LEVEL_GOD;$/;"	v	typeref:typename:int
mini_level	structs.h	/^    int mini_level;$/;"	m	struct:char_special2_data	typeref:typename:int
mini_mud	db.cc	/^int mini_mud = 0; \/* mini-mud mode?		*\/$/;"	v	typeref:typename:int
minimum_level	interpre.h	/^    sh_int minimum_level;$/;"	m	struct:command_info	typeref:typename:sh_int
minimum_position	interpre.h	/^    byte minimum_position;$/;"	m	struct:command_info	typeref:typename:byte
minimum_position	spells.h	/^    byte minimum_position; \/* Position for caster *\/$/;"	m	struct:skill_data	typeref:typename:byte
miss_msg	structs.h	/^    struct msg_type miss_msg; \/* messages when miss			*\/$/;"	m	struct:message_type	typeref:struct:msg_type
missing_cash1	shop.cc	/^    char* missing_cash1; \/* Message if keeper hasn't got cash    *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
missing_cash2	shop.cc	/^    char* missing_cash2; \/* Message if player hasn't got cash    *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
mob_index	db.cc	/^struct index_data* mob_index; \/* index table for mobile file	*\/$/;"	v	typeref:struct:index_data *
mob_proto	db.cc	/^struct char_data* mob_proto; \/* prototypes for mobs		*\/$/;"	v	typeref:struct:char_data *
mobact.o	Makefile	/^mobact.o : mobact.cc utils.h structs.h db.h comm.h interpre.h handler.h$/;"	t
mobile_activity	mobact.cc	/^void mobile_activity(void)$/;"	f	typeref:typename:void
mobile_master_idnum	config.cc	/^int mobile_master_idnum = 51566; \/\/Raziel$/;"	v	typeref:typename:int
mobile_program	db.cc	/^char** mobile_program;$/;"	v	typeref:typename:char **
mobile_program_base	consts.cc	/^char* mobile_program_base[] = {$/;"	v	typeref:typename:char * []
mobile_program_zone	db.cc	/^int* mobile_program_zone;$/;"	v	typeref:typename:int *
mode	protos.h	/^    char mode; \/* 'N', 'M', or whatthehell is this mob *\/$/;"	m	struct:shape_proto	typeref:typename:char
modifier	structs.h	/^    int modifier; \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type	typeref:typename:int
modifier	structs.h	/^    sh_int modifier; \/* This is added to apropriate ability     *\/$/;"	m	struct:affected_type	typeref:typename:sh_int
modify.o	Makefile	/^modify.o : modify.cc structs.h utils.h interpre.h handler.h db.h comm.h$/;"	t
modify_affects	handler.cc	/^void modify_affects(char_data* character, int modify_flag)$/;"	f	typeref:typename:void
money_message	handler.cc	/^char* money_message(int sum, int mode)$/;"	f	typeref:typename:char *
month	structs.h	/^    byte hours, day, month, moon;$/;"	m	struct:time_info_data	typeref:typename:byte
month_name	consts.cc	/^char* month_name[17] = {$/;"	v	typeref:typename:char * [17]
moon	structs.h	/^    byte hours, day, month, moon;$/;"	m	struct:time_info_data	typeref:typename:byte
moon_phase	consts.cc	/^char* moon_phase[8] = {$/;"	v	typeref:typename:char * [8]
moonlight	structs.h	/^    int moonlight;$/;"	m	struct:weather_data	typeref:typename:int
moonphase	structs.h	/^    int moonphase;$/;"	m	struct:weather_data	typeref:typename:int
morale	structs.h	/^    int morale; \/* flag to account for good\/evil zones, and such *\/$/;"	m	struct:char_special2_data	typeref:typename:int
mortal_idle_room	consts.cc	/^int mortal_idle_room[MAX_RACES] = {$/;"	v	typeref:typename:int[]
mortal_maze_room	db.h	/^static const int mortal_maze_room[MAX_MAZE_RENT_MAPPINGS][2] = {$/;"	v	typeref:typename:const int[][2]
mortal_start_room	consts.cc	/^int mortal_start_room[MAX_RACES] = {$/;"	v	typeref:typename:int[]
motd	db.cc	/^char* motd = 0; \/* message of the day - mortals *\/$/;"	v	typeref:typename:char *
mother_desc	comm.cc	/^SocketType mother_desc = 0; \/* file desc of the mother connection *\/$/;"	v	typeref:typename:SocketType
mount	structs.h	/^    struct char_data* mount;$/;"	m	struct:mount_data_type	typeref:struct:char_data *
mount_data	structs.h	/^    struct mount_data_type mount_data;$/;"	m	struct:char_data	typeref:struct:mount_data_type
mount_data_type	structs.h	/^struct mount_data_type {$/;"	s
mount_number	structs.h	/^    int mount_number;$/;"	m	struct:mount_data_type	typeref:typename:int
mount_vnum	structs.h	/^    int mount_vnum;$/;"	m	struct:follower_file_elem	typeref:typename:int
move	structs.h	/^    sh_int move;$/;"	m	struct:char_ability_data	typeref:typename:sh_int
move_arrow_to_room	ranger.cc	/^bool move_arrow_to_room(char_data* archer, obj_data* arrow, int room_num)$/;"	f	typeref:typename:bool
move_arrow_to_victim	ranger.cc	/^bool move_arrow_to_victim(char_data* archer, char_data* victim, obj_data* arrow)$/;"	f	typeref:typename:bool
move_char_deleted	db.cc	/^void move_char_deleted(int index)$/;"	f	typeref:typename:void
move_from_container_to_corpse	fight.cc	/^void move_from_container_to_corpse(obj_data* corpse, obj_data* item)$/;"	f	typeref:typename:void
move_gain	limits.cc	/^float move_gain(const char_data* character)$/;"	f	typeref:typename:float
move_gold	fight.cc	/^void move_gold(struct char_data* ch, struct obj_data* object, int option)$/;"	f	typeref:typename:void
move_in_inside	interpre.h	/^    char move_in_inside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
move_in_outside	interpre.h	/^    char move_in_outside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
move_out_inside	interpre.h	/^    char move_out_inside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
move_out_outside	interpre.h	/^    char move_out_outside[255];$/;"	m	struct:ferry_captain_type	typeref:typename:char[255]
move_regen	structs.h	/^    int move_regen = 0; \/* bonus move regen from spells etc. *\/$/;"	m	struct:char_point_data	typeref:typename:int
move_wearables_to_corpse	fight.cc	/^void move_wearables_to_corpse(obj_data* corpse)$/;"	f	typeref:typename:void
movement_loss	consts.cc	/^int movement_loss[] = { \/* movement cost with a good load BTW. min. is 3\/4 .. 2->1 4->2.5 6->4/;"	v	typeref:typename:int[]
msg	structs.h	/^    struct message_type* msg; \/* List of messages.			*\/$/;"	m	struct:message_list	typeref:struct:message_type *
msg_index	boards.h	/^    struct board_msginfo* msg_index;$/;"	m	struct:board_info_type	typeref:struct:board_msginfo *
msg_msgnum	boards.h	/^    virtual int msg_msgnum(int i) { return msg_index[i].msg_num; }$/;"	f	struct:board_info_type	typeref:typename:int
msg_msgnum	boards.h	/^    virtual void msg_msgnum(int i, int j) { msg_index[i].msg_num = j; }$/;"	f	struct:board_info_type	typeref:typename:void
msg_num	boards.h	/^    int msg_num; \/* "absolute" number of the post *\/$/;"	m	struct:board_msginfo	typeref:typename:int
msg_storage	boards.cc	/^char* msg_storage[INDEX_SIZE];$/;"	v	typeref:typename:char * []
msg_storage_taken	boards.cc	/^int msg_storage_taken[INDEX_SIZE];$/;"	v	typeref:typename:int[]
msg_type	structs.h	/^struct msg_type {$/;"	s
mud_time_passed	utility.cc	/^struct time_info_data mud_time_passed(time_t t2, time_t t1)$/;"	f	typeref:struct:time_info_data
mudlle.o	Makefile	/^mudlle.o   : mudlle.cc structs.h utils.h comm.h interpre.h protos.h mudlle.h$/;"	t
mudlle2.o	Makefile	/^mudlle2.o   : mudlle2.cc structs.h utils.h comm.h interpre.h protos.h mudlle.h$/;"	t
mudlle_converter	mudlle.cc	/^char* mudlle_converter(char* source)$/;"	f	typeref:typename:char *
mudlle_dummy	mudlle.cc	/^char mudlle_dummy[] = "Overflowed  buffer overflow.";$/;"	v	typeref:typename:char[]
mudlog	utility.cc	/^void mudlog(char* str, char type, sh_int level, byte file)$/;"	f	typeref:typename:void
mystic.o	Makefile	/^mystic.o : mystic.cc structs.h utils.h comm.h spells.h handler.h limits.h \\$/;"	t
n	mage.cc	/^    signed char n; \/\/$/;"	m	struct:loclife_coord	typeref:typename:signed char	file:
name	db.h	/^    char name[MAX_NAME_LENGTH + 1];$/;"	m	struct:ban_list_element	typeref:typename:char[]
name	db.h	/^    char* name;$/;"	m	struct:player_index_element	typeref:typename:char *
name	pkill.h	/^    char* name;$/;"	m	struct:__anonb27b44b70208	typeref:typename:char *
name	protos.h	/^    char* name; \/\/  Name of script$/;"	m	struct:shape_script	typeref:typename:char *
name	protos.h	/^    char* name; \/\/  Name of the script$/;"	m	struct:script_head	typeref:typename:char *
name	spells.h	/^    char name[50];$/;"	m	struct:skill_data	typeref:typename:char[50]
name	structs.h	/^    char name[MAX_NAME_LENGTH + 1];$/;"	m	struct:char_file_u	typeref:typename:char[]
name	structs.h	/^    char* name; \/* PC \/ NPC s name (kill ...  )		*\/$/;"	m	struct:char_player_data	typeref:typename:char *
name	structs.h	/^    char* name; \/* Rooms name 'You are ...'           *\/$/;"	m	struct:room_data	typeref:typename:char *
name	structs.h	/^    char* name; \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data	typeref:typename:char *
name	structs.h	/^    char* name; \/* ptr to name for mail system		*\/$/;"	m	struct:descriptor_data	typeref:typename:char *
name	zone.h	/^    char* name; \/* name of this zone                  *\/$/;"	m	struct:zone_data	typeref:typename:char *
name_from_drinkcon	act_obj2.cc	/^void name_from_drinkcon(struct obj_data* obj)$/;"	f	typeref:typename:void
name_to_drinkcon	act_obj2.cc	/^void name_to_drinkcon(struct obj_data* obj, int type)$/;"	f	typeref:typename:void
nameserver_is_slow	config.cc	/^int nameserver_is_slow = YES;$/;"	v	typeref:typename:int
nanny	interpre.cc	/^void nanny(struct descriptor_data* d, char* arg)$/;"	f	typeref:typename:void
natural_attack_dam	fight.cc	/^int natural_attack_dam(struct char_data* attacker)$/;"	f	typeref:typename:int
net_cost_per_hour	structs.h	/^    int net_cost_per_hour;$/;"	m	struct:rent_info	typeref:typename:int
new_mob	shapemob.cc	/^void new_mob(struct char_data* ch)$/;"	f	typeref:typename:void
new_mud	db.cc	/^int new_mud = 0;$/;"	v	typeref:typename:int
new_obj	shapeobj.cc	/^void new_obj(struct char_data* ch)$/;"	f	typeref:typename:void
new_player_select	interpre.cc	/^int new_player_select(struct descriptor_data* d, char* arg)$/;"	f	typeref:typename:int
new_room	shaperom.cc	/^int new_room(struct char_data* ch, int number)$/;"	f	typeref:typename:int
new_saves_spell	spell_pa.cc	/^bool new_saves_spell(const char_data* caster, const char_data* victim, int save_bonus)$/;"	f	typeref:typename:bool
new_script	shapescript.cc	/^void new_script(struct char_data* ch)$/;"	f	typeref:typename:void
news	db.cc	/^char* news = 0; \/* mud news			*\/$/;"	v	typeref:typename:char *
news_board	boards.cc	/^struct board_info_type* news_board;$/;"	v	typeref:struct:board_info_type *
news_board_number	boards.cc	/^int news_board_number = 1104;$/;"	v	typeref:typename:int
next	db.h	/^    struct ban_list_element* next;$/;"	m	struct:ban_list_element	typeref:struct:ban_list_element *
next	graph.cc	/^    struct bfs_queue_struct* next;$/;"	m	struct:bfs_queue_struct	typeref:struct:bfs_queue_struct *	file:
next	mail.h	/^    struct mail_index_type_d* next;$/;"	m	struct:mail_index_type_d	typeref:struct:mail_index_type_d *
next	mail.h	/^    struct position_list_type_d* next;$/;"	m	struct:position_list_type_d	typeref:struct:position_list_type_d *
next	mudlle.h	/^    signed char next[SPECIAL_STACKLEN];$/;"	m	struct:special_list	typeref:typename:signed char[]
next	protos.h	/^    struct script_data* next; \/\/  Next command in the script.$/;"	m	struct:script_data	typeref:struct:script_data *
next	protos.h	/^    struct zone_tree* next;$/;"	m	struct:zone_tree	typeref:struct:zone_tree *
next	structs.h	/^    struct affected_type* next;$/;"	m	struct:affected_type	typeref:struct:affected_type *
next	structs.h	/^    struct alias_list* next;$/;"	m	struct:alias_list	typeref:struct:alias_list *
next	structs.h	/^    struct char_data* next; \/* For either monster or ppl-list  *\/$/;"	m	struct:char_data	typeref:struct:char_data *
next	structs.h	/^    struct char_data* next;$/;"	m	struct:waiting_type	typeref:struct:char_data *
next	structs.h	/^    struct descriptor_data* next; \/* link to next descriptor		*\/$/;"	m	struct:descriptor_data	typeref:struct:descriptor_data *
next	structs.h	/^    struct extra_descr_data* next; \/* Next in list                     *\/$/;"	m	struct:extra_descr_data	typeref:struct:extra_descr_data *
next	structs.h	/^    struct follow_type* next;$/;"	m	struct:follow_type	typeref:struct:follow_type *
next	structs.h	/^    struct memory_rec* next;$/;"	m	struct:memory_rec	typeref:struct:memory_rec *
next	structs.h	/^    struct message_type* next; \/* to next messages of this kind.	*\/$/;"	m	struct:message_type	typeref:struct:message_type *
next	structs.h	/^    struct obj_data* next; \/* For the object list              *\/$/;"	m	struct:obj_data	typeref:struct:obj_data *
next	structs.h	/^    struct txt_block* next;$/;"	m	struct:txt_block	typeref:struct:txt_block *
next	structs.h	/^    universal_list* next;$/;"	m	struct:universal_list	typeref:typename:universal_list *
next	zone.cc	/^    struct reset_q_element* next;$/;"	m	struct:reset_q_element	typeref:struct:reset_q_element *	file:
next	zone.h	/^    struct owner_list* next; \/* next owner *\/$/;"	m	struct:owner_list	typeref:struct:owner_list *
next_block	mail.h	/^    long next_block; \/* if header block, link to next block   *\/$/;"	m	struct:header_block_type_d	typeref:typename:long
next_block_available	structs.h	/^    time_t next_block_available;$/;"	m	struct:defender_data	typeref:typename:time_t
next_command	protos.h	/^    script_data* next_command; \/\/  Command next to be executed.$/;"	m	struct:info_script	typeref:typename:script_data *
next_content	structs.h	/^    struct obj_data* next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data	typeref:struct:obj_data *
next_die	structs.h	/^    struct char_data* next_die; \/* next to die in the death_waiting_list :(  *\/$/;"	m	struct:char_data	typeref:struct:char_data *
next_fast_update	structs.h	/^    struct char_data* next_fast_update; \/* For fast-update list            *\/$/;"	m	struct:char_data	typeref:struct:char_data *
next_fighting	structs.h	/^    struct char_data* next_fighting; \/* For fighting list               *\/$/;"	m	struct:char_data	typeref:struct:char_data *
next_in_room	structs.h	/^    struct char_data* next_in_room; \/* For room->people - list         *\/$/;"	m	struct:char_data	typeref:struct:char_data *
next_line	spec_pro.cc	/^    int next_line;$/;"	m	struct:social_type	typeref:typename:int	file:
next_on_mob	structs.h	/^    struct memory_rec* next_on_mob;$/;"	m	struct:memory_rec	typeref:struct:memory_rec *
next_rider	structs.h	/^    struct char_data* next_rider;$/;"	m	struct:mount_data_type	typeref:struct:char_data *
next_rider_number	structs.h	/^    int next_rider_number;$/;"	m	struct:mount_data_type	typeref:typename:int
next_to_process	comm.cc	/^struct descriptor_data *descriptor_list = 0, *next_to_process = 0;$/;"	v	typeref:struct:descriptor_data *
nitems	structs.h	/^    int nitems;$/;"	m	struct:rent_info	typeref:typename:int
no_mail	db.cc	/^int no_mail = 0; \/* mail disabled?		*\/$/;"	v	typeref:typename:int
no_rent_check	db.cc	/^int no_rent_check = 0; \/* skip rent check on boot?	*\/$/;"	v	typeref:typename:int
no_specials	comm.cc	/^int no_specials = 0; \/* Suppress ass. of special routines *\/$/;"	v	typeref:typename:int
no_such_item1	shop.cc	/^    char* no_such_item1; \/* Message if keeper hasn't got an item *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
no_such_item2	shop.cc	/^    char* no_such_item2; \/* Message if player hasn't got an item *\/$/;"	m	struct:shop_data	typeref:typename:char *	file:
nonblock	comm.cc	/^void nonblock(SocketType s)$/;"	f	typeref:typename:void
not_found	db.h	/^    char* not_found; \/* An argument was there, but no victim was found *\/$/;"	m	struct:social_messg	typeref:typename:char *
npc_prof_types	consts.cc	/^char* npc_prof_types[] = {$/;"	v	typeref:typename:char * []
nr	structs.h	/^    int nr; \/* monster nr (pos in file)      *\/$/;"	m	struct:char_data	typeref:typename:int
nth	utility.cc	/^char* nth(int n)$/;"	f	typeref:typename:char *
null_speed	structs.h	/^    int null_speed; \/*UPDATE* For temporary use, should be removed later*\/$/;"	m	struct:char_special_data	typeref:typename:int
num_invalid	ban.cc	/^int num_invalid = 0;$/;"	v	typeref:typename:int
num_items_looted	big_brother.h	/^        int num_items_looted;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:int
num_of_apply	act_othe.cc	/^const int num_of_apply = 2;$/;"	v	typeref:typename:const int
num_of_boards	boards.cc	/^byte board_info_type::num_of_boards = 0;$/;"	m	class:board_info_type	typeref:typename:byte
num_of_boards	boards.h	/^    static byte num_of_boards;$/;"	m	struct:board_info_type	typeref:typename:byte
num_of_captains	consts.cc	/^int num_of_captains = 1;$/;"	v	typeref:typename:int
num_of_cmds	act_info.cc	/^int num_of_cmds;$/;"	v	typeref:typename:int
num_of_color_fields	color.cc	/^int num_of_color_fields = sizeof(color_fields) \/ sizeof(color_fields[0]);$/;"	v	typeref:typename:int
num_of_colors	color.cc	/^int num_of_colors = sizeof(color_color) \/ sizeof(color_color[0]);$/;"	v	typeref:typename:int
num_of_crimes	db.cc	/^int num_of_crimes = 0;$/;"	v	typeref:typename:int
num_of_ferries	consts.cc	/^int num_of_ferries = 1;$/;"	v	typeref:typename:int
num_of_ferry	interpre.h	/^    int num_of_ferry; \/\/ virt. number of the ferry_boat.$/;"	m	struct:ferry_captain_type	typeref:typename:int
num_of_msgs	boards.h	/^    int num_of_msgs;$/;"	m	struct:board_info_type	typeref:typename:int
num_of_object_materials	consts.cc	/^int num_of_object_materials = 14;$/;"	v	typeref:typename:int
num_of_programs	db.cc	/^int num_of_programs;$/;"	v	typeref:typename:int
num_of_sector_types	consts.cc	/^char num_of_sector_types = 13;$/;"	v	typeref:typename:char
num_of_wizutils	act_wiz.cc	/^#define num_of_wizutils /;"	d	file:
num_to_output	obj2html.cc	/^    int num_to_output; \/* For runtime use *\/$/;"	m	struct:obj2html_type	typeref:typename:int	file:
number	boards.h	/^    int number;$/;"	m	struct:mail_info_type	typeref:typename:int
number	db.h	/^    int number; \/* number of existing units of this mob\/obj	*\/$/;"	m	struct:index_data	typeref:typename:int
number	mage.cc	/^    int number; \/\/ room number in world[]$/;"	m	struct:loclife_coord	typeref:typename:int	file:
number	protos.h	/^    int number; \/\/  Number of the command in the script.$/;"	m	struct:script_data	typeref:typename:int
number	protos.h	/^    int number; \/\/  Real script number.$/;"	m	struct:script_head	typeref:typename:int
number	protos.h	/^    int number; \/\/  vnum - ie zone + number in zone$/;"	m	struct:shape_script	typeref:typename:int
number	protos.h	/^    int number;$/;"	m	struct:shape_object	typeref:typename:int
number	protos.h	/^    int number;$/;"	m	struct:shape_proto	typeref:typename:int
number	protos.h	/^    int number;$/;"	m	struct:zone_tree	typeref:typename:int
number	spec_pro.cc	/^    int number; \/* How many of this item should be loaded *\/$/;"	m	struct:kit_item	typeref:typename:int	file:
number	structs.h	/^    int number; \/* Rooms number                       *\/$/;"	m	struct:room_data	typeref:typename:int
number	structs.h	/^    int number; \/* abs_number for ch, whatever else for obj, *\/$/;"	m	struct:universal_list	typeref:typename:int
number	utility.cc	/^double number()$/;"	f	typeref:typename:double
number	utility.cc	/^double number(double max)$/;"	f	typeref:typename:double
number	utility.cc	/^int number(int from, int to)$/;"	f	typeref:typename:int
number	zone.h	/^    int number; \/* virtual number of this zone	  *\/$/;"	m	struct:zone_data	typeref:typename:int
number_d	utility.cc	/^double number_d(double from, double to)$/;"	f	typeref:typename:double
number_of_attacks	structs.h	/^    int number_of_attacks; \/* How many attack messages to chose from. *\/$/;"	m	struct:message_list	typeref:typename:int
number_of_shops	shop.cc	/^int number_of_shops = 0;$/;"	v	typeref:typename:int
ob	protos.h	/^    obj_data* ob[3]; \/\/  Variables$/;"	m	struct:info_script	typeref:typename:obj_data * [3]
ob_roll	combat_manager.h	/^        ob_roll()$/;"	f	struct:game_rules::combat_manager::ob_roll
ob_roll	combat_manager.h	/^        ob_roll(bool is_crit, double ob)$/;"	f	struct:game_rules::combat_manager::ob_roll
ob_roll	combat_manager.h	/^    struct ob_roll {$/;"	s	class:game_rules::combat_manager
obj	mudlle.h	/^    struct obj_data* obj;$/;"	m	union:list_field	typeref:struct:obj_data *
obj	structs.h	/^        obj_data* obj;$/;"	m	union:universal_list::__anonb37368f3040a	typeref:typename:obj_data *
obj	structs.h	/^        struct obj_data* obj;$/;"	m	union:target_data::__anonb37368f3010a	typeref:struct:obj_data *
obj2html	obj2html.cc	/^int obj2html(FILE* f, struct obj_data* o)$/;"	f	typeref:typename:int
obj2html.o	Makefile	/^obj2html.o: obj2html.cc$/;"	t
obj2html_clear	obj2html.cc	/^void obj2html_clear(struct obj2html_type* list)$/;"	f	typeref:typename:void
obj2html_endtable	obj2html.cc	/^void obj2html_endtable(struct char_data* ch, FILE* f,$/;"	f	typeref:typename:void
obj2html_finish	obj2html.cc	/^FILE* obj2html_finish(struct char_data* ch, FILE* f)$/;"	f	typeref:typename:FILE *
obj2html_newtable	obj2html.cc	/^void obj2html_newtable(struct char_data* ch, FILE* f,$/;"	f	typeref:typename:void
obj2html_start	obj2html.cc	/^FILE* obj2html_start(void)$/;"	f	typeref:typename:FILE *
obj2html_type	obj2html.cc	/^struct obj2html_type {$/;"	s	file:
obj2html_types	obj2html.cc	/^struct obj2html_type obj2html_types[] = {$/;"	v	typeref:struct:obj2html_type[]
obj_affected_type	structs.h	/^struct obj_affected_type {$/;"	s
obj_chain	shapeobj.cc	/^int obj_chain[50] = {$/;"	v	typeref:typename:int[50]
obj_data	structs.h	/^struct obj_data {$/;"	s
obj_file_elem	structs.h	/^struct obj_file_elem {$/;"	s
obj_flag_data	structs.h	/^struct obj_flag_data {$/;"	s
obj_flags	structs.h	/^    struct obj_flag_data obj_flags; \/* Object information               *\/$/;"	m	struct:obj_data	typeref:struct:obj_flag_data
obj_from_char	handler.cc	/^void obj_from_char(struct obj_data* object)$/;"	f	typeref:typename:void
obj_from_obj	handler.cc	/^void obj_from_obj(obj_data* item)$/;"	f	typeref:typename:void
obj_from_room	handler.cc	/^void obj_from_room(struct obj_data* object)$/;"	f	typeref:typename:void
obj_index	db.cc	/^struct index_data* obj_index; \/* index table for object file	*\/$/;"	v	typeref:struct:index_data *
obj_proto	db.cc	/^struct obj_data* obj_proto; \/* prototypes for objs		*\/$/;"	v	typeref:struct:obj_data *
obj_to_char	handler.cc	/^void obj_to_char(struct obj_data* object, struct char_data* ch)$/;"	f	typeref:typename:void
obj_to_obj	handler.cc	/^void obj_to_obj(obj_data* item, obj_data* container, char change_weight)$/;"	f	typeref:typename:void
obj_to_proto	utility.cc	/^struct obj_data* obj_to_proto(struct obj_data* obj)$/;"	f	typeref:struct:obj_data *
obj_to_room	handler.cc	/^void obj_to_room(struct obj_data* object, int room)$/;"	f	typeref:typename:void
object	protos.h	/^    struct obj_data* object; \/* the proto to shape, to allocate here *\/$/;"	m	struct:shape_object	typeref:struct:obj_data *
object_flag_data	structs.h	/^    obj_flag_data* object_flag_data;$/;"	m	struct:weapon_flag_data	typeref:typename:obj_flag_data *
object_list	db.cc	/^struct obj_data* object_list = 0; \/* the global linked list of objs	*\/$/;"	v	typeref:struct:obj_data *
object_list_new_owner	handler.cc	/^void object_list_new_owner(struct obj_data* list, struct char_data* ch)$/;"	f	typeref:typename:void
object_master2_idnum	config.cc	/^int object_master2_idnum = 35795; \/\/ Incanus$/;"	v	typeref:typename:int
object_master_idnum	config.cc	/^int object_master_idnum = 1293; \/\/ Erika$/;"	v	typeref:typename:int
object_materials	consts.cc	/^char* object_materials[] = {$/;"	v	typeref:typename:char * []
object_utils.o	Makefile	/^object_utils.o : object_utils.cpp structs.h object_utils.h$/;"	t
objsave.o	Makefile	/^objsave.o : objsave.cc structs.h comm.h handler.h db.h interpre.h \\$/;"	t
off_hand_energy	structs.h	/^    sh_int off_hand_energy;$/;"	m	struct:light_fighting_data	typeref:typename:sh_int
off_hand_energy_regen	structs.h	/^    sh_int off_hand_energy_regen;$/;"	m	struct:light_fighting_data	typeref:typename:sh_int
off_hand_weapon	structs.h	/^    obj_data* off_hand_weapon;$/;"	m	struct:light_fighting_data	typeref:typename:obj_data *
offense_if_weapon_hits	combat_manager.cpp	/^double combat_manager::offense_if_weapon_hits(char_data* attacker, char_data* victim, bool hit_a/;"	f	class:game_rules::combat_manager	typeref:typename:double
ohmask	obj2html.cc	/^unsigned long ohmask = 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3 | 1 << 4;$/;"	v	typeref:typename:unsigned long
old_create_entry	db.cc	/^int old_create_entry(char* name)$/;"	f	typeref:typename:int
old_search_block	interpre.cc	/^int old_search_block(char* argument, int begin, unsigned int length, const char** list, int mode/;"	f	typeref:typename:int
olog_hai	olog_hai.cpp	/^namespace olog_hai {$/;"	n	file:
olog_hai.o	Makefile	/^olog_hai.o : olog_hai.cpp structs.h utils.h comm.h interpre.h handler.h \\$/;"	t
ologhai_item_restriction	act_obj2.cc	/^bool ologhai_item_restriction(char_data* character, obj_data* item)$/;"	f	typeref:typename:bool
on_arrow_hit	ranger.cc	/^void on_arrow_hit(char_data* archer, char_data* victim, obj_data* arrow)$/;"	f	typeref:typename:void
on_arrow_miss	ranger.cc	/^void on_arrow_miss(char_data* archer, char_data* victim, obj_data* arrow)$/;"	f	typeref:typename:void
on_attacked_character	char_utils_combat.cpp	/^void on_attacked_character(char_data* attacker, char_data* victim)$/;"	f	namespace:utils	typeref:typename:void
on_bend_success	ranger.cc	/^void on_bend_success(char_data* ch, int mana_cost, int move_cost)$/;"	f	typeref:typename:void
on_character_afked	big_brother.cpp	/^void big_brother::on_character_afked(const char_data* character)$/;"	f	class:game_rules::big_brother	typeref:typename:void
on_character_attacked_player	big_brother.cpp	/^void big_brother::on_character_attacked_player(const char_data* attacker, const char_data* victi/;"	f	class:game_rules::big_brother	typeref:typename:void
on_character_died	big_brother.cpp	/^void big_brother::on_character_died(char_data* character, char_data* killer, obj_data* corpse)$/;"	f	class:game_rules::big_brother	typeref:typename:void
on_character_disconnected	big_brother.cpp	/^void big_brother::on_character_disconnected(const char_data* character)$/;"	f	class:game_rules::big_brother	typeref:typename:void
on_character_returned	big_brother.cpp	/^void big_brother::on_character_returned(const char_data* character)$/;"	f	class:game_rules::big_brother	typeref:typename:void
on_chill_applied	char_utils.cpp	/^void cold_spec_data::on_chill_applied(int chill_amount)$/;"	f	class:cold_spec_data	typeref:typename:void
on_chill_ray_fail	char_utils.cpp	/^void cold_spec_data::on_chill_ray_fail(int damage)$/;"	f	class:cold_spec_data	typeref:typename:void
on_chill_ray_success	char_utils.cpp	/^void cold_spec_data::on_chill_ray_success(int damage)$/;"	f	class:cold_spec_data	typeref:typename:void
on_cone_of_cold_failed	char_utils.cpp	/^void cold_spec_data::on_cone_of_cold_failed(int damage)$/;"	f	class:cold_spec_data	typeref:typename:void
on_cone_of_cold_success	char_utils.cpp	/^void cold_spec_data::on_cone_of_cold_success(int damage)$/;"	f	class:cold_spec_data	typeref:typename:void
on_corpse_decayed	big_brother.cpp	/^void big_brother::on_corpse_decayed(obj_data* corpse)$/;"	f	class:game_rules::big_brother	typeref:typename:void
on_dust_hit	ranger.cc	/^void on_dust_hit(char_data* ch, char_data* victim, int mana_cost)$/;"	f	typeref:typename:void
on_dust_miss	ranger.cc	/^void on_dust_miss(char_data* ch, char_data* victim, int mana_cost)$/;"	f	typeref:typename:void
on_enter_rage	wild_fighting_handler.cpp	/^void wild_fighting_handler::on_enter_rage()$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:void
on_instance_destroyed	singleton.h	/^    virtual void on_instance_destroyed() {};$/;"	f	class:singleton	typeref:typename:void
on_instance_destroyed	singleton.h	/^    virtual void on_instance_destroyed() {};$/;"	f	class:world_singleton	typeref:typename:void
on_instance_not_created	singleton.h	/^    virtual void on_instance_not_created() {};$/;"	f	class:singleton	typeref:typename:void
on_instance_not_created	singleton.h	/^    virtual void on_instance_not_created() {};$/;"	f	class:world_singleton	typeref:typename:void
on_loot_item	big_brother.cpp	/^bool big_brother::on_loot_item(char_data* looter, obj_data* corpse, obj_data* item)$/;"	f	class:game_rules::big_brother	typeref:typename:bool
on_mark_hit	ranger.cc	/^void on_mark_hit(char_data* marker, char_data* victim)$/;"	f	typeref:typename:void
on_mark_miss	ranger.cc	/^void on_mark_miss(char_data* marker, char_data* victim)$/;"	f	typeref:typename:void
on_unit_killed	wild_fighting_handler.cpp	/^void wild_fighting_handler::on_unit_killed(const char_data* victim)$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:void
on_weapon_hit	combat_manager.cpp	/^void combat_manager::on_weapon_hit(char_data* attacker, char_data* victim, bool hit_accurate, do/;"	f	class:game_rules::combat_manager	typeref:typename:void
on_windblast_hit	ranger.cc	/^void on_windblast_hit(char_data* ch)$/;"	f	typeref:typename:void
on_windblast_success	ranger.cc	/^void on_windblast_success(char_data* ch, int mana_cost, int move_cost)$/;"	f	typeref:typename:void
one_argument	interpre.cc	/^char* one_argument(char* argument, char* first_arg)$/;"	f	typeref:typename:char *
one_mobile_activity	mobact.cc	/^void one_mobile_activity(char_data* ch)$/;"	f	typeref:typename:void
one_word	modify.cc	/^char* one_word(char* argument, char* first_arg)$/;"	f	typeref:typename:char *
op_error	script.cc	/^void op_error(struct info_script* info, int command)$/;"	f	typeref:typename:void
open1	shop.cc	/^    int open1, open2; \/* When does the shop open?		*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
open2	shop.cc	/^    int open1, open2; \/* When does the shop open?		*\/$/;"	m	struct:shop_data	typeref:typename:int	file:
opening_time	shop.cc	/^void opening_time(struct char_data* keeper)$/;"	f	typeref:typename:void
operator ()	act_info.cc	/^    bool operator()(const inventory_data& left, const inventory_data& right)$/;"	f	struct:__anon131f9bdc0111::inventory_data_sort_alphabetically	typeref:typename:bool	file:
operator ()	act_info.cc	/^    bool operator()(const inventory_data& left, const inventory_data& right)$/;"	f	struct:__anon131f9bdc0111::inventory_data_sort_by_length	typeref:typename:bool	file:
operator <	profs.cc	/^bool operator<(const prof_coof_pair& a, const prof_coof_pair& b)$/;"	f	namespace:__anon2a51bc030211	typeref:typename:bool
operator <=	profs.cc	/^bool operator<=(const prof_coof_pair& a, const prof_coof_pair& b)$/;"	f	namespace:__anon2a51bc030211	typeref:typename:bool
operator =	interpre.cc	/^void target_data::operator=(target_data t2)$/;"	f	class:target_data	typeref:typename:void
operator =	mudlle.h	/^    void operator=(list_field x) { other = x.other; }$/;"	f	union:list_field	typeref:typename:void
operator ==	interpre.cc	/^int target_data::operator==(target_data t2)$/;"	f	class:target_data	typeref:typename:int
operator ==	profs.cc	/^bool operator==(const prof_coof_pair& a, const prof_coof_pair& b)$/;"	f	namespace:__anon2a51bc030211	typeref:typename:bool
operator []	db.cc	/^room_data& room_data::operator[](int i)$/;"	f	class:room_data	typeref:typename:room_data &
opt_time	comm.cc	/^timeval opt_time;$/;"	v	typeref:typename:timeval
original	structs.h	/^    struct char_data* original; \/* original char if switched		*\/$/;"	m	struct:descriptor_data	typeref:struct:char_data *
other	mudlle.h	/^    void* other;$/;"	m	union:list_field	typeref:typename:void *
other	structs.h	/^        void* other;$/;"	m	union:target_data::__anonb37368f3010a	typeref:typename:void *
other_side	handler.cc	/^int other_side(const char_data* character, const char_data* other)$/;"	f	typeref:typename:int
other_side_num	handler.cc	/^int other_side_num(int ch_race, int i_race)$/;"	f	typeref:typename:int
others_auto	db.h	/^    char* others_auto;$/;"	m	struct:social_messg	typeref:typename:char *
others_found	db.h	/^    char* others_found;$/;"	m	struct:social_messg	typeref:typename:char *
others_no_arg	db.h	/^    char* others_no_arg;$/;"	m	struct:social_messg	typeref:typename:char *
output	structs.h	/^    char* output; \/* ptr to the current output buffer	*\/$/;"	m	struct:descriptor_data	typeref:typename:char *
overflow_len	objsave.cc	/^const size_t overflow_len = strlen(overflow_str) + 1;$/;"	v	typeref:typename:const size_t
overflow_str	objsave.cc	/^const char* overflow_str = "The buffer was overflowed, aborting.\\r\\n";$/;"	v	typeref:typename:const char *
owner	structs.h	/^    int owner;$/;"	m	struct:char_special2_data	typeref:typename:int
owner	structs.h	/^    int owner;$/;"	m	struct:obj_data	typeref:typename:int
owner	zone.h	/^    int owner; \/* one of the owners of zone\/object *\/$/;"	m	struct:owner_list	typeref:typename:int
owner_list	zone.h	/^struct owner_list {$/;"	s
owners	zone.h	/^    struct owner_list* owners;$/;"	m	struct:zone_data	typeref:struct:owner_list *
page_string	modify.cc	/^void page_string(struct descriptor_data* d, char* str, int keep_internal)$/;"	f	typeref:typename:void
param	protos.h	/^    int param[6]; \/\/  Parameters for command (if needed)  Refers to a char_script variable$/;"	m	struct:script_data	typeref:typename:int[6]
parry	structs.h	/^    sh_int parry; \/* parry in normal tactics *\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
parry_coef_mod	object_utils.cpp	/^        double parry_coef_mod;$/;"	m	struct:utils::__anon20d0bf1d0111::weapon_coef_mod	typeref:typename:double	file:
parse_container	fight.cc	/^void parse_container(obj_data* corpse, obj_data* container)$/;"	f	typeref:typename:void
parts	structs.h	/^    char* parts[MAX_BODYPARTS];$/;"	m	struct:race_bodypart_data	typeref:typename:char * []
pc_arda_fame_identifier	consts.cc	/^char* pc_arda_fame_identifier[] = {$/;"	v	typeref:typename:char * []
pc_arda_fame_keywords	consts.cc	/^char* pc_arda_fame_keywords[] = {$/;"	v	typeref:typename:char * []
pc_count	structs.h	/^    int pc_count;$/;"	m	class:group_data	typeref:typename:int
pc_evil_fame_identifier	consts.cc	/^char* pc_evil_fame_identifier[] = {$/;"	v	typeref:typename:char * []
pc_evil_fame_keywords	consts.cc	/^char* pc_evil_fame_keywords[] = {$/;"	v	typeref:typename:char * []
pc_named_star_types	consts.cc	/^char* pc_named_star_types[] = {$/;"	v	typeref:typename:char * []
pc_prof_types	consts.cc	/^char* pc_prof_types[] = {$/;"	v	typeref:typename:char * []
pc_race_keywords	consts.cc	/^char* pc_race_keywords[] = {$/;"	v	typeref:typename:char * []
pc_race_types	consts.cc	/^char* pc_race_types[] = {$/;"	v	typeref:typename:char * []
pc_races	consts.cc	/^char* pc_races[] = {$/;"	v	typeref:typename:char * []
pc_star_types	consts.cc	/^char* pc_star_types[] = {$/;"	v	typeref:typename:char * []
pcnpc	act_wiz.cc	/^    char pcnpc;$/;"	m	struct:set_struct	typeref:typename:char	file:
people	structs.h	/^    struct char_data* people; \/* List of NPC \/ PC in room           *\/$/;"	m	struct:room_data	typeref:struct:char_data *
percent	structs.h	/^    sh_int percent[MAX_BODYPARTS];$/;"	m	struct:race_bodypart_data	typeref:typename:sh_int[]
perception	structs.h	/^    int perception; \/* perception changes between 0 and 100 *\/$/;"	m	struct:char_special2_data	typeref:typename:int
perform_drop	act_obj1.cc	/^int perform_drop(struct char_data* ch, struct obj_data* obj, sh_int RDR)$/;"	f	typeref:typename:int
perform_drop_gold	act_obj1.cc	/^void perform_drop_gold(struct char_data* ch, int amount, sh_int RDR)$/;"	f	typeref:typename:void
perform_get_from_container	act_obj1.cc	/^void perform_get_from_container(char_data* character, obj_data* item, obj_data* container, int m/;"	f	typeref:typename:void
perform_get_from_room	act_obj1.cc	/^int perform_get_from_room(char_data* character, obj_data* item)$/;"	f	typeref:typename:int
perform_give	act_obj1.cc	/^void perform_give(struct char_data* ch, struct char_data* vict,$/;"	f	typeref:typename:void
perform_give_gold	act_obj1.cc	/^void perform_give_gold(struct char_data* ch, struct char_data* vict,$/;"	f	typeref:typename:void
perform_immort_where	act_info.cc	/^void perform_immort_where(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
perform_mag_groups	magic.cpp	/^void perform_mag_groups(int level, struct char_data* caster, struct char_data* tch,$/;"	f	typeref:typename:void
perform_mortal_where	act_info.cc	/^void perform_mortal_where(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
perform_move_mount	act_move.cc	/^int perform_move_mount(struct char_data* ch, int dir)$/;"	f	typeref:typename:int
perform_put	act_obj1.cc	/^void perform_put(struct char_data* ch, struct obj_data* obj,$/;"	f	typeref:typename:void
perform_remove	act_obj2.cc	/^void perform_remove(struct char_data* ch, int pos)$/;"	f	typeref:typename:void
perform_subst	comm.cc	/^int perform_subst(struct descriptor_data* t, char* orig, char* subst)$/;"	f	typeref:typename:int
perform_subst_pnew	comm.cc	/^char perform_subst_pnew[MAX_INPUT_LENGTH + 5];$/;"	v	typeref:typename:char[]
perform_violence	fight.cc	/^void perform_violence(int mini_tics)$/;"	f	typeref:typename:void
perform_wear	act_obj2.cc	/^void perform_wear(char_data* character, obj_data* item, int item_slot, bool wearall = false)$/;"	f	typeref:typename:void
permission	protos.h	/^    int permission;$/;"	m	struct:shape_object	typeref:typename:int
permission	protos.h	/^    int permission;$/;"	m	struct:shape_proto	typeref:typename:int
permission	protos.h	/^    sh_int permission; \/\/  Zone permission$/;"	m	struct:shape_script	typeref:typename:sh_int
permission	protos.h	/^    sh_int permission;$/;"	m	struct:shape_mudlle	typeref:typename:sh_int
permission	protos.h	/^    sh_int permission;$/;"	m	struct:shape_room	typeref:typename:sh_int
permission	protos.h	/^    sh_int permission;$/;"	m	struct:shape_zone	typeref:typename:sh_int
permission	protos.h	/^    sh_int permission;$/;"	m	struct:zone_tree	typeref:typename:sh_int
piercing_proc_chance	weapon_master_handler.cpp	/^    constexpr const float piercing_proc_chance = 0.25f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
piercing_subtypes	obj2html.cc	/^struct obj2html_type piercing_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
pkill.o	Makefile	/^pkill.o: pkill.c pkill.h$/;"	t
pkill_copy	pkill.c	/^void pkill_copy(PKILL* dest, PKILL* src)$/;"	f	typeref:typename:void
pkill_create	pkill.c	/^void pkill_create(struct char_data* victim)$/;"	f	typeref:typename:void
pkill_delete_file	pkill.c	/^void pkill_delete_file(char* file)$/;"	f	typeref:typename:void
pkill_expired	pkill.c	/^int pkill_expired(PKILL* p)$/;"	f	typeref:typename:int
pkill_free_leader	pkill.c	/^void pkill_free_leader(LEADER* ldr)$/;"	f	typeref:typename:void
pkill_get_all	pkill.c	/^pkill_get_all(int* n)$/;"	f	typeref:typename:PKILL *
pkill_get_evil_fame	pkill.c	/^int pkill_get_evil_fame()$/;"	f	typeref:typename:int
pkill_get_good_fame	pkill.c	/^int pkill_get_good_fame()$/;"	f	typeref:typename:int
pkill_get_leader_by_rank	pkill.c	/^pkill_get_leader_by_rank(int rank, int race)$/;"	f	typeref:typename:LEADER *
pkill_get_new_kills	pkill.c	/^pkill_get_new_kills(int* n)$/;"	f	typeref:typename:PKILL *
pkill_get_rank_by_character	pkill.c	/^int pkill_get_rank_by_character(struct char_data* c, bool totalRank)$/;"	f	typeref:typename:int
pkill_get_string	pkill.c	/^char* pkill_get_string(PKILL* p, int flag)$/;"	f	typeref:typename:char *
pkill_get_total	pkill.c	/^int pkill_get_total()$/;"	f	typeref:typename:int
pkill_get_totalrank_by_character_id	pkill.c	/^int pkill_get_totalrank_by_character_id(int idx, bool totalRank)$/;"	f	typeref:typename:int
pkill_level	pkill.c	/^int pkill_level(struct char_data* c)$/;"	f	typeref:typename:int
pkill_opponents	pkill.c	/^int pkill_opponents(struct char_data* victim)$/;"	f	typeref:typename:int
pkill_points	pkill.c	/^int pkill_points(struct char_data* victim, struct char_data* killer, int weight)$/;"	f	typeref:typename:int
pkill_read_file	pkill.c	/^int pkill_read_file(char* file)$/;"	f	typeref:typename:int
pkill_tab	pkill.c	/^PKILL* pkill_tab = NULL;$/;"	v	typeref:typename:PKILL *
pkill_tab_len	pkill.c	/^int pkill_tab_len = 0;$/;"	v	typeref:typename:int
pkill_unref_character	pkill.c	/^void pkill_unref_character(struct char_data* c)$/;"	f	typeref:typename:void
pkill_unref_character_by_index	pkill.c	/^void pkill_unref_character_by_index(int idx)$/;"	f	typeref:typename:void
pkill_update_character_by_id	pkill.c	/^long pkill_update_character_by_id(long idnum, int points)$/;"	f	typeref:typename:long
pkill_update_file	pkill.c	/^int pkill_update_file(char* file, PKILL pkills[], int n)$/;"	f	typeref:typename:int
pkill_update_pkill_tab	pkill.c	/^int pkill_update_pkill_tab(struct char_data* victim, int w, int n)$/;"	f	typeref:typename:int
pkill_update_player_tab	pkill.c	/^int pkill_update_player_tab(PKILL pkills[], int nkills)$/;"	f	typeref:typename:int
pkill_update_rank	pkill.c	/^void pkill_update_rank(long idx)$/;"	f	typeref:typename:void
pkill_valid_killer	pkill.c	/^int pkill_valid_killer(struct char_data* killer, struct char_data* victim)$/;"	f	typeref:typename:int
pkill_weight	pkill.c	/^int pkill_weight(struct char_data* victim)$/;"	f	typeref:typename:int
played	structs.h	/^    int played; \/* Number of secs played in total *\/$/;"	m	struct:char_file_u	typeref:typename:int
played	structs.h	/^    int played; \/* This is the total accumulated time played in secs *\/$/;"	m	struct:time_data	typeref:typename:int
player	structs.h	/^    struct char_player_data player; \/* Normal data                   *\/$/;"	m	struct:char_data	typeref:struct:char_player_data
player_bits	consts.cc	/^char* player_bits[] = {$/;"	v	typeref:typename:char * []
player_corpse_data	big_brother.cpp	/^big_brother::player_corpse_data::player_corpse_data(char_data* dead_man)$/;"	f	class:game_rules::big_brother::player_corpse_data
player_corpse_data	big_brother.cpp	/^big_brother::player_corpse_data::player_corpse_data(char_data* dead_man, char_data* killer)$/;"	f	class:game_rules::big_brother::player_corpse_data
player_corpse_data	big_brother.h	/^        player_corpse_data()$/;"	f	struct:game_rules::big_brother::player_corpse_data
player_corpse_data	big_brother.h	/^    struct player_corpse_data {$/;"	s	class:game_rules::big_brother
player_damage_details	structs.h	/^    player_damage_details()$/;"	f	class:player_damage_details
player_damage_details	structs.h	/^class player_damage_details {$/;"	c
player_fl	db.cc	/^FILE* player_fl = 0; \/* file desc of player file	*\/$/;"	v	typeref:typename:FILE *
player_id	big_brother.h	/^        int player_id;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:int
player_id	skill_timer.h	/^        int player_id;$/;"	m	struct:game_timer::skill_timer::skill_data	typeref:typename:int
player_idx	pkill.h	/^    int player_idx;$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
player_index	structs.h	/^    int player_index; \/* Index in player table *\/$/;"	m	struct:char_data	typeref:typename:int
player_index	structs.h	/^    int player_index; \/* Index in player table *\/$/;"	m	struct:char_file_u	typeref:typename:int
player_index_element	db.h	/^struct player_index_element {$/;"	s
player_race	big_brother.h	/^        int player_race;$/;"	m	struct:game_rules::big_brother::player_corpse_data	typeref:typename:int
player_skill_data	structs.h	/^struct player_skill_data {$/;"	s
player_spec	battle_mage_handler.cpp	/^namespace player_spec {$/;"	n	file:
player_spec	warrior_spec_handlers.h	/^namespace player_spec {$/;"	n
player_spec	weapon_master_handler.cpp	/^namespace player_spec {$/;"	n	file:
player_spec	wild_fighting_handler.cpp	/^namespace player_spec {$/;"	n	file:
player_specs	structs.h	/^enum player_specs {$/;"	g	namespace:game_types
player_table	db.cc	/^struct player_index_element* player_table = 0; \/* index to player file	*\/$/;"	v	typeref:struct:player_index_element *
plural	spells.h	/^    char* plural;$/;"	m	struct:attack_hit_type	typeref:typename:char *
pnew_connection	comm.cc	/^SocketType pnew_connection(SocketType s)$/;"	f	typeref:typename:SocketType
pnew_descriptor	comm.cc	/^SocketType pnew_descriptor(SocketType s)$/;"	f	typeref:typename:SocketType
point_update	limits.cc	/^void point_update(void)$/;"	f	typeref:typename:void
points	structs.h	/^    struct char_point_data points; \/* Points                        *\/$/;"	m	struct:char_data	typeref:struct:char_point_data
points	structs.h	/^    struct char_point_data points;$/;"	m	struct:char_file_u	typeref:struct:char_point_data
points_used	profs.cc	/^int points_used(char_data* character)$/;"	f	typeref:typename:int
poisondata	structs.h	/^    int poisondata[5];$/;"	m	struct:obj_flag_data	typeref:typename:int[5]
poisoned	structs.h	/^    bool poisoned;$/;"	m	struct:obj_flag_data	typeref:typename:bool
policies	db.cc	/^char* policies = 0; \/* policies page		*\/$/;"	v	typeref:typename:char *
poofIn	structs.h	/^    char* poofIn; \/* Description on arrival of a god.	       *\/$/;"	m	struct:char_special_data	typeref:typename:char *
poofOut	structs.h	/^    char* poofOut; \/* Description upon a god's exit.	       *\/$/;"	m	struct:char_special_data	typeref:typename:char *
pool_to_list	utility.cc	/^pool_to_list(struct universal_list** list, struct universal_list** head)$/;"	f	typeref:struct:universal_list *
pop_free_list	mail.cc	/^long pop_free_list(void)$/;"	f	typeref:typename:long
populate_skill_sets	big_brother.cpp	/^void big_brother::populate_skill_sets()$/;"	f	class:game_rules::big_brother	typeref:typename:void
pos	db.h	/^    long pos;$/;"	m	struct:help_index_element	typeref:typename:long
pos	structs.h	/^    int pos; \/* position in player-file		*\/$/;"	m	struct:descriptor_data	typeref:typename:int
position	mail.h	/^    long position;$/;"	m	struct:position_list_type_d	typeref:typename:long
position	protos.h	/^    sh_int position; \/\/  Position of immortal shaping (standing, sitting etc)$/;"	m	struct:shape_script	typeref:typename:sh_int
position	protos.h	/^    sh_int position;$/;"	m	struct:shape_object	typeref:typename:sh_int
position	protos.h	/^    sh_int position;$/;"	m	struct:shape_proto	typeref:typename:sh_int
position	protos.h	/^    sh_int position;$/;"	m	struct:shape_room	typeref:typename:sh_int
position	protos.h	/^    sh_int position;$/;"	m	struct:shape_zone	typeref:typename:sh_int
position	structs.h	/^    sh_int position; \/* Standing or ...                         *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
position_list_type	mail.h	/^typedef struct position_list_type_d position_list_type;$/;"	t	typeref:struct:position_list_type_d
position_list_type_d	mail.h	/^struct position_list_type_d {$/;"	s
position_types	consts.cc	/^char* position_types[] = {$/;"	v	typeref:typename:char * []
post_time	boards.h	/^    int post_time; \/* when it was posted *\/$/;"	m	struct:board_msginfo	typeref:typename:int
postmaster_check_mail	mail.cc	/^void postmaster_check_mail(struct char_data* ch, int cmd, char* arg, char_data* host)$/;"	f	typeref:typename:void
postmaster_receive_mail	mail.cc	/^void postmaster_receive_mail(struct char_data* ch, int cmd, char* arg, char_data* host)$/;"	f	typeref:typename:void
postmaster_send_mail	mail.cc	/^void postmaster_send_mail(struct char_data* ch, int cmd, char* arg, char_data* host)$/;"	f	typeref:typename:void
power_tbl	db.cc	/^char* power_tbl = 0; \/* powers help			*\/$/;"	v	typeref:typename:char *
practice_message	spells.h	/^    char* practice_message;$/;"	m	struct:skill_teach_data	typeref:typename:char *
practice_msg_to_char	spells.h	/^    char* practice_msg_to_char;$/;"	m	struct:skill_teach_data	typeref:typename:char *
pref	structs.h	/^    long pref; \/* preference flags for PC's,$/;"	m	struct:char_special2_data	typeref:typename:long
preference_bits	consts.cc	/^char* preference_bits[] = {$/;"	v	typeref:typename:char * []
pressure	structs.h	/^    int pressure; \/* How is the pressure (Mb)? *\/$/;"	m	struct:weather_data	typeref:typename:int
prev	protos.h	/^    struct script_data* prev; \/\/  Previous command in the script$/;"	m	struct:script_data	typeref:struct:script_data *
prev	protos.h	/^    struct zone_tree* prev;$/;"	m	struct:zone_tree	typeref:struct:zone_tree *
print_exploits	act_info.cc	/^void print_exploits(struct char_data* sendto, char* name)$/;"	f	typeref:typename:void
print_group_leader	act_othe.cc	/^void print_group_leader(const char_data* leader)$/;"	f	typeref:typename:void
print_group_member	act_othe.cc	/^void print_group_member(const char_data* group_member)$/;"	f	typeref:typename:void
print_zone_to_buf	act_wiz.cc	/^void print_zone_to_buf(char* bufptr, int zone)$/;"	f	typeref:typename:void
priority	structs.h	/^    int priority; \/* priority it is. 0 is the lowest *\/$/;"	m	struct:waiting_type	typeref:typename:int
procedure	protos.h	/^    sh_int procedure; \/* which procedure is active now        *\/$/;"	m	struct:shape_object	typeref:typename:sh_int
procedure	protos.h	/^    sh_int procedure; \/* which procedure is active now        *\/$/;"	m	struct:shape_proto	typeref:typename:sh_int
procedure	protos.h	/^    sh_int procedure; \/* which procedure is active now        *\/$/;"	m	struct:shape_room	typeref:typename:sh_int
procedure	protos.h	/^    sh_int procedure; \/* which procedure is active now        *\/$/;"	m	struct:shape_zone	typeref:typename:sh_int
procedure	protos.h	/^    sh_int procedure;$/;"	m	struct:shape_script	typeref:typename:sh_int
process_input	comm.cc	/^int process_input(struct descriptor_data* t)$/;"	f	typeref:typename:int
process_input_buffer	comm.cc	/^char process_input_buffer[MAX_INPUT_LENGTH + 60];$/;"	v	typeref:typename:char[]
process_input_tmp	comm.cc	/^char process_input_tmp[MAX_INPUT_LENGTH + 2];$/;"	v	typeref:typename:char[]
process_output	comm.cc	/^int process_output(struct descriptor_data* t)$/;"	f	typeref:typename:int
process_output_buffer	comm.cc	/^char process_output_buffer[LARGE_BUFSIZE + 20];$/;"	v	typeref:typename:char[]
producing	shop.cc	/^    int producing[MAX_PROD]; \/* Which item to produce (virtual)      *\/$/;"	m	struct:shop_data	typeref:typename:int[]	file:
prof	profs.cc	/^    int prof;$/;"	m	struct:__anon2a51bc030211::prof_coof_pair	typeref:typename:int	file:
prof	structs.h	/^    byte prof; \/* PC s or NPC s prof                 	*\/$/;"	m	struct:char_player_data	typeref:typename:byte
prof	structs.h	/^    byte prof;$/;"	m	struct:char_file_u	typeref:typename:byte
prof_abbrevs	consts.cc	/^char* prof_abbrevs[] = {$/;"	v	typeref:typename:char * []
prof_coof	profs.cc	/^    int prof_coof;$/;"	m	struct:__anon2a51bc030211::prof_coof_pair	typeref:typename:int	file:
prof_coof	structs.h	/^    int prof_coof[MAX_PROFS + 1]; \/* 100 would mean 100% in that class *\/$/;"	m	struct:char_prof_data	typeref:typename:int[]
prof_coof_pair	profs.cc	/^    prof_coof_pair()$/;"	f	struct:__anon2a51bc030211::prof_coof_pair	file:
prof_coof_pair	profs.cc	/^    prof_coof_pair(int in_prof, int coof)$/;"	f	struct:__anon2a51bc030211::prof_coof_pair	file:
prof_coof_pair	profs.cc	/^struct prof_coof_pair {$/;"	s	namespace:__anon2a51bc030211	file:
prof_exp	structs.h	/^    long prof_exp[MAX_PROFS + 1];$/;"	m	struct:char_prof_data	typeref:typename:long[]
prof_level	structs.h	/^    int prof_level[MAX_PROFS + 1];$/;"	m	struct:char_prof_data	typeref:typename:int[]
prof_type	structs.h	/^struct prof_type {$/;"	s
profit_buy	shop.cc	/^    int profit_buy; \/* Factor to multiply cost with.        *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
profit_sell	shop.cc	/^    int profit_sell; \/* Factor to multiply cost with.        *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
profs	structs.h	/^    struct char_prof_data profs;$/;"	m	struct:char_file_u	typeref:struct:char_prof_data
profs	structs.h	/^    struct char_prof_data* profs; \/* prof cooficients *\/$/;"	m	struct:char_data	typeref:struct:char_prof_data *
profs.o	Makefile	/^profs.o   : profs.cc structs.h utils.h comm.h interpre.h limits.h profs.h comm.h$/;"	t
prog_num	protos.h	/^    int prog_num;$/;"	m	struct:shape_mudlle	typeref:typename:int
prog_number	structs.h	/^        int* prog_number; \/* also a call list pointer for special mobs *\/$/;"	m	union:char_special_data::__anonb37368f3020a	typeref:typename:int *
prog_number	structs.h	/^    int prog_number; \/* for special objects... *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
prog_point	structs.h	/^        int* prog_point; \/* and the call point list for that*\/$/;"	m	union:char_special_data::__anonb37368f3030a	typeref:typename:int *
prompt_hit	consts.cc	/^struct prompt_type prompt_hit[] = {$/;"	v	typeref:struct:prompt_type[]
prompt_mana	consts.cc	/^struct prompt_type prompt_mana[] = {$/;"	v	typeref:struct:prompt_type[]
prompt_mode	structs.h	/^    int prompt_mode; \/* control of prompt-printing		*\/$/;"	m	struct:descriptor_data	typeref:typename:int
prompt_mount	consts.cc	/^struct prompt_type prompt_mount[] = {$/;"	v	typeref:struct:prompt_type[]
prompt_move	consts.cc	/^struct prompt_type prompt_move[] = {$/;"	v	typeref:struct:prompt_type[]
prompt_number	structs.h	/^    int prompt_number; \/* which prompt to use if PRF_DISPTEXT is set *\/$/;"	m	struct:char_special_data	typeref:typename:int
prompt_spirit	consts.cc	/^struct prompt_type prompt_spirit[] = { \/* Notice that the value means different$/;"	v	typeref:struct:prompt_type[]
prompt_text	consts.cc	/^char* prompt_text[] = {$/;"	v	typeref:typename:char * []
prompt_type	structs.h	/^struct prompt_type {$/;"	s
prompt_value	structs.h	/^    int prompt_value; \/* value to be inserted into text prompt *\/$/;"	m	struct:char_special_data	typeref:typename:int
proto	protos.h	/^    struct char_data* proto; \/* the proto to shape, to allocate here *\/$/;"	m	struct:shape_proto	typeref:struct:char_data *
proto_chain	shapemob.cc	/^int proto_chain[51] = {$/;"	v	typeref:typename:int[51]
ptr	structs.h	/^    } ptr;$/;"	m	struct:target_data	typeref:union:target_data::__anonb37368f3010a
ptr	structs.h	/^    } ptr;$/;"	m	struct:universal_list	typeref:union:universal_list::__anonb37368f3040a
pulse	comm.cc	/^int pulse = 0; \/\/ moved here from being a local variable$/;"	v	typeref:typename:int
push_free_list	mail.cc	/^void push_free_list(long pos)$/;"	f	typeref:typename:void
put_arrow_quiver	ranger.cc	/^void put_arrow_quiver(char_data* character, obj_data* arrow, obj_data* quiver)$/;"	f	typeref:typename:void
put_to_affected_type_pool	handler.cc	/^void put_to_affected_type_pool(struct affected_type* oldaf)$/;"	f	typeref:typename:void
put_to_follow_type_pool	handler.cc	/^void put_to_follow_type_pool(struct follow_type* oldfol)$/;"	f	typeref:typename:void
put_to_memory_rec_pool	mobact.cc	/^void put_to_memory_rec_pool(struct memory_rec* oldaf)$/;"	f	typeref:typename:void
put_to_reset_q_pool	zone.cc	/^void put_to_reset_q_pool(struct reset_q_element* oldres)$/;"	f	typeref:typename:void
put_to_txt_block_pool	comm.cc	/^void put_to_txt_block_pool(struct txt_block* pold)$/;"	f	typeref:typename:void
pwd	structs.h	/^    char pwd[MAX_PWD_LENGTH + 1]; \/* password			*\/$/;"	m	struct:descriptor_data	typeref:typename:char[]
pwd	structs.h	/^    char pwd[MAX_PWD_LENGTH + 1];$/;"	m	struct:char_file_u	typeref:typename:char[]
pwdcrypt	db.cc	/^unsigned char pwdcrypt[MAX_PWD_LENGTH];$/;"	v	typeref:typename:unsigned char[]
quad_arg	modify.cc	/^void quad_arg(char* arg, int* type, char* name, int* field, char* string)$/;"	f	typeref:typename:void
question_proc	mudlle.cc	/^void question_proc(struct char_data* host)$/;"	f	typeref:typename:void
queue_head	graph.cc	/^static struct room_data *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:room_data *	file:
queue_tail	graph.cc	/^static struct room_data *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:room_data *	file:
r_bugged_start_room	consts.cc	/^int r_bugged_start_room = 1152;$/;"	v	typeref:typename:int
r_frozen_start_room	db.cc	/^int r_frozen_start_room; \/* rnum of frozen start room	*\/$/;"	v	typeref:typename:int
r_immort_start_room	db.cc	/^int r_immort_start_room; \/* rnum of immort start room	*\/$/;"	v	typeref:typename:int
r_mortal_idle_room	consts.cc	/^int r_mortal_idle_room[MAX_RACES];$/;"	v	typeref:typename:int[]
r_mortal_start_room	consts.cc	/^int r_mortal_start_room[MAX_RACES];$/;"	v	typeref:typename:int[]
r_retirement_home_room	db.cc	/^int r_retirement_home_room; \/* rnum of retirement home      *\/$/;"	v	typeref:typename:int
race	db.h	/^    sh_int race;$/;"	m	struct:player_index_element	typeref:typename:sh_int
race	pkill.h	/^    int race;$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
race	spec_pro.cc	/^    int race; \/* A bitvector of races this will load for *\/$/;"	m	struct:kit_item	typeref:typename:int	file:
race	structs.h	/^    byte race;$/;"	m	struct:char_file_u	typeref:typename:byte
race	structs.h	/^    int race; \/* PC \/NPC's race                       	*\/$/;"	m	struct:char_player_data	typeref:typename:int
race_abbrevs	consts.cc	/^char* race_abbrevs[MAX_RACES + 40 \/*for mob ones*\/] = {$/;"	v	typeref:typename:char * []
race_affect	consts.cc	/^long race_affect[] = {$/;"	v	typeref:typename:long[]
race_bodypart_data	structs.h	/^struct race_bodypart_data {$/;"	s
race_modifiers	profs.cc	/^sh_int race_modifiers[MAX_RACES][8] = {$/;"	v	typeref:typename:sh_int[][8]
random_exit	mage.cc	/^int random_exit(int room)$/;"	f	typeref:typename:int
ranger.o	Makefile	/^ranger.o : ranger.cc structs.h utils.h comm.h interpre.h handler.h db.h\\$/;"	t
rank	db.h	/^    int rank;$/;"	m	struct:player_index_element	typeref:typename:int
rank	pkill.h	/^    int rank;$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
rank_len	pkill.c	/^    int rank_len;$/;"	m	struct:__anonb27b44b20108	typeref:typename:int	file:
rank_tab	pkill.c	/^    long* rank_tab;$/;"	m	struct:__anonb27b44b20108	typeref:typename:long *	file:
rank_used	pkill.c	/^    int rank_used;$/;"	m	struct:__anonb27b44b20108	typeref:typename:int	file:
ranking	structs.h	/^    int ranking; \/* PC \/ NPC s ranking in fame war *\/$/;"	m	struct:char_player_data	typeref:typename:int
rarity	structs.h	/^    ubyte rarity; \/* rarity of an item *\/$/;"	m	struct:obj_flag_data	typeref:typename:ubyte
raw_kill	fight.cc	/^void raw_kill(char_data* dead_man, char_data* killer, int attack_type)$/;"	f	typeref:typename:void
read_crime_file	db.cc	/^void read_crime_file()$/;"	f	typeref:typename:void
read_delete	mail.cc	/^char* read_delete(char* recipient, char* recipient_formatted, int is_good)$/;"	f	typeref:typename:char *
read_filename_field	db.cc	/^int read_filename_field(int pos, char* field, char* fname)$/;"	f	typeref:typename:int
read_from_file	mail.cc	/^void read_from_file(void* buf, int size, long filepos)$/;"	f	typeref:typename:void
read_invalid_list	ban.cc	/^void read_invalid_list(void)$/;"	f	typeref:typename:void
read_lvl	boards.h	/^    int read_lvl; \/* min level to read messages on this board *\/$/;"	m	struct:board_info_type	typeref:typename:int
read_mobile	db.cc	/^struct char_data* read_mobile(int nr, int type)$/;"	f	typeref:struct:char_data *
read_object	db.cc	/^read_object(int nr, int type)$/;"	f	typeref:struct:obj_data *
real_mobile	db.cc	/^int real_mobile(int virt)$/;"	f	typeref:typename:int
real_num	protos.h	/^    int real_num;$/;"	m	struct:shape_mudlle	typeref:typename:int
real_object	db.cc	/^int real_object(int virt)$/;"	f	typeref:typename:int
real_program	db.cc	/^int real_program(int virt)$/;"	f	typeref:typename:int
real_room	db.cc	/^int real_room(int virt)$/;"	f	typeref:typename:int
real_time_passed	utility.cc	/^struct time_info_data real_time_passed(time_t t2, time_t t1)$/;"	f	typeref:struct:time_info_data
reboot_wizlists	db.cc	/^void reboot_wizlists(void)$/;"	f	typeref:typename:void
recalc_abilities	profs.cc	/^void recalc_abilities(char_data* character)$/;"	f	typeref:typename:void
recalc_skills	spec_pro.cc	/^void recalc_skills(struct char_data* ch)$/;"	f	typeref:typename:void
recalc_worn_weight	objsave.cc	/^void recalc_worn_weight(char_data* character)$/;"	f	typeref:typename:void
recalc_zone_power	handler.cc	/^void recalc_zone_power()$/;"	f	typeref:typename:void
recalculate_mob	shapemob.cc	/^void recalculate_mob(struct char_data* ch)$/;"	f	typeref:typename:void
recipient	mail.h	/^    char recipient[NAME_SIZE + 1]; \/* who the mail is for *\/$/;"	m	struct:mail_index_type_d	typeref:typename:char[]
recite_lines	structs.h	/^    char* recite_lines; \/* For reciters, how far read? *\/$/;"	m	struct:char_special_data	typeref:typename:char *
record_crime	db.cc	/^void record_crime(char_data* criminal, char_data* victim, int crime, int wit_type)$/;"	f	typeref:typename:void
record_spell_damage	spell_pa.cc	/^void record_spell_damage(struct char_data* caster, struct char_data* victim,$/;"	f	typeref:typename:void
recount_light_room	handler.cc	/^void recount_light_room(int room)$/;"	f	typeref:typename:void
refer_dirs	consts.cc	/^char* refer_dirs[] = {$/;"	v	typeref:typename:char * []
regain_energy	weapon_master_handler.cpp	/^void weapon_master_handler::regain_energy(char_data* victim)$/;"	f	class:player_spec::weapon_master_handler	typeref:typename:void
register_npc_char	handler.cc	/^int register_npc_char(struct char_data* mob)$/;"	f	typeref:typename:int
register_pc_char	handler.cc	/^int register_pc_char(struct char_data* ch)$/;"	f	typeref:typename:int
reject_message	spells.h	/^    char* reject_message;$/;"	m	struct:skill_teach_data	typeref:typename:char *
remember	mobact.cc	/^void remember(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
remove	structs.h	/^    void remove(struct char_data* character) { damage_map.erase(character); }$/;"	f	class:group_damaga_data	typeref:typename:void
remove_and_drop_object	fight.cc	/^void remove_and_drop_object(char_data* character)$/;"	f	typeref:typename:void
remove_bit	base_utils.h	/^void remove_bit(T var, T bit)$/;"	f	namespace:utils	typeref:typename:void
remove_char_exists	handler.cc	/^void remove_char_exists(int num)$/;"	f	typeref:typename:void
remove_character_from_afk_set	big_brother.cpp	/^void big_brother::remove_character_from_afk_set(const char_data* character)$/;"	f	class:game_rules::big_brother	typeref:typename:void
remove_character_from_group	act_othe.cc	/^void remove_character_from_group(char_data* character, char_data* group_leader)$/;"	f	typeref:typename:void
remove_character_from_looting_set	big_brother.cpp	/^void big_brother::remove_character_from_looting_set(int char_id)$/;"	f	class:game_rules::big_brother	typeref:typename:void
remove_fame_war_bonuses	limits.cc	/^void remove_fame_war_bonuses(struct char_data* ch, struct affected_type* pkaff)$/;"	f	typeref:typename:void
remove_lvl	boards.h	/^    int remove_lvl; \/* min level to remove messages from this board *\/$/;"	m	struct:board_info_type	typeref:typename:int
remove_member	char_utils.cpp	/^bool group_data::remove_member(char_data* member)$/;"	f	class:group_data	typeref:typename:bool
remove_msg	boards.cc	/^int board_info_type::remove_msg(struct char_data* ch, char* arg)$/;"	f	class:board_info_type	typeref:typename:int
remove_random_item	fight.cc	/^void remove_random_item(struct char_data* ch, struct obj_data* corpse)$/;"	f	typeref:typename:void
rename_char	db.cc	/^int rename_char(struct char_data* ch, char* newname)$/;"	f	typeref:typename:int
rent_info	structs.h	/^struct rent_info {$/;"	s
rentcode	structs.h	/^    int rentcode;$/;"	m	struct:rent_info	typeref:typename:int
renum_commands	shapescript.cc	/^void renum_commands(struct script_data* script)$/;"	f	typeref:typename:void
renum_rooms	shapezon.cc	/^void renum_rooms(struct zone_tree* com)$/;"	f	typeref:typename:void
renum_world	db.cc	/^void renum_world(void)$/;"	f	typeref:typename:void
renum_zone_one	zone.cc	/^void renum_zone_one(int zone)$/;"	f	typeref:typename:void
renum_zone_table	zone.cc	/^void renum_zone_table(void)$/;"	f	typeref:typename:void
replace_aliases	interpre.cc	/^void replace_aliases(struct char_data* ch, char* line)$/;"	f	typeref:typename:void
replace_object	shapeobj.cc	/^int replace_object(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
replace_pattern	modify.cc	/^int replace_pattern(descriptor_data* d, char* pattern, char* new_pattern)$/;"	f	typeref:typename:int
replace_proto	shapemob.cc	/^int replace_proto(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
replace_room	shaperom.cc	/^int replace_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
replace_script	shapescript.cc	/^int replace_script(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
replace_string	fight.cc	/^char* replace_string(char* str, char* weapon_singular, char* weapon_plural, char* bodypart)$/;"	f	typeref:typename:char *
replace_string_buf	fight.cc	/^char replace_string_buf[500];$/;"	v	typeref:typename:char[500]
replace_zone	shapezon.cc	/^int replace_zone(struct char_data* ch, char* arg)$/;"	f	typeref:typename:int
reply_number	structs.h	/^        int reply_number;$/;"	m	union:char_special_data::__anonb37368f3030a	typeref:typename:int
reply_ptr	structs.h	/^        struct char_data* reply_ptr;$/;"	m	union:char_special_data::__anonb37368f3020a	typeref:struct:char_data *
report_affection	act_info.cc	/^void report_affection(affected_type* aff, char* str)$/;"	f	typeref:typename:void
report_char_health	act_info.cc	/^void report_char_health(struct char_data* ch, struct char_data* i, char* str)$/;"	f	typeref:typename:void
report_char_mentals	act_info.cc	/^void report_char_mentals(char_data* ch, char* str, int brief_mode)$/;"	f	typeref:typename:void
report_exposed_data	char_utils.cpp	/^void elemental_spec_data::report_exposed_data(std::ostringstream& message_writer) const$/;"	f	class:elemental_spec_data	typeref:typename:void
report_inventory_sorting_to	act_othe.cc	/^void report_inventory_sorting_to(char_data* character, const char* intro_string)$/;"	f	namespace:__anonef1ab1600111	typeref:typename:void
report_mail	boards.cc	/^void report_mail(struct char_data* ch)$/;"	f	typeref:typename:void
report_mob_age	act_info.cc	/^void report_mob_age(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
report_mob_align	act_info.cc	/^void report_mob_align(struct char_data* ch, struct char_data* victim)$/;"	f	typeref:typename:void
report_news	boards.cc	/^void report_news(struct char_data* ch)$/;"	f	typeref:typename:void
report_perception	act_info.cc	/^void report_perception(char_data* ch, char* str)$/;"	f	typeref:typename:void
report_skill_status	skill_timer.cpp	/^int skill_timer::report_skill_status(int player_id, char* buffer)$/;"	f	class:game_timer::skill_timer	typeref:typename:int
report_skill_timer	act_info.cc	/^void report_skill_timer(const char_data& ch, char* buf)$/;"	f	typeref:typename:void
report_sort_choices_to	act_othe.cc	/^void report_sort_choices_to(char_data* character)$/;"	f	namespace:__anonef1ab1600111	typeref:typename:void
report_wrong_position	interpre.cc	/^void report_wrong_position(struct char_data* ch)$/;"	f	typeref:typename:void
report_wrong_target	interpre.cc	/^void report_wrong_target(struct char_data* ch, int mask, char has_arg)$/;"	f	typeref:typename:void
report_zone_power	handler.cc	/^int report_zone_power(struct char_data* ch)$/;"	f	typeref:typename:int
reread_wizlists	signals.cc	/^void reread_wizlists(int fake)$/;"	f	typeref:typename:void
rerolls	structs.h	/^    ubyte rerolls; \/* Number of rerolls that has happened *\/$/;"	m	struct:char_special2_data	typeref:typename:ubyte
rescue_message	act_offe.cc	/^char* rescue_message[MAX_RACES][2] = {$/;"	v	typeref:typename:char * [][2]
reset	char_utils.cpp	/^void specialization_data::reset()$/;"	f	class:specialization_data	typeref:typename:void
reset	structs.h	/^    virtual void reset()$/;"	f	class:damage_details	typeref:typename:void
reset	structs.h	/^    virtual void reset()$/;"	f	class:timed_damage_details	typeref:typename:void
reset	structs.h	/^    void reset() { damage_map.clear(); }$/;"	f	class:group_damaga_data	typeref:typename:void
reset	structs.h	/^    void reset()$/;"	f	class:player_damage_details	typeref:typename:void
reset	structs.h	/^    void reset()$/;"	f	struct:elemental_spec_data	typeref:typename:void
reset_board	boards.cc	/^void board_info_type::reset_board()$/;"	f	class:board_info_type	typeref:typename:void
reset_char	db.cc	/^void reset_char(struct char_data* ch)$/;"	f	typeref:typename:void
reset_com	db.h	/^struct reset_com {$/;"	s
reset_damage	char_utils.cpp	/^void group_data::reset_damage()$/;"	f	class:group_data	typeref:typename:void
reset_mode	protos.h	/^    int reset_mode;$/;"	m	struct:shape_zone	typeref:typename:int
reset_mode	zone.h	/^    int reset_mode; \/* conditions for reset (see below)   *\/$/;"	m	struct:zone_data	typeref:typename:int
reset_q_element	zone.cc	/^struct reset_q_element {$/;"	s	file:
reset_q_pool	zone.cc	/^static struct reset_q_element* reset_q_pool;$/;"	v	typeref:struct:reset_q_element *	file:
reset_q_type	zone.cc	/^struct reset_q_type {$/;"	s	file:
reset_skills	char_utils.cpp	/^void char_data::reset_skills()$/;"	f	class:char_data	typeref:typename:void
reset_small_map	db.cc	/^void reset_small_map()$/;"	f	typeref:typename:void
reset_time	db.cc	/^void reset_time(void)$/;"	f	typeref:typename:void
reset_zone	zone.cc	/^void reset_zone(int zone)$/;"	f	typeref:typename:void
reshuffle	utility.cc	/^void reshuffle(int* arr, int len)$/;"	f	typeref:typename:void
resistance	structs.h	/^    sh_int resistance; \/* bitvector for resistances *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
resistance_name	consts.cc	/^char* resistance_name[] = {$/;"	v	typeref:typename:char * []
restore_stat	clerics.cc	/^int restore_stat(char_data* character, int stat_num, int amount)$/;"	f	typeref:typename:int
retire	utility.cc	/^void retire(struct char_data* ch)$/;"	f	typeref:typename:void
retired_allowed	interpre.h	/^    char retired_allowed;$/;"	m	struct:command_info	typeref:typename:char
retiredon	structs.h	/^    int retiredon; \/* time of retirement *\/$/;"	m	struct:char_special2_data	typeref:typename:int
retirement_home_room	config.cc	/^int retirement_home_room = 1151;$/;"	v	typeref:typename:int
rev_dir	consts.cc	/^int rev_dir[] = {$/;"	v	typeref:typename:int[]
reverse_direction	act_move.cc	/^string reverse_direction(int dir)$/;"	f	typeref:typename:string
rider	structs.h	/^    struct char_data* rider;$/;"	m	struct:mount_data_type	typeref:struct:char_data *
rider_number	structs.h	/^    int rider_number;$/;"	m	struct:mount_data_type	typeref:typename:int
rm	protos.h	/^    room_data* rm[3]; \/\/  Variables$/;"	m	struct:info_script	typeref:typename:room_data * [3]
rnum	boards.h	/^    int rnum; \/* rnum of this board *\/$/;"	m	struct:board_info_type	typeref:typename:int
roll_abilities	profs.cc	/^void roll_abilities(char_data* character, int min_sum, int max_sum)$/;"	f	typeref:typename:void
roll_for_character	act_othe.cc	/^void roll_for_character(char_data* character, char_data* roll_initiator)$/;"	f	typeref:typename:void
roll_ob	combat_manager.cpp	/^combat_manager::ob_roll combat_manager::roll_ob(char_data* attacker)$/;"	f	class:game_rules::combat_manager	typeref:typename:combat_manager::ob_roll
roll_stat	profs.cc	/^int roll_stat()$/;"	f	namespace:__anon2a51bc030211	typeref:typename:int
roll_stats	profs.cc	/^void roll_stats(int num_stats, std::vector<int>& stat_array)$/;"	f	namespace:__anon2a51bc030211	typeref:typename:void
room	graph.cc	/^    int room;$/;"	m	struct:bfs_queue_struct	typeref:typename:int	file:
room	mudlle.h	/^    struct room_data* room;$/;"	m	union:list_field	typeref:struct:room_data *
room	protos.h	/^    int room; \/\/  Room in which the command is executed (if needed)$/;"	m	struct:script_data	typeref:typename:int
room	protos.h	/^    int room;$/;"	m	struct:zone_tree	typeref:typename:int
room	protos.h	/^    struct room_data* room; \/* the proto to shape, to allocate here *\/$/;"	m	struct:shape_room	typeref:struct:room_data *
room	structs.h	/^        room_data* room;$/;"	m	union:universal_list::__anonb37368f3040a	typeref:typename:room_data *
room	structs.h	/^        struct room_data* room;$/;"	m	union:target_data::__anonb37368f3010a	typeref:struct:room_data *
room_affected_by_spell	handler.cc	/^affected_type* room_affected_by_spell(const room_data* room, int spell)$/;"	f	typeref:typename:affected_type *
room_bits	consts.cc	/^char* room_bits[] = {$/;"	v	typeref:typename:char * []
room_bits_message	consts.cc	/^char* room_bits_message[32] = {$/;"	v	typeref:typename:char * [32]
room_bleed_data	structs.h	/^    room_bleed_data()$/;"	f	struct:room_bleed_data
room_bleed_data	structs.h	/^struct room_bleed_data {$/;"	s
room_chain	shaperom.cc	/^int room_chain[50] = {$/;"	v	typeref:typename:int[50]
room_data	db.cc	/^room_data::room_data()$/;"	f	class:room_data
room_data	structs.h	/^struct room_data {$/;"	s
room_data_extension	db.cc	/^room_data_extension::room_data_extension()$/;"	f	class:room_data_extension
room_data_extension	structs.h	/^struct room_data_extension {$/;"	s
room_direction_data	structs.h	/^struct room_direction_data {$/;"	s
room_flags	structs.h	/^    long room_flags; \/* DEATH,DARK ... etc                 *\/$/;"	m	struct:room_data	typeref:typename:long
room_move_cost	act_move.cc	/^int room_move_cost(char_data* character, room_data* new_room)$/;"	f	typeref:typename:int
room_msg	structs.h	/^    char* room_msg; \/* message to room     *\/$/;"	m	struct:msg_type	typeref:typename:char *
room_spell_message	consts.cc	/^char* room_spell_message[MAX_SKILLS] = {$/;"	v	typeref:typename:char * []
room_target	olog_hai.cpp	/^void room_target(char_data* ch, void (*skill_damage)(char_data* character, char_data* victim))$/;"	f	namespace:olog_hai	typeref:typename:void
room_track	structs.h	/^    struct room_track_data room_track[NUM_OF_TRACKS]; \/* track info.. *\/$/;"	m	struct:room_data	typeref:struct:room_track_data[]
room_track_data	structs.h	/^    room_track_data()$/;"	f	struct:room_track_data
room_track_data	structs.h	/^struct room_track_data {$/;"	s
root	protos.h	/^    struct script_data* root; \/\/  1st command in the script;$/;"	m	struct:shape_script	typeref:struct:script_data *
root	protos.h	/^    struct zone_tree* root; \/* the root of the loaded command record*\/$/;"	m	struct:shape_zone	typeref:struct:zone_tree *
root_owner	protos.h	/^    struct owner_list* root_owner;$/;"	m	struct:shape_zone	typeref:struct:owner_list *
rots_clock	clock.cpp	/^rots_clock::rots_clock()$/;"	f	class:rots_clock
rots_clock	clock.h	/^class rots_clock {$/;"	c
rp_flag	structs.h	/^    int rp_flag; \/* Special flag for PC, racial behaviour for - *\/$/;"	m	struct:char_special2_data	typeref:typename:int
run	Makefile	/^run: ..\/bin\/ageland setup$/;"	t
run	delayed_command_interpreter.cpp	/^void delayed_command_interpreter::run()$/;"	f	class:game_types::delayed_command_interpreter	typeref:typename:void
run_script	script.cc	/^int run_script(struct info_script* info, struct script_data* position)$/;"	f	typeref:typename:int
run_the_game	comm.cc	/^void run_the_game(sh_int port)$/;"	f	typeref:typename:void
rush_forward_damage	structs.h	/^    unsigned int rush_forward_damage;$/;"	m	struct:wild_fighting_data	typeref:typename:unsigned int
sanctuary_msg	structs.h	/^    struct msg_type sanctuary_msg; \/* messages when hit on sanctuary	*\/$/;"	m	struct:message_type	typeref:struct:msg_type
save_board	boards.cc	/^void board_info_type::save_board()$/;"	f	class:board_info_type	typeref:typename:void
save_char	db.cc	/^void save_char(struct char_data* ch, int load_room, int notify_char)$/;"	f	typeref:typename:void
save_mudlle	shapemdl.cc	/^int save_mudlle(struct char_data* ch)$/;"	f	typeref:typename:int
save_player	db.cc	/^void save_player(struct char_data* ch, int load_room, int index_pos)$/;"	f	typeref:typename:void
saves_confuse	spell_pa.cc	/^char saves_confuse(struct char_data* victim, struct char_data* caster)$/;"	f	typeref:typename:char
saves_insight	spell_pa.cc	/^char saves_insight(struct char_data* victim, struct char_data* caster)$/;"	f	typeref:typename:char
saves_leadership	spell_pa.cc	/^char saves_leadership(struct char_data* victim)$/;"	f	typeref:typename:char
saves_mystic	spell_pa.cc	/^char saves_mystic(struct char_data* ch)$/;"	f	typeref:typename:char
saves_poison	spell_pa.cc	/^char saves_poison(struct char_data* victim, struct char_data* caster)$/;"	f	typeref:typename:char
saves_power	spell_pa.cc	/^char saves_power(const char_data* victim, sh_int casting_power, sh_int save_bonus)$/;"	f	typeref:typename:char
saves_spell	spell_pa.cc	/^char saves_spell(struct char_data* ch, sh_int level, int bonus)$/;"	f	typeref:typename:char
saving_throw	structs.h	/^    int saving_throw; \/* saving throw for new mobiles *\/$/;"	m	struct:char_special2_data	typeref:typename:int
say_spell	spell_pa.cc	/^void say_spell(char_data* caster, int spell_index)$/;"	f	typeref:typename:void
say_to_char	act_comm.cc	/^void say_to_char(struct char_data* speaker, struct char_data* aud,$/;"	f	typeref:typename:void
sbyte	platdef.h	/^typedef signed char sbyte;$/;"	t	typeref:typename:signed char
scale_guardian	mystic.cc	/^void scale_guardian(int guardian_type, const char_data* caster, char_data* guardian_mob, bool re/;"	f	typeref:typename:void
scan_file	mail.cc	/^int scan_file(void)$/;"	f	typeref:typename:int
screen_width	config.cc	/^sh_int screen_width = 79; \/* for line wrapping, if turned on *\/$/;"	v	typeref:typename:sh_int
script	protos.h	/^    struct script_data* script; \/\/  Current command in the script$/;"	m	struct:shape_script	typeref:struct:script_data *
script	protos.h	/^    struct script_data* script; \/\/  The first command in the script$/;"	m	struct:script_head	typeref:struct:script_data *
script.o	Makefile	/^script.o : script.cc structs.h utils.h comm.h interpre.h protos.h script.h$/;"	t
script_data	protos.h	/^struct script_data {$/;"	s
script_head	protos.h	/^struct script_head { \/\/  The header structure for a linked list of scripts - forms the index f/;"	s
script_info	structs.h	/^    struct info_script* script_info; \/* Pointer to char_script (protos.h) *\/$/;"	m	struct:char_special_data	typeref:struct:info_script *
script_info	structs.h	/^    struct info_script* script_info; \/* Pointer to char_script (protos.h) 0 if no script *\/$/;"	m	struct:obj_flag_data	typeref:struct:info_script *
script_number	structs.h	/^    int script_number; \/* identifies the script which is triggered under certain conditions *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
script_number	structs.h	/^    int script_number; \/* vnum of script *\/$/;"	m	struct:char_special_data	typeref:typename:int
script_table	db.cc	/^struct script_head* script_table = 0;$/;"	v	typeref:struct:script_head *
search_block	interpre.cc	/^int search_block(char* arg, char** list, char exact)$/;"	f	typeref:typename:int
secs_to_unretire	objsave.cc	/^long secs_to_unretire(struct char_data* ch)$/;"	f	typeref:typename:long
sector_age_value	weather.cc	/^int sector_age_value(int sector_type)$/;"	f	typeref:typename:int
sector_type	structs.h	/^    int sector_type; \/* sector type (move\/hide)*\/ \/*changed*\/$/;"	m	struct:room_data	typeref:typename:int
sector_types	consts.cc	/^char* sector_types[] = {$/;"	v	typeref:typename:char * []
sector_variables	ranger.cc	/^int sector_variables[] = {$/;"	v	typeref:typename:int[]
see_hiding	ranger.cc	/^int see_hiding(struct char_data* seeker)$/;"	f	typeref:typename:int
select_msg	boards.cc	/^int board_info_type::select_msg(int msg, int softflag)$/;"	f	class:board_info_type	typeref:typename:int
self_msg	structs.h	/^    struct msg_type self_msg; \/* messages when hit on god		*\/$/;"	m	struct:message_type	typeref:struct:msg_type
send_to_all	comm.cc	/^void send_to_all(const char* message)$/;"	f	typeref:typename:void
send_to_char	comm.cc	/^void send_to_char(const char* message, char_data* character)$/;"	f	typeref:typename:void
send_to_char	comm.cc	/^void send_to_char(const char* message, int character_id)$/;"	f	typeref:typename:void
send_to_except	comm.cc	/^void send_to_except(const char* messg, struct char_data* ch)$/;"	f	typeref:typename:void
send_to_outdoor	comm.cc	/^void send_to_outdoor(const char* messg, int mode)$/;"	f	typeref:typename:void
send_to_room	comm.cc	/^void send_to_room(const char* messg, int room)$/;"	f	typeref:typename:void
send_to_room_except	comm.cc	/^void send_to_room_except(const char* messg, int room, struct char_data* ch)$/;"	f	typeref:typename:void
send_to_room_except_two	comm.cc	/^void send_to_room_except_two(const char* messg, int room,$/;"	f	typeref:typename:void
send_to_sector	comm.cc	/^void send_to_sector(const char* messg, int sector_type)$/;"	f	typeref:typename:void
service_commands	mudlle.cc	/^void service_commands(struct char_data* host, char* arg, int cmd,$/;"	f	typeref:typename:void
service_get_old	mudlle.cc	/^void service_get_old(struct char_data* host, struct char_data* ch, char* cmdline,$/;"	f	typeref:typename:void
service_set_old	mudlle.cc	/^void service_set_old(struct char_data* host, struct char_data* ch, char* cmdline,$/;"	f	typeref:typename:void
set	char_utils.cpp	/^void specialization_data::set(char_data& character)$/;"	f	class:specialization_data	typeref:typename:void
set_bit	base_utils.h	/^void set_bit(T var, T bit)$/;"	f	namespace:utils	typeref:typename:void
set_blood_trail	act_move.cc	/^void set_blood_trail(struct char_data* ch, int dir)$/;"	f	typeref:typename:void
set_casting	char_utils.cpp	/^void set_casting(char_data& character, int value)$/;"	f	namespace:utils	typeref:typename:void
set_char_exists	handler.cc	/^void set_char_exists(int num)$/;"	f	typeref:typename:void
set_colornum	color.cc	/^void set_colornum(struct char_data* ch, int col, int value)$/;"	f	typeref:typename:void
set_colors_default	color.cc	/^void set_colors_default(struct char_data* ch)$/;"	f	typeref:typename:void
set_command_room	shapezon.cc	/^void set_command_room(struct reset_com* com, int rom)$/;"	f	typeref:typename:void
set_condition	char_utils.cpp	/^void set_condition(char_data& character, int index, sh_int value)$/;"	f	namespace:utils	typeref:typename:void
set_exit_state	db.cc	/^int set_exit_state(struct room_data* room, int dir, int newstate)$/;"	f	typeref:typename:int
set_fighting	fight.cc	/^void set_fighting(struct char_data* ch, struct char_data* vict)$/;"	f	typeref:typename:void
set_guardian_health	mystic.cc	/^void set_guardian_health(char_data* guardian_mob, int new_health, bool restore_health)$/;"	f	typeref:typename:void
set_guardian_stats	mystic.cc	/^void set_guardian_stats(const int caster_mystic_level, char_ability_data& guardian_mob_abilities/;"	f	typeref:typename:void
set_int_value	script.cc	/^void set_int_value(struct info_script* info, int param, int val)$/;"	f	typeref:typename:void
set_knowledge	char_utils.cpp	/^void set_knowledge(char_data& character, int skill_index, byte value)$/;"	f	namespace:utils	typeref:typename:void
set_mental_delay	utility.cc	/^void set_mental_delay(struct char_data* ch, int value)$/;"	f	typeref:typename:void
set_player_con	limits.cc	/^void set_player_con(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_damage	limits.cc	/^void set_player_damage(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_hit	limits.cc	/^void set_player_hit(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_mana	limits.cc	/^void set_player_mana(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_moves	limits.cc	/^void set_player_moves(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_ob	limits.cc	/^void set_player_ob(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_player_spell_pen	limits.cc	/^void set_player_spell_pen(struct char_data* ch, int mod, bool mode)$/;"	f	typeref:typename:void
set_prof_level	char_utils.cpp	/^void set_prof_level(int prof, char_data& character, sh_int value)$/;"	f	namespace:utils	typeref:typename:void
set_shooting	char_utils.cpp	/^void set_shooting(char_data& character, int value)$/;"	f	namespace:utils	typeref:typename:void
set_skill	char_utils.cpp	/^void set_skill(char_data& character, int skill_index, byte value)$/;"	f	namespace:utils	typeref:typename:void
set_sort_value	act_othe.cc	/^void set_sort_value(int sort_index, char_data* character)$/;"	f	namespace:__anonef1ab1600111	typeref:typename:void
set_specialization	char_utils.cpp	/^void set_specialization(char_data& character, game_types::player_specs value)$/;"	f	namespace:utils	typeref:typename:void
set_spell_power	structs.h	/^    void set_spell_power(sh_int bonus) { spell_power += bonus; };$/;"	f	struct:char_point_data	typeref:typename:void
set_spirits	char_utils.cpp	/^void set_spirits(char_data* character, int spirits)$/;"	f	namespace:utils	typeref:typename:void
set_struct	act_wiz.cc	/^struct set_struct {$/;"	s	file:
set_sun_info	weather.cc	/^void set_sun_info(int rise, int set)$/;"	f	typeref:typename:void
set_tactics	char_utils.cpp	/^void set_tactics(char_data& character, int value)$/;"	f	namespace:utils	typeref:typename:void
set_title	limits.cc	/^void set_title(char_data* character)$/;"	f	typeref:typename:void
setup	Makefile	/^setup:$/;"	t
setup_dir	db.cc	/^void setup_dir(FILE* fl, int room, int dir)$/;"	f	typeref:typename:void
sex	structs.h	/^    byte sex; \/* PC \/ NPC s sex                       	*\/$/;"	m	struct:char_player_data	typeref:typename:byte
sex	structs.h	/^    byte sex;$/;"	m	struct:char_file_u	typeref:typename:byte
sh_int	char_utils.h	/^typedef signed short sh_int;$/;"	t	namespace:utils	typeref:typename:signed short
sh_int	platdef.h	/^typedef signed short int sh_int;$/;"	t	typeref:typename:signed short int
shape_center	shapemob.cc	/^void shape_center(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
shape_center_mudlle	shapemdl.cc	/^void shape_center_mudlle(struct char_data* ch, char* argument)$/;"	f	typeref:typename:void
shape_center_obj	shapeobj.cc	/^void shape_center_obj(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
shape_center_proto	shapemob.cc	/^void shape_center_proto(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
shape_center_room	shaperom.cc	/^void shape_center_room(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
shape_center_script	shapescript.cc	/^void shape_center_script(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
shape_center_zone	shapezon.cc	/^void shape_center_zone(struct char_data* ch, char* arg)$/;"	f	typeref:typename:void
shape_mudlle	protos.h	/^struct shape_mudlle {$/;"	s
shape_object	protos.h	/^struct shape_object {$/;"	s
shape_proto	protos.h	/^struct shape_proto {$/;"	s
shape_room	protos.h	/^struct shape_room {$/;"	s
shape_script	protos.h	/^struct shape_script {$/;"	s
shape_standup	shapemob.cc	/^int shape_standup(struct char_data* ch, int pos)$/;"	f	typeref:typename:int
shape_tbl	db.cc	/^char* shape_tbl = 0; \/* shape help			*\/$/;"	v	typeref:typename:char *
shape_zone	protos.h	/^struct shape_zone {$/;"	s
shapemdl.o	Makefile	/^shapemdl.o : shapemdl.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shapemob.o	Makefile	/^shapemob.o : shapemob.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shapeobj.o	Makefile	/^shapeobj.o : shapeobj.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shaperom.o	Makefile	/^shaperom.o : shaperom.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shapescript.o	Makefile	/^shapescript.o : shapescript.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shapezon.o	Makefile	/^shapezon.o : shapezon.cc structs.h utils.h comm.h interpre.h protos.h$/;"	t
shapezone_lastroom	shapezon.cc	/^int shapezone_lastroom;$/;"	v	typeref:typename:int
shift	protos.h	/^    sh_int shift; \/* for editor, how much was typed already *\/$/;"	m	struct:shape_object	typeref:typename:sh_int
shift	protos.h	/^    sh_int shift; \/* for editor, how much was typed already *\/$/;"	m	struct:shape_proto	typeref:typename:sh_int
shift	protos.h	/^    sh_int shift; \/* for editor, how much was typed already *\/$/;"	m	struct:shape_room	typeref:typename:sh_int
shift	protos.h	/^    sh_int shift; \/* for editor, how much was typed already *\/$/;"	m	struct:shape_zone	typeref:typename:sh_int
shintVictimID	db.h	/^    sh_int shintVictimID; \/* idnum of victim *\/$/;"	m	struct:exploit_record	typeref:typename:sh_int
shoot_calculate_damage	ranger.cc	/^int shoot_calculate_damage(char_data* archer, char_data* victim, const obj_data* arrow, int& hit/;"	f	typeref:typename:int
shoot_calculate_success	ranger.cc	/^int shoot_calculate_success(const char_data* archer, const char_data* victim, const obj_data* ar/;"	f	typeref:typename:int
shoot_calculate_wait	ranger.cc	/^int shoot_calculate_wait(const char_data* archer)$/;"	f	typeref:typename:int
shooting	consts.cc	/^char* shooting[] = {$/;"	v	typeref:typename:char * []
shooting	structs.h	/^    ubyte shooting; \/* shooting speed for archery spec*\/$/;"	m	struct:char_special_data	typeref:typename:ubyte
shop.o	Makefile	/^shop.o : shop.cc structs.h comm.h handler.h db.h interpre.h utils.h$/;"	t
shop_data	shop.cc	/^struct shop_data {$/;"	s	file:
shop_index	shop.cc	/^struct shop_data* shop_index;$/;"	v	typeref:struct:shop_data *
shop_producing	shop.cc	/^int shop_producing(struct obj_data* item, int shop_nr)$/;"	f	typeref:typename:int
shopping_buy	shop.cc	/^void shopping_buy(char* arg, struct char_data* ch,$/;"	f	typeref:typename:void
shopping_kill	shop.cc	/^void shopping_kill(char* arg, struct char_data* ch,$/;"	f	typeref:typename:void
shopping_list	shop.cc	/^void shopping_list(char* arg, struct char_data* ch,$/;"	f	typeref:typename:void
shopping_sell	shop.cc	/^void shopping_sell(char* arg, struct char_data* ch, struct char_data* keeper, int shop_nr)$/;"	f	typeref:typename:void
shopping_value	shop.cc	/^void shopping_value(char* arg, struct char_data* ch,$/;"	f	typeref:typename:void
short_descr	structs.h	/^    char* short_descr; \/* for 'actions'                        	*\/$/;"	m	struct:char_player_data	typeref:typename:char *
short_description	structs.h	/^    char* short_description; \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data	typeref:typename:char *
short_name	boards.h	/^    char short_name[50]; \/*filename without directories,used for html, too*\/$/;"	m	struct:board_info_type	typeref:typename:char[50]
should_apply_spell_penetration	mage.cc	/^bool should_apply_spell_penetration(const char_data* caster)$/;"	f	typeref:typename:bool
should_apply_spell_penetration	magic.cpp	/^bool should_apply_spell_penetration(const char_data* caster)$/;"	f	typeref:typename:bool
should_double_strength	act_move.cc	/^bool should_double_strength(char_data* character)$/;"	f	typeref:typename:bool
show_blood_trail	graph.cc	/^int show_blood_trail(struct char_data* ch, char* name, int mode)$/;"	f	typeref:typename:int
show_board	boards.cc	/^int board_info_type::show_board(struct char_data* ch,$/;"	f	class:board_info_type	typeref:typename:int
show_char_to_char	act_info.cc	/^void show_char_to_char(struct char_data* i, struct char_data* ch, int mode,$/;"	f	typeref:typename:void
show_command	shapescript.cc	/^void show_command(char_data* ch, script_data* script)$/;"	f	typeref:typename:void
show_command	shapezon.cc	/^void show_command(char* str, struct zone_tree* zon)$/;"	f	typeref:typename:void
show_equipment_to_char	act_info.cc	/^void show_equipment_to_char(struct char_data* from, struct char_data* to)$/;"	f	typeref:typename:void
show_mount_to_char	act_info.cc	/^void show_mount_to_char(struct char_data* i, struct char_data* ch,$/;"	f	typeref:typename:void
show_mudlle	shapemdl.cc	/^void show_mudlle(struct char_data* ch)$/;"	f	typeref:typename:void
show_obj_to_char	act_info.cc	/^void show_obj_to_char(struct obj_data* object, struct char_data* ch, int mode)$/;"	f	typeref:typename:void
show_room_affection	act_info.cc	/^void show_room_affection(char* str, struct affected_type* aff, int mode)$/;"	f	typeref:typename:void
show_room_weather	act_info.cc	/^void show_room_weather(char* str, struct char_data* ch)$/;"	f	typeref:typename:void
show_string	modify.cc	/^void show_string(struct descriptor_data* d, char* input)$/;"	f	typeref:typename:void
show_struct	act_wiz.cc	/^    struct show_struct {$/;"	s	function:ACMD	file:
show_tracks	graph.cc	/^int show_tracks(char_data* ch, char* name, int mode)$/;"	f	typeref:typename:int
showstr_head	structs.h	/^    char* showstr_head; \/* for paging through texts		*\/$/;"	m	struct:descriptor_data	typeref:typename:char *
showstr_point	structs.h	/^    char* showstr_point; \/*		-			*\/$/;"	m	struct:descriptor_data	typeref:typename:char *
side	pkill.h	/^    int side;$/;"	m	struct:__anonb27b44b70208	typeref:typename:int
side_fame	pkill.c	/^    int side_fame;$/;"	m	struct:__anonb27b44b20108	typeref:typename:int	file:
signal_setup	signals.cc	/^void signal_setup(void)$/;"	f	typeref:typename:void
signals.o	Makefile	/^signals.o : signals.cc utils.h structs.h$/;"	t
sigsegv_handler	comm.cc	/^void sigsegv_handler(int sig)$/;"	f	typeref:typename:void
singleton	singleton.h	/^class singleton {$/;"	c
singular	spells.h	/^    char* singular;$/;"	m	struct:attack_hit_type	typeref:typename:char *
site	db.h	/^    char site[BANNED_SITE_LENGTH + 1];$/;"	m	struct:ban_list_element	typeref:typename:char[]
size	structs.h	/^    size_t size() const { return members.size(); }$/;"	f	class:group_data	typeref:typename:size_t
skill_data	skill_timer.h	/^        skill_data()$/;"	f	struct:game_timer::skill_timer::skill_data
skill_data	skill_timer.h	/^    struct skill_data {$/;"	s	class:game_timer::skill_timer
skill_data	spells.h	/^struct skill_data {$/;"	s
skill_fields	modify.cc	/^char* skill_fields[] = {$/;"	v	typeref:typename:char * []
skill_id	skill_timer.h	/^        int skill_id;$/;"	m	struct:game_timer::skill_timer::skill_data	typeref:typename:int
skill_id_set	big_brother.h	/^    typedef std::set<int> skill_id_set;$/;"	t	class:game_rules::big_brother	typeref:typename:std::set<int>
skill_spec	spells.h	/^    char skill_spec; \/* spell\/skill group, specialization *\/$/;"	m	struct:skill_data	typeref:typename:char
skill_tbl	db.cc	/^char* skill_tbl = 0; \/* skills help			*\/$/;"	v	typeref:typename:char *
skill_teach_data	spells.h	/^struct skill_teach_data {$/;"	s
skill_timer	skill_timer.h	/^    skill_timer(const weather_data* weather, const room_data* world)$/;"	f	class:game_timer::skill_timer
skill_timer	skill_timer.h	/^class skill_timer : public world_singleton<skill_timer> {$/;"	c	namespace:game_timer
skill_timer.o	Makefile	/^skill_timer.o : skill_timer.cpp skill_timer.h singleton.h$/;"	t
skills	consts.cc	/^struct skill_data skills[MAX_SKILLS] = {$/;"	v	typeref:struct:skill_data[]
skills	structs.h	/^    byte skills[MAX_SKILLS];$/;"	m	struct:char_file_u	typeref:typename:byte[]
skills	structs.h	/^    byte skills[MAX_SKILLS];$/;"	m	struct:player_skill_data	typeref:typename:byte[]
skills	structs.h	/^    byte* skills; \/* dynam. alloc. array of pracs spent                                        /;"	m	struct:char_data	typeref:typename:byte *
skip_spaces	spell_pa.cc	/^char* skip_spaces(char* string)$/;"	f	typeref:typename:char *
sky	structs.h	/^    int sky[13]; \/* How is the sky? cloudy, sunny, etc for each sector_type*\/$/;"	m	struct:weather_data	typeref:typename:int[13]
sky_look	act_info.cc	/^char* sky_look[6] = {$/;"	v	typeref:typename:char * [6]
slashing_proc_chance	weapon_master_handler.cpp	/^    constexpr const float slashing_proc_chance = 0.40f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
slashing_subtypes	obj2html.cc	/^struct obj2html_type slashing_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
slot_num	boards.h	/^    int slot_num; \/* pos of message in "master index" *\/$/;"	m	struct:board_msginfo	typeref:typename:int
small_map	db.cc	/^char small_map[2 * SMALL_WORLD_RADIUS + 3][4 * SMALL_WORLD_RADIUS + 7]; \/\/Ingolemo small_map a/;"	v	typeref:typename:char[][]
small_outbuf	structs.h	/^    char small_outbuf[SMALL_BUFSIZE]; \/* standard output bufer		*\/$/;"	m	struct:descriptor_data	typeref:typename:char[]
smiting_proc_chance	weapon_master_handler.cpp	/^    constexpr float smiting_proc_chance(int damage)$/;"	f	namespace:player_spec::__anonc55e5b280111	typeref:typename:float
snoop	structs.h	/^    struct snoop_data snoop; \/* to snoop people			*\/$/;"	m	struct:descriptor_data	typeref:struct:snoop_data
snoop_by	structs.h	/^    struct char_data* snoop_by; \/* And who is snooping this char	*\/$/;"	m	struct:snoop_data	typeref:struct:char_data *
snoop_data	structs.h	/^struct snoop_data {$/;"	s
snooping	structs.h	/^    struct char_data* snooping; \/* Who is this char snooping		*\/$/;"	m	struct:snoop_data	typeref:struct:char_data *
snow	structs.h	/^    int snow[13]; \/* Is there snow on the ground? *\/$/;"	m	struct:weather_data	typeref:typename:int[13]
snuck_in	ranger.cc	/^void snuck_in(struct char_data* ch)$/;"	f	typeref:typename:void
snuck_out	ranger.cc	/^void snuck_out(struct char_data* ch)$/;"	f	typeref:typename:void
soc_mess_list	act_soci.cc	/^struct social_messg* soc_mess_list = 0;$/;"	v	typeref:struct:social_messg *
social_command_number	act_soci.cc	/^int social_command_number = -1;$/;"	v	typeref:typename:int
social_list_top	act_soci.cc	/^int social_list_top = -1;$/;"	v	typeref:typename:int
social_messg	db.h	/^struct social_messg {$/;"	s
social_parser	act_soci.cc	/^int social_parser(char_data* ch, char* argument, waiting_type* wtl)$/;"	f	typeref:typename:int
social_type	spec_pro.cc	/^struct social_type {$/;"	s	file:
sort_commands	act_info.cc	/^void sort_commands(void)$/;"	f	typeref:typename:void
sort_pos	interpre.h	/^    sh_int sort_pos;$/;"	m	struct:command_info	typeref:typename:sh_int
source	structs.h	/^    void* source;$/;"	m	struct:affection_source	typeref:typename:void *
source_id	structs.h	/^    int source_id;$/;"	m	struct:affection_source	typeref:typename:int
source_type	structs.h	/^enum source_type {$/;"	g
space_length	modify.cc	/^int space_length(char* str)$/;"	f	typeref:typename:int
spare0	structs.h	/^    sh_int spare0;$/;"	m	struct:rent_info	typeref:typename:sh_int
spare1	structs.h	/^    int spare1;$/;"	m	struct:follower_file_elem	typeref:typename:int
spare1	structs.h	/^    sh_int spare1;$/;"	m	struct:rent_info	typeref:typename:sh_int
spare2	structs.h	/^    int spare2;$/;"	m	struct:follower_file_elem	typeref:typename:int
spare2	structs.h	/^    sh_int spare2;$/;"	m	struct:rent_info	typeref:typename:sh_int
spare3	structs.h	/^    int spare3;$/;"	m	struct:rent_info	typeref:typename:int
spare4	structs.h	/^    int spare4;$/;"	m	struct:rent_info	typeref:typename:int
spare5	structs.h	/^    int spare5;$/;"	m	struct:rent_info	typeref:typename:int
spare6	structs.h	/^    int spare6;$/;"	m	struct:rent_info	typeref:typename:int
spare7	structs.h	/^    int spare7;$/;"	m	struct:rent_info	typeref:typename:int
spear_subtypes	obj2html.cc	/^struct obj2html_type spear_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
spec	warrior_spec_handlers.h	/^    game_types::player_specs spec;$/;"	m	class:player_spec::weapon_master_handler	typeref:typename:game_types::player_specs
spec	warrior_spec_handlers.h	/^    game_types::player_specs spec;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:game_types::player_specs
spec_ass.o	Makefile	/^spec_ass.o : spec_ass.cc structs.h db.h interpre.h utils.h$/;"	t
spec_pro.o	Makefile	/^spec_pro.o : spec_pro.cc structs.h utils.h comm.h interpre.h \\$/;"	t
spec_pro_message	spec_ass.cc	/^char* spec_pro_message[] = {$/;"	v	typeref:typename:char * []
special	interpre.cc	/^int special(struct char_data* ch, int cmd, char* arg, int callflag,$/;"	f	typeref:typename:int
special_func	interpre.h	/^typedef int (*special_func)(char_data* host, char_data* character, int cmd, char* argument, int /;"	t	typeref:typename:int (*)(char_data * host,char_data * character,int cmd,char * argument,int callflag,waiting_type * wait_data)
special_func_ptr	comm.h	/^typedef int (*special_func_ptr)(char_data* host, char_data* character, int cmd, char* argument, /;"	t	typeref:typename:int (*)(char_data * host,char_data * character,int cmd,char * argument,int call_flag,waiting_type * wait_list)
special_list	mudlle.h	/^struct special_list {$/;"	s
special_ptr	delayed_command_interpreter.cpp	/^    typedef int (*special_ptr)(char_data * ch, char_data * victim, int cmd, char* argument, int /;"	t	function:game_types::delayed_command_interpreter::run	typeref:typename:int (*)(char_data * ch,char_data * victim,int cmd,char * argument,int call_flag,waiting_type * wait_list)	file:
specialization	structs.h	/^    int specialization;$/;"	m	struct:char_prof_data	typeref:typename:int
specialization_data	structs.h	/^    specialization_data()$/;"	f	struct:specialization_data
specialization_data	structs.h	/^struct specialization_data {$/;"	s
specialization_info	structs.h	/^struct specialization_info {$/;"	s
specializations	structs.h	/^    int specializations[5];$/;"	m	struct:char_prof_data	typeref:typename:int[5]
specialize_name	consts.cc	/^const char* specialize_name[game_types::PS_Count] = {$/;"	v	typeref:typename:const char * []
specialized_mages	comm.cc	/^std::vector<char_data*> specialized_mages;$/;"	v	typeref:typename:std::vector<char_data * >
specials	structs.h	/^    struct char_special_data specials; \/* Special playing constants      *\/$/;"	m	struct:char_data	typeref:struct:char_special_data
specials2	structs.h	/^    struct char_special2_data specials2; \/* Additional special constants  *\/$/;"	m	struct:char_data	typeref:struct:char_special2_data
specials2	structs.h	/^    struct char_special2_data specials2;$/;"	m	struct:char_file_u	typeref:struct:char_special2_data
spell_engine	magic.h	/^class spell_engine {$/;"	c	namespace:magic
spell_expose_elements	mage.cc	/^void spell_expose_elements(char_data* caster, char* arg, int type, char_data* victim, obj_data* /;"	f	typeref:typename:void
spell_id	structs.h	/^    int spell_id;$/;"	m	struct:elemental_spec_data	typeref:typename:int
spell_list	spec_pro.cc	/^int spell_list[][4] = {$/;"	v	typeref:typename:int[][4]
spell_pa.o	Makefile	/^spell_pa.o : spell_pa.cc structs.h utils.h comm.h db.h interpre.h \\$/;"	t
spell_pen	structs.h	/^    sh_int spell_pen;$/;"	m	struct:char_point_data	typeref:typename:sh_int
spell_pointer	spells.h	/^    void (*spell_pointer)(char_data* caster, char* arg,$/;"	m	struct:skill_data	typeref:typename:void (*)(char_data * caster,char * arg,int type,char_data * tar_ch,obj_data * tar_obj,int digit,int is_object)
spell_power	structs.h	/^    sh_int spell_power;$/;"	m	struct:char_point_data	typeref:typename:sh_int
spell_tbl	db.cc	/^char* spell_tbl = 0; \/* spells help			*\/$/;"	v	typeref:typename:char *
spell_wear_off_msg	consts.cc	/^char* spell_wear_off_msg[] = {$/;"	v	typeref:typename:char * []
spells_to_learn	structs.h	/^    int spells_to_learn; \/* How many can you learn yet this level*\/$/;"	m	struct:char_special2_data	typeref:typename:int
spirit	structs.h	/^    int spirit; \/* well, the spirit *\/$/;"	m	struct:char_point_data	typeref:typename:int
spirit_death	fight.cc	/^void spirit_death(char_data* character)$/;"	f	typeref:typename:void
spllog_mage_level	spell_pa.cc	/^short spllog_mage_level; \/* the effective level of the caster *\/$/;"	v	typeref:typename:short
spllog_save	spell_pa.cc	/^short spllog_save; \/* the effective save computed in saves_spell *\/$/;"	v	typeref:typename:short
spllog_saves	spell_pa.cc	/^unsigned char spllog_saves; \/* 1: character saved, 0: character failed *\/$/;"	v	typeref:typename:unsigned char
sprintbit	utility.cc	/^void sprintbit(long vektor, char* names[], char* result, int var)$/;"	f	typeref:typename:void
sprinttype	utility.cc	/^void sprinttype(int type, char* names[], char* result)$/;"	f	typeref:typename:void
square_root	consts.cc	/^sh_int square_root[171] = {$/;"	v	typeref:typename:sh_int[171]
stabbing_proc_chance	weapon_master_handler.cpp	/^    constexpr const float stabbing_proc_chance = 0.50f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
stat_assigner	profs.cc	/^    stat_assigner(char_data& character)$/;"	f	struct:_INTERNAL::stat_assigner	file:
stat_assigner	profs.cc	/^struct stat_assigner {$/;"	s	namespace:_INTERNAL	file:
stat_attrs	act_info.cc	/^static char* stat_attrs[] = {$/;"	v	typeref:typename:char * []	file:
stat_darkie_counter	consts.cc	/^unsigned long stat_darkie_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_darkie_legend_counter	consts.cc	/^unsigned long stat_darkie_legend_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_defects	act_info.cc	/^static char* stat_defects[] = {$/;"	v	typeref:typename:char * []	file:
stat_immortals_counter	consts.cc	/^unsigned long stat_immortals_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_mortals_counter	consts.cc	/^unsigned long stat_mortals_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_ticks_passed	consts.cc	/^unsigned long stat_ticks_passed = 0;$/;"	v	typeref:typename:unsigned long
stat_update	comm.cc	/^void stat_update()$/;"	f	typeref:typename:void
stat_whitie_counter	consts.cc	/^unsigned long stat_whitie_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_whitie_legend_counter	consts.cc	/^unsigned long stat_whitie_legend_counter = 0;$/;"	v	typeref:typename:unsigned long
stat_word	clerics.cc	/^const char* const stat_word[] = {$/;"	v	typeref:typename:const char * const[]
stock_room	shop.cc	/^    int stock_room; \/* where it's goods are kept        *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
stop_fighting	fight.cc	/^void stop_fighting(struct char_data* ch)$/;"	f	typeref:typename:void
stop_fighting_him	fight.cc	/^void stop_fighting_him(struct char_data* ch)$/;"	f	typeref:typename:void
stop_follower	handler.cc	/^void stop_follower(struct char_data* ch, int mode)$/;"	f	typeref:typename:void
stop_hiding	ranger.cc	/^void stop_hiding(struct char_data* ch, char mode)$/;"	f	typeref:typename:void
stop_riding	handler.cc	/^void stop_riding(struct char_data* ch)$/;"	f	typeref:typename:void
stop_riding_all	handler.cc	/^void stop_riding_all(char_data* mount)$/;"	f	typeref:typename:void
stop_time	interpre.h	/^    int stop_time[100]; \/\/ in quarter-ticks (?) 0 = no stopping$/;"	m	struct:ferry_captain_type	typeref:typename:int[100]
store_mail	mail.cc	/^void store_mail(char* to, char* from, char* message_pointer)$/;"	f	typeref:typename:void
store_prog_number	structs.h	/^    int store_prog_number; \/* in database, stores prog_numbers for mobiles,*\/$/;"	m	struct:char_special_data	typeref:typename:int
store_to_char	db.cc	/^void store_to_char(struct char_file_u* st, struct char_data* ch)$/;"	f	typeref:typename:void
str	protos.h	/^    char* str[3]; \/\/  General text field for holding variable text information, eg a character/;"	m	struct:info_script	typeref:typename:char * [3]
str	structs.h	/^    char** str; \/* for the modify-str system		*\/$/;"	m	struct:descriptor_data	typeref:typename:char **
str	structs.h	/^    signed char str;$/;"	m	struct:char_ability_data	typeref:typename:signed char
str_cmp	utility.cc	/^int str_cmp(char* arg1, char* arg2)$/;"	f	typeref:typename:int
str_dup	utility.cc	/^char* str_dup(const char* source)$/;"	f	typeref:typename:char *
str_dynamic	protos.h	/^    int str_dynamic[3]; \/\/ Set dynamic[x] to 1 if script allocated str[x]$/;"	m	struct:info_script	typeref:typename:int[3]
str_speed	structs.h	/^    int str_speed; \/*UPDATE* For temporary use, should be removed later*\/$/;"	m	struct:char_special_data	typeref:typename:int
strcpy_lang	utility.cc	/^char* strcpy_lang(char* str1, char* str2, byte freq, int maxlen)$/;"	f	typeref:typename:char *
string	act_move.cc	/^typedef char* string;$/;"	t	typeref:typename:char *	file:
string	ranger.cc	/^typedef char* string;$/;"	t	typeref:typename:char *	file:
string_add	modify.cc	/^void string_add(struct descriptor_data* d, char* str)$/;"	f	typeref:typename:void
string_add_finish	modify.cc	/^void string_add_finish(struct descriptor_data* d)$/;"	f	typeref:typename:void
string_add_init	modify.cc	/^void string_add_init(struct descriptor_data* d, char** str)$/;"	f	typeref:typename:void
string_fields	modify.cc	/^const char* string_fields[] = {$/;"	v	typeref:typename:const char * []
string_func	char_utils.cpp	/^namespace string_func {$/;"	n	file:
string_func	utils.h	/^namespace string_func {$/;"	n
string_to_new_value	utility.cc	/^int string_to_new_value(char* arg, int* value)$/;"	f	typeref:typename:int
strn_cmp	utility.cc	/^int strn_cmp(char* arg1, char* arg2, int n)$/;"	f	typeref:typename:int
subcmd	act_othe.cc	/^    int subcmd;$/;"	m	struct:__anonef1ab1600208	typeref:typename:int	file:
subcmd	act_wiz.cc	/^    int subcmd;$/;"	m	struct:__anon85c5388a0108	typeref:typename:int	file:
subcmd	interpre.h	/^    int subcmd;$/;"	m	struct:command_info	typeref:typename:int
subcmd	structs.h	/^    int subcmd; \/* subcmd it is, probably as a chain flag$/;"	m	struct:waiting_type	typeref:typename:int
subtypes	obj2html.cc	/^    struct obj2html_type* subtypes;$/;"	m	struct:obj2html_type	typeref:struct:obj2html_type *	file:
successful_chill_ray_count	structs.h	/^    int successful_chill_ray_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
successful_cone_of_cold_count	structs.h	/^    int successful_cone_of_cold_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
sun_events	weather.cc	/^int sun_events[12][2] = { \/\/ Each month has two variables - sunrise and sunset$/;"	v	typeref:typename:int[12][2]
sunlight	structs.h	/^    int sunlight; \/* And how much sun. (day\/night etc) *\/$/;"	m	struct:weather_data	typeref:typename:int
symbol	protos.h	/^    char symbol;$/;"	m	struct:shape_zone	typeref:typename:char
symbol	zone.h	/^    char symbol; \/* NEW - symbol for the zone on the map *\/$/;"	m	struct:zone_data	typeref:typename:char
symbol_to_map	db.cc	/^void symbol_to_map(int x, int y, int symb)$/;"	f	typeref:typename:void
tables	obj2html.cc	/^int tables; \/* The number of tables written so far *\/$/;"	v	typeref:typename:int
tactics	consts.cc	/^char* tactics[] = {$/;"	v	typeref:typename:char * []
tactics	structs.h	/^    ubyte tactics; \/* combat tactics of a person *\/$/;"	m	struct:char_special_data	typeref:typename:ubyte
tactics	warrior_spec_handlers.h	/^    int tactics = -1;$/;"	m	class:player_spec::wild_fighting_handler	typeref:typename:int
tactics	warrior_spec_handlers.h	/^    int tactics = 0;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:int
tail	structs.h	/^    struct txt_block* tail;$/;"	m	struct:txt_q	typeref:struct:txt_block *
tail	zone.cc	/^    struct reset_q_element* tail;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_element *	file:
talks	structs.h	/^    byte talks[MAX_TOUNGE]; \/* PC s Tounges 0 for NPC           	*\/$/;"	m	struct:char_player_data	typeref:typename:byte[]
talks	structs.h	/^    byte talks[MAX_TOUNGE];$/;"	m	struct:char_file_u	typeref:typename:byte[]
targ1	structs.h	/^    struct target_data targ1;$/;"	m	struct:waiting_type	typeref:struct:target_data
targ2	structs.h	/^    struct target_data targ2;$/;"	m	struct:waiting_type	typeref:struct:target_data
target_check	interpre.cc	/^int target_check(struct char_data* ch, int cmd, struct target_data* t1,$/;"	f	typeref:typename:int
target_check_one	interpre.cc	/^int target_check_one(struct char_data* ch, int mask, struct target_data* t1)$/;"	f	typeref:typename:int
target_data	structs.h	/^    target_data()$/;"	f	struct:target_data
target_data	structs.h	/^struct target_data {$/;"	s
target_from_word	interpre.cc	/^char* target_from_word(struct char_data* ch, char* argument, int mask, struct target_data* t1)$/;"	f	typeref:typename:char *
target_mask	interpre.h	/^    int target_mask[32];$/;"	m	struct:command_info	typeref:typename:int[32]
target_parser	interpre.cc	/^int target_parser(struct char_data* ch, int cmd, char* argument,$/;"	f	typeref:typename:int
targets	spells.h	/^    int targets; \/* See above for use with TAR_XXX  *\/$/;"	m	struct:skill_data	typeref:typename:int
temp	structs.h	/^    void* temp; \/* pointer to any special structures if need be   *\/$/;"	m	struct:char_data	typeref:typename:void *
temper1	shop.cc	/^    int temper1; \/* How does keeper react if no money    *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
temper2	shop.cc	/^    int temper2; \/* How does keeper react when attacked  *\/$/;"	m	struct:shop_data	typeref:typename:int	file:
temperature	structs.h	/^    int temperature[13]; \/* Temperature in each sector *\/$/;"	m	struct:weather_data	typeref:typename:int[13]
test_hp	act_info.cc	/^int test_hp(int war_points, int ran_points, int cler_points, int level, int con_score)$/;"	f	typeref:typename:int
text	mudlle.h	/^    txt_block* text;$/;"	m	union:list_field	typeref:typename:txt_block *
text	protos.h	/^    char* text; \/\/  General text field - eg for do_say, send_to_room etc (also for comments)$/;"	m	struct:script_data	typeref:typename:char *
text	structs.h	/^        struct txt_block* text;$/;"	m	union:target_data::__anonb37368f3010a	typeref:struct:txt_block *
text	structs.h	/^    char* text;$/;"	m	struct:txt_block	typeref:typename:char *
thmask	obj2html.cc	/^unsigned long thmask = 1 << 5 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 9 | 1 << 10;$/;"	v	typeref:typename:unsigned long
tick	structs.h	/^    void tick(float delta) { elapsed_combat_seconds += delta; }$/;"	f	class:player_damage_details	typeref:typename:void
tick	structs.h	/^    void tick(float delta) { elapsed_combat_seconds += delta; }$/;"	f	class:timed_damage_details	typeref:typename:void
tics	comm.cc	/^int tics = 0; \/* for extern checkpointing *\/$/;"	v	typeref:typename:int
time	structs.h	/^    int time;$/;"	m	struct:rent_info	typeref:typename:int
time	structs.h	/^    struct time_data time; \/* PC s AGE in days                 	*\/$/;"	m	struct:char_player_data	typeref:struct:time_data
time_data	structs.h	/^struct time_data {$/;"	s
time_info	db.cc	/^struct time_info_data time_info; \/* the infomation about the time   *\/$/;"	v	typeref:struct:time_info_data
time_info_data	structs.h	/^struct time_info_data {$/;"	s
time_map	big_brother.h	/^    typedef std::map<const char_data*, tm> time_map;$/;"	t	class:game_rules::big_brother	typeref:typename:std::map<const char_data *,tm>
time_phase	structs.h	/^    char time_phase; \/* when exactly in the tick it was cast  *\/$/;"	m	struct:affected_type	typeref:typename:char
timed_damage_details	structs.h	/^    timed_damage_details()$/;"	f	class:timed_damage_details
timed_damage_details	structs.h	/^class timed_damage_details : public damage_details {$/;"	c
timediff	clock.cpp	/^timeval rots_clock::timediff(const timeval& now, const timeval& then)$/;"	f	class:rots_clock	typeref:typename:timeval
timediff	comm.cc	/^struct timeval timediff(struct timeval* a, struct timeval* b)$/;"	f	typeref:struct:timeval
timediff	fight.cc	/^timeval timediff(struct timeval* a, struct timeval* b)$/;"	f	namespace:__anon286ec0cb0211	typeref:typename:timeval
timediff_seconds	clock.cpp	/^float rots_clock::timediff_seconds(const timeval& now, const timeval& then)$/;"	f	class:rots_clock	typeref:typename:float
timer	interpre.h	/^    int timer;$/;"	m	struct:ferry_captain_type	typeref:typename:int
timer	structs.h	/^    int timer; \/* Timer for object                 *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
timer	structs.h	/^    int timer; \/* Timer for update                        *\/$/;"	m	struct:char_special_data	typeref:typename:int
timer	structs.h	/^    int timer;$/;"	m	struct:obj_file_elem	typeref:typename:int
title	boards.h	/^    char title[50]; \/* used in html only *\/$/;"	m	struct:board_info_type	typeref:typename:char[50]
title	obj2html.cc	/^    char* title; \/* Title for a table of this type *\/$/;"	m	struct:obj2html_type	typeref:typename:char *	file:
title	structs.h	/^    char title[80];$/;"	m	struct:char_file_u	typeref:typename:char[80]
title	structs.h	/^    char* title; \/* PC \/ NPC s title                     	*\/$/;"	m	struct:char_player_data	typeref:typename:char *
title_f	limits.h	/^    char* title_f;$/;"	m	struct:title_type	typeref:typename:char *
title_m	limits.h	/^    char* title_m;$/;"	m	struct:title_type	typeref:typename:char *
title_type	limits.h	/^struct title_type {$/;"	s
tmp_allflag	boards.h	/^    byte tmp_allflag;$/;"	m	struct:board_info_type	typeref:typename:byte
tmpabilities	structs.h	/^    struct char_ability_data tmpabilities; \/* Current abilities    *\/$/;"	m	struct:char_data	typeref:struct:char_ability_data
tmpabilities	structs.h	/^    struct char_ability_data tmpabilities;$/;"	m	struct:char_file_u	typeref:struct:char_ability_data
tmpstr	protos.h	/^    char* tmpstr; \/\/  Like it says... a pointer to a temporary string$/;"	m	struct:shape_script	typeref:typename:char *
tmpstr	protos.h	/^    char* tmpstr;$/;"	m	struct:shape_object	typeref:typename:char *
tmpstr	protos.h	/^    char* tmpstr;$/;"	m	struct:shape_proto	typeref:typename:char *
tmpstr	protos.h	/^    char* tmpstr;$/;"	m	struct:shape_room	typeref:typename:char *
tmpstr	protos.h	/^    char* tmpstr;$/;"	m	struct:shape_zone	typeref:typename:char *
to	mail.h	/^    char to[NAME_SIZE + 1]; \/* who is this letter to?		 *\/$/;"	m	struct:header_block_type_d	typeref:typename:char[]
to_char	fight.cc	/^    char* to_char;$/;"	m	struct:dam_weapon_type	typeref:typename:char *	file:
to_output	obj2html.cc	/^    struct obj_data** to_output; \/* For runtime use *\/$/;"	m	struct:obj2html_type	typeref:struct:obj_data **	file:
to_room	fight.cc	/^    char* to_room;$/;"	m	struct:dam_weapon_type	typeref:typename:char *	file:
to_room	interpre.h	/^    int to_room[100];$/;"	m	struct:ferry_boat_type	typeref:typename:int[100]
to_room	structs.h	/^    int to_room; \/* Where direction leeds (NOWHERE) *\/$/;"	m	struct:room_direction_data	typeref:typename:int
to_string	char_utils.cpp	/^std::string arcane_spec_data::to_string(char_data& character) const$/;"	f	class:arcane_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string battle_mage_spec_data::to_string(char_data& character) const$/;"	f	class:battle_mage_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string cold_spec_data::to_string(char_data& character) const$/;"	f	class:cold_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string darkness_spec_data::to_string(char_data& character) const$/;"	f	class:darkness_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string defender_data::to_string(char_data& character) const$/;"	f	class:defender_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string elemental_spec_data::to_string(char_data& character) const$/;"	f	class:elemental_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string fire_spec_data::to_string(char_data& character) const$/;"	f	class:fire_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string heavy_fighting_data::to_string(char_data& character) const$/;"	f	class:heavy_fighting_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string light_fighting_data::to_string(char_data& character) const$/;"	f	class:light_fighting_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string lightning_spec_data::to_string(char_data& character) const$/;"	f	class:lightning_spec_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string specialization_data::to_string(char_data& character) const$/;"	f	class:specialization_data	typeref:typename:std::string
to_string	char_utils.cpp	/^std::string wild_fighting_data::to_string(char_data& character) const$/;"	f	class:wild_fighting_data	typeref:typename:std::string
to_victim	fight.cc	/^    char* to_victim;$/;"	m	struct:dam_weapon_type	typeref:typename:char *	file:
tog_messages	act_othe.cc	/^char* tog_messages[][4] = {$/;"	v	typeref:typename:char * [][4]
toggle_bit	base_utils.h	/^void toggle_bit(T var, T bit)$/;"	f	namespace:utils	typeref:typename:void
top	protos.h	/^    int top;$/;"	m	struct:shape_zone	typeref:typename:int
top	zone.h	/^    int top; \/* upper limit for rooms in this zone *\/$/;"	m	struct:zone_data	typeref:typename:int
top_idnum	db.cc	/^long top_idnum = 0; \/* highest idnum in use		*\/$/;"	v	typeref:typename:long
top_of_helpt	db.cc	/^int top_of_helpt; \/* top of help index table	*\/$/;"	v	typeref:typename:int
top_of_helpt	db.h	/^    int top_of_helpt;$/;"	m	struct:help_index_summary	typeref:typename:int
top_of_mobt	db.cc	/^int top_of_mobt = 0; \/* top of mobile index table	*\/$/;"	v	typeref:typename:int
top_of_objt	db.cc	/^int top_of_objt = 0; \/* top of object index table	*\/$/;"	v	typeref:typename:int
top_of_p_file	db.cc	/^int top_of_p_file = 0; \/* ref of size of p file	*\/$/;"	v	typeref:typename:int
top_of_p_table	db.cc	/^int top_of_p_table = 0; \/* ref to top of table		*\/$/;"	v	typeref:typename:int
top_of_script_table	db.cc	/^int top_of_script_table = 0;$/;"	v	typeref:typename:int
top_of_world	db.cc	/^int top_of_world = 0; \/* ref to the top element of world	*\/$/;"	v	typeref:typename:int
top_of_zone_table	zone.cc	/^int top_of_zone_table;$/;"	v	typeref:typename:int
total_chill_ray_count	structs.h	/^    int total_chill_ray_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
total_chill_ray_damage	structs.h	/^    int total_chill_ray_damage;$/;"	m	struct:cold_spec_data	typeref:typename:int
total_cone_of_cold_count	structs.h	/^    int total_cone_of_cold_count;$/;"	m	struct:cold_spec_data	typeref:typename:int
total_cone_of_cold_damage	structs.h	/^    int total_cone_of_cold_damage;$/;"	m	struct:cold_spec_data	typeref:typename:int
total_damage	structs.h	/^    int total_damage;$/;"	m	class:damage_details	typeref:typename:int
total_energy_sapped	structs.h	/^    long total_energy_sapped;$/;"	m	struct:cold_spec_data	typeref:typename:long
total_entries	obj2html.cc	/^int total_entries; \/* The number of entries for all tables so far *\/$/;"	v	typeref:typename:int
total_ranking	pkill.c	/^RANKING total_ranking = { NULL, 0, 0, 0 };$/;"	v	typeref:typename:RANKING
totalrank	db.h	/^    int totalrank;$/;"	m	struct:player_index_element	typeref:typename:int
touched	structs.h	/^    int touched; \/* Has a PC touched this object?    *\/$/;"	m	struct:obj_data	typeref:typename:int
track_combat_time	char_utils.cpp	/^void group_data::track_combat_time(char_data* character, float elapsed_seconds)$/;"	f	class:group_data	typeref:typename:void
track_damage	structs.h	/^    void track_damage(struct char_data* character, int damage) { damage_report.add_damage(charac/;"	f	class:group_data	typeref:typename:void
track_desc	graph.cc	/^char* track_desc(int track_age)$/;"	f	typeref:typename:char *
track_specialized_mage	comm.cc	/^void track_specialized_mage(char_data* mage)$/;"	f	typeref:typename:void
track_time	structs.h	/^    void track_time(struct char_data* character, float elapsed_seconds) { damage_map[character]./;"	f	class:group_damaga_data	typeref:typename:void
trade_with	shop.cc	/^int trade_with(struct obj_data* item, int shop_nr)$/;"	f	typeref:typename:int
trap_cleanup_quiet	ranger.cc	/^void trap_cleanup_quiet(struct char_data* ch)$/;"	f	typeref:typename:void
trap_get_valid_victim	ranger.cc	/^trap_get_valid_victim(struct char_data* ch, struct waiting_type* target)$/;"	f	typeref:struct:char_data *
trap_number	structs.h	/^    int trap_number; \/* used to determine #s in trap *\/$/;"	m	struct:char_special_data	typeref:typename:int
trigger_before_char_enter	script.cc	/^int trigger_before_char_enter(char_data* ch, char_data* vict, room_data* room)$/;"	f	typeref:typename:int
trigger_char_damage	script.cc	/^int trigger_char_damage(char_data* vict, char_data* ch)$/;"	f	typeref:typename:int
trigger_char_die	script.cc	/^int trigger_char_die(char_data* ch)$/;"	f	typeref:typename:int
trigger_char_enter	script.cc	/^int trigger_char_enter(char_data* ch, char_data* vict, room_data* room)$/;"	f	typeref:typename:int
trigger_char_hear	script.cc	/^int trigger_char_hear(char_data* ch, char_data* speaking, char* text)$/;"	f	typeref:typename:int
trigger_char_receive	script.cc	/^int trigger_char_receive(char_data* ch1, char_data* ch2, obj_data* ob1)$/;"	f	typeref:typename:int
trigger_object_damage	script.cc	/^int trigger_object_damage(obj_data* obj, char_data* vict, char_data* ch)$/;"	f	typeref:typename:int
trigger_object_event	script.cc	/^int trigger_object_event(int trigger_type, obj_data* obj, char_data* ch)$/;"	f	typeref:typename:int
trigger_room_enter	script.cc	/^int trigger_room_enter(room_data* room, char_data* ch)$/;"	f	typeref:typename:int
trigger_room_event	script.cc	/^int trigger_room_event(int trigger_type, room_data* room, char_data* ch)$/;"	f	typeref:typename:int
trophy_line	structs.h	/^    byte trophy_line; \/* for mobs, 0-4 in each zone *\/$/;"	m	struct:char_special_data	typeref:typename:byte
tweak_aggressive_guardian_stats	mystic.cc	/^void tweak_aggressive_guardian_stats(const int caster_mystic_level, char_data* guardian_mob, boo/;"	f	typeref:typename:void
tweak_defensive_guardian_stats	mystic.cc	/^void tweak_defensive_guardian_stats(const int caster_mystic_level, char_data* guardian_mob, bool/;"	f	typeref:typename:void
tweak_mystic_guardian_stats	mystic.cc	/^void tweak_mystic_guardian_stats(const int caster_mystic_level, char_data* guardian_mob, bool re/;"	f	typeref:typename:void
txt	mail.h	/^    char txt[DATA_BLOCK_DATASIZE + 1]; \/* the actual text		 *\/$/;"	m	struct:data_block_type_d	typeref:typename:char[]
txt	mail.h	/^    char txt[HEADER_BLOCK_DATASIZE + 1]; \/* the actual text	*\/$/;"	m	struct:header_block_type_d	typeref:typename:char[]
txt	protos.h	/^    char* txt;$/;"	m	struct:shape_mudlle	typeref:typename:char *
txt_block	structs.h	/^struct txt_block {$/;"	s
txt_block_counter	comm.cc	/^int txt_block_counter = 0;$/;"	v	typeref:typename:int
txt_block_pool	comm.cc	/^struct txt_block* txt_block_pool = 0;$/;"	v	typeref:struct:txt_block *
txt_q	structs.h	/^struct txt_q {$/;"	s
type	act_wiz.cc	/^    char type;$/;"	m	struct:set_struct	typeref:typename:char	file:
type	db.h	/^    int type; \/* type of record *\/$/;"	m	struct:exploit_record	typeref:typename:int
type	db.h	/^    int type;$/;"	m	struct:ban_list_element	typeref:typename:int
type	shop.cc	/^    byte type[MAX_TRADE]; \/* Which item to trade.                 *\/$/;"	m	struct:shop_data	typeref:typename:byte[]	file:
type	spells.h	/^    char type;$/;"	m	struct:skill_data	typeref:typename:char
type	structs.h	/^    int type;$/;"	m	struct:universal_list	typeref:typename:int
type	structs.h	/^    sh_int type; \/* The type of spell that caused this      *\/$/;"	m	struct:affected_type	typeref:typename:sh_int
type	structs.h	/^    signed char type;$/;"	m	struct:target_data	typeref:typename:signed char
type	structs.h	/^    source_type type;$/;"	m	struct:affection_source	typeref:typename:source_type
type_flag	structs.h	/^    byte type_flag; \/* Type of item                     *\/$/;"	m	struct:obj_flag_data	typeref:typename:byte
type_keywords	obj2html.cc	/^char* type_keywords[][2] = {$/;"	v	typeref:typename:char * [][2]
typemask	obj2html.cc	/^    unsigned long typemask;$/;"	m	struct:obj2html_type	typeref:typename:unsigned long	file:
u	mage.cc	/^    signed char u; \/\/$/;"	m	struct:loclife_coord	typeref:typename:signed char	file:
ubyte	platdef.h	/^typedef unsigned char ubyte;$/;"	t	typeref:typename:unsigned char
unaccent	utility.cc	/^char unaccent(char c)$/;"	f	typeref:typename:char
unequip_char	handler.cc	/^struct obj_data* unequip_char(struct char_data* ch, int pos)$/;"	f	typeref:struct:obj_data *
union1	structs.h	/^    } union1;$/;"	m	struct:char_special_data	typeref:union:char_special_data::__anonb37368f3020a
union2	structs.h	/^    } union2;$/;"	m	struct:char_special_data	typeref:union:char_special_data::__anonb37368f3030a
universal_list	structs.h	/^struct universal_list {$/;"	s
universal_list_counter	utility.cc	/^int universal_list_counter = 0;$/;"	v	typeref:typename:int
unrestrict_game	signals.cc	/^void unrestrict_game(int fake)$/;"	f	typeref:typename:void
unretire	utility.cc	/^void unretire(struct char_data* ch)$/;"	f	typeref:typename:void
untrack_specialized_mage	comm.cc	/^void untrack_specialized_mage(char_data* mage)$/;"	f	typeref:typename:void
update	wait_functions.cpp	/^void wait_list::update()$/;"	f	class:game_types::wait_list	typeref:typename:void
update_available_practice_sessions	char_utils.cpp	/^void char_data::update_available_practice_sessions()$/;"	f	class:char_data	typeref:typename:void
update_bleed_tracks	limits.cc	/^void update_bleed_tracks()$/;"	f	typeref:typename:void
update_char_objects	handler.cc	/^void update_char_objects(struct char_data* ch)$/;"	f	typeref:typename:void
update_health	wild_fighting_handler.cpp	/^void wild_fighting_handler::update_health(int new_value)$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:void
update_memory_list	mobact.cc	/^int update_memory_list(struct char_data* victim)$/;"	f	typeref:typename:int
update_obj_file	objsave.cc	/^void update_obj_file(void)$/;"	f	typeref:typename:void
update_object	handler.cc	/^void update_object(struct obj_data* obj, int use)$/;"	f	typeref:typename:void
update_pos	fight.cc	/^void update_pos(struct char_data* victim)$/;"	f	typeref:typename:void
update_room_tracks	limits.cc	/^void update_room_tracks()$/;"	f	typeref:typename:void
update_skill_timer	skill_timer.cpp	/^void skill_timer::update_skill_timer()$/;"	f	class:game_timer::skill_timer	typeref:typename:void
update_tactics	wild_fighting_handler.cpp	/^void wild_fighting_handler::update_tactics(int new_value)$/;"	f	class:player_spec::wild_fighting_handler	typeref:typename:void
use_alpha_sorting	act_info.cc	/^bool use_alpha_sorting(char_data* character)$/;"	f	namespace:__anon131f9bdc0111	typeref:typename:bool
use_inventory_formatter	act_info.cc	/^bool use_inventory_formatter(char_data* character)$/;"	f	namespace:__anon131f9bdc0111	typeref:typename:bool
use_length_sorting	act_info.cc	/^bool use_length_sorting(char_data* character)$/;"	f	namespace:__anon131f9bdc0111	typeref:typename:bool
used_in_universal_list	utility.cc	/^int used_in_universal_list = 0;$/;"	v	typeref:typename:int
ush_int	platdef.h	/^typedef unsigned short int ush_int;$/;"	t	typeref:typename:unsigned short int
utility.o	Makefile	/^utility.o : utility.cc structs.h utils.h comm.h$/;"	t
utils	base_utils.h	/^namespace utils {$/;"	n
utils	char_utils.cpp	/^namespace utils {$/;"	n	file:
utils	char_utils.h	/^namespace utils {$/;"	n
utils	char_utils_combat.cpp	/^namespace utils {$/;"	n	file:
utils	char_utils_combat.h	/^namespace utils {$/;"	n
utils	environment_utils.cpp	/^namespace utils {$/;"	n	file:
utils	environment_utils.h	/^namespace utils {$/;"	n
utils	object_utils.cpp	/^namespace utils {$/;"	n	file:
utils	object_utils.h	/^namespace utils {$/;"	n
valid_name	ban.cc	/^int valid_name(char* newname)$/;"	f	typeref:typename:int
valid_target	interpre.h	/^    bool valid_target(int mask_in, int value)$/;"	f	struct:command_info	typeref:typename:bool
valid_types	obj2html.cc	/^    unsigned long valid_types; \/* For runtime use *\/$/;"	m	struct:obj2html_type	typeref:typename:unsigned long	file:
value	structs.h	/^    int value;$/;"	m	struct:prompt_type	typeref:typename:int
value	structs.h	/^    int value[5]; \/* Values of the item (see list) *\/ \/*changed*\/$/;"	m	struct:obj_flag_data	typeref:typename:int[5]
value	structs.h	/^    sh_int value[5];$/;"	m	struct:obj_file_elem	typeref:typename:sh_int[5]
value_array	act_info.cc	/^char* value_array[][5] = {$/;"	v	typeref:typename:char * [][5]
vict_found	db.h	/^    char* vict_found;$/;"	m	struct:social_messg	typeref:typename:char *
victim	db.h	/^    sh_int victim;$/;"	m	struct:crime_record_type	typeref:typename:sh_int
victim	pkill.h	/^    int victim;$/;"	m	struct:__anonb27b44b70108	typeref:typename:int
victim_level	pkill.h	/^    unsigned char victim_level;$/;"	m	struct:__anonb27b44b70108	typeref:typename:unsigned char
victim_msg	structs.h	/^    char* victim_msg; \/* message to victim   *\/$/;"	m	struct:msg_type	typeref:typename:char *
victim_points	pkill.h	/^    int victim_points; \/* Victim points are stored as negative values *\/$/;"	m	struct:__anonb27b44b70108	typeref:typename:int
virt	db.h	/^    int virt; \/* virt number of this mob\/obj *\/$/;"	m	struct:index_data	typeref:typename:int
virt_assignmob	spec_ass.cc	/^void virt_assignmob(struct char_data* mob)$/;"	f	typeref:typename:void
virt_assignobj	spec_ass.cc	/^void virt_assignobj(struct obj_data* obj)$/;"	f	typeref:typename:void
virt_num	protos.h	/^    int virt_num; \/\/  Number in the index.$/;"	m	struct:script_head	typeref:typename:int
virt_obj_program_number	spec_ass.cc	/^void* virt_obj_program_number(int number)$/;"	f	typeref:typename:void *
virt_program_number	spec_ass.cc	/^void* virt_program_number(int number)$/;"	f	typeref:typename:void *
vmudlog	utility.cc	/^void vmudlog(char type, char* format, ...)$/;"	f	typeref:typename:void
vnum	boards.h	/^    long vnum; \/* vnum of this board *\/$/;"	m	struct:board_info_type	typeref:typename:long
vnum	spec_pro.cc	/^    int vnum; \/* The virtual number of the object to be in the kit *\/$/;"	m	struct:kit_item	typeref:typename:int	file:
vnum_mobile	db.cc	/^int vnum_mobile(char* searchname, struct char_data* ch)$/;"	f	typeref:typename:int
vnum_object	db.cc	/^int vnum_object(char* searchname, struct char_data* ch)$/;"	f	typeref:typename:int
vsend_to_char	comm.cc	/^void vsend_to_char(char_data* character, char* format, ...)$/;"	f	typeref:typename:void
vulnerability	structs.h	/^    sh_int vulnerability; \/* bitvector for vulnerabilities *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
vulnerability_name	consts.cc	/^char* vulnerability_name[] = {$/;"	v	typeref:typename:char * []
wait_functions.o	Makefile	/^wait_functions.o : wait_functions.cpp structs.h base_utils.h char_utils.h object_utils.h  comm.h$/;"	t
wait_list	wait_functions.cpp	/^wait_list::wait_list()$/;"	f	class:game_types::wait_list
wait_list	wait_functions.h	/^class wait_list {$/;"	c	namespace:game_types
wait_list_iter	wait_functions.h	/^    typedef wait_list_type::iterator wait_list_iter;$/;"	t	class:game_types::wait_list	typeref:typename:wait_list_type::iterator
wait_list_type	wait_functions.h	/^    typedef std::list<char_data*> wait_list_type;$/;"	t	class:game_types::wait_list	typeref:typename:std::list<char_data * >
wait_state	wait_functions.cpp	/^void wait_list::wait_state(char_data* character, int wait_time)$/;"	f	class:game_types::wait_list	typeref:typename:void
wait_state_brief	wait_functions.cpp	/^void wait_list::wait_state_brief(char_data* character, int wait_time, int command, int sub_comma/;"	f	class:game_types::wait_list	typeref:typename:void
wait_state_full	wait_functions.cpp	/^void wait_list::wait_state_full(char_data* character, int wait_time, int command, int sub_comman/;"	f	class:game_types::wait_list	typeref:typename:void
wait_value	structs.h	/^    int wait_value; \/* number of ticks left to wait *\/$/;"	m	struct:waiting_type	typeref:typename:int
wait_wheel	comm.cc	/^char* wait_wheel[8] = { "\\r|\\r", "\\r\\\\\\r", "\\r-\\r", "\\r\/\\r", "\\r|\\r", "\\r\\\\\\r",/;"	v	typeref:typename:char * [8]
waiting_list	db.cc	/^struct char_data* waiting_list = 0; \/*list of those with delayed commands*\/$/;"	v	typeref:struct:char_data *
waiting_type	structs.h	/^struct waiting_type {$/;"	s
wants_to_flee	structs.h	/^    bool wants_to_flee;$/;"	m	struct:combat_result_struct	typeref:typename:bool
warpoints	db.h	/^    int warpoints;$/;"	m	struct:player_index_element	typeref:typename:int
warrior_abilities	spec_pro.cc	/^int warrior_abilities[] = {$/;"	v	typeref:typename:int[]
warrior_level	warrior_spec_handlers.h	/^    int warrior_level = 0;$/;"	m	class:player_spec::battle_mage_handler	typeref:typename:int
was_ambushed	structs.h	/^    int was_ambushed;$/;"	m	struct:char_special_data	typeref:typename:int
was_in_room	structs.h	/^    int was_in_room; \/* storage of location for linkdead people *\/$/;"	m	struct:char_special_data	typeref:typename:int
water_track_desc	graph.cc	/^char* water_track_desc(int track_age)$/;"	f	typeref:typename:char *
weapon	warrior_spec_handlers.h	/^    const obj_data* weapon = nullptr;$/;"	m	class:player_spec::weapon_master_handler	typeref:typename:const obj_data *
weapon_coef_mod	object_utils.cpp	/^        weapon_coef_mod()$/;"	f	struct:utils::__anon20d0bf1d0111::weapon_coef_mod	file:
weapon_coef_mod	object_utils.cpp	/^        weapon_coef_mod(double parry_coef, double ob_coef)$/;"	f	struct:utils::__anon20d0bf1d0111::weapon_coef_mod	file:
weapon_coef_mod	object_utils.cpp	/^    struct weapon_coef_mod {$/;"	s	namespace:utils::__anon20d0bf1d0111	file:
weapon_flag_data	structs.h	/^    weapon_flag_data(obj_flag_data* data)$/;"	f	struct:weapon_flag_data
weapon_flag_data	structs.h	/^struct weapon_flag_data {$/;"	s
weapon_hit_type	combat_manager.cpp	/^    int weapon_hit_type(game_types::weapon_type weapon_type)$/;"	f	namespace:game_rules::__anon35b427860111	typeref:typename:int
weapon_hit_type	fight.cc	/^int weapon_hit_type(int weapon_type)$/;"	f	typeref:typename:int
weapon_keywords	obj2html.cc	/^char* weapon_keywords[][4] = {$/;"	v	typeref:typename:char * [][4]
weapon_master_handler	warrior_spec_handlers.h	/^class weapon_master_handler {$/;"	c	namespace:player_spec
weapon_master_handler	weapon_master_handler.cpp	/^weapon_master_handler::weapon_master_handler(char_data* in_character)$/;"	f	class:player_spec::weapon_master_handler
weapon_master_handler	weapon_master_handler.cpp	/^weapon_master_handler::weapon_master_handler(char_data* in_character, const obj_data* in_weapon)$/;"	f	class:player_spec::weapon_master_handler
weapon_master_handler.o	Makefile	/^weapon_master_handler.o : weapon_master_handler.cpp warrior_spec_handlers.h structs.h$/;"	t
weapon_skill_num	spells.h	/^inline int weapon_skill_num(game_types::weapon_type weapon_type)$/;"	f	typeref:typename:int
weapon_skill_num	spells.h	/^inline int weapon_skill_num(int type)$/;"	f	typeref:typename:int
weapon_subtypes	obj2html.cc	/^struct obj2html_type weapon_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
weapon_type	structs.h	/^enum weapon_type {$/;"	g	namespace:game_types
weapon_type	warrior_spec_handlers.h	/^    game_types::weapon_type weapon_type;$/;"	m	class:player_spec::weapon_master_handler	typeref:typename:game_types::weapon_type
weapon_typemask	obj2html.cc	/^weapon_typemask(struct obj_data* o)$/;"	f	typeref:typename:unsigned long
weapon_types	act_info.cc	/^char* weapon_types[] = {$/;"	v	typeref:typename:char * []
weapon_willpower_damage	clerics.cc	/^bool weapon_willpower_damage(char_data* attacker, char_data* victim)$/;"	f	typeref:typename:bool
wear_bits	consts.cc	/^char* wear_bits[] = {$/;"	v	typeref:typename:char * []
wear_flags	structs.h	/^    int wear_flags; \/* Where you can wear it            *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
wear_message	act_obj2.cc	/^void wear_message(struct char_data* ch, struct obj_data* obj, int where)$/;"	f	typeref:typename:void
wear_messages	act_info.cc	/^char* wear_messages[] = {$/;"	v	typeref:typename:char * []
wear_pos	structs.h	/^    sh_int wear_pos;$/;"	m	struct:obj_file_elem	typeref:typename:sh_int
weather.o	Makefile	/^weather.o : weather.cc structs.h utils.h comm.h handler.h interpre.h db.h$/;"	t
weather_and_time	weather.cc	/^void weather_and_time(int mode)$/;"	f	typeref:typename:void
weather_change	weather.cc	/^void weather_change(void)$/;"	f	typeref:typename:void
weather_data	structs.h	/^struct weather_data {$/;"	s
weather_info	db.cc	/^struct weather_data weather_info; \/* the infomation about the weather *\/$/;"	v	typeref:struct:weather_data
weather_message	weather.cc	/^void weather_message(int message_type)$/;"	f	typeref:typename:void
weather_messages	weather.cc	/^const char* weather_messages[8][13] = {$/;"	v	typeref:typename:const char * [8][13]
weather_to_char	weather.cc	/^void weather_to_char(char_data* ch)$/;"	f	typeref:typename:void
weekdays	consts.cc	/^char* weekdays[7] = {$/;"	v	typeref:typename:char * [7]
weight	structs.h	/^    int weight; \/* PC \/ NPC s weight                    	*\/$/;"	m	struct:char_player_data	typeref:typename:int
weight	structs.h	/^    int weight; \/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data	typeref:typename:int
weight	structs.h	/^    int weight;$/;"	m	struct:char_file_u	typeref:typename:int
weight	structs.h	/^    int weight;$/;"	m	struct:obj_file_elem	typeref:typename:int
weight_change_object	act_obj2.cc	/^void weight_change_object(struct obj_data* obj, int weight)$/;"	f	typeref:typename:void
weight_coof	utility.cc	/^int weight_coof(struct obj_data* obj)$/;"	f	typeref:typename:int
where	consts.cc	/^char* where[] = {$/;"	v	typeref:typename:char * []
whipping_proc_chance	weapon_master_handler.cpp	/^    constexpr const float whipping_proc_chance = 0.40f;$/;"	v	namespace:player_spec::__anonc55e5b280111	typeref:typename:const float
whips_flails_subtypes	obj2html.cc	/^struct obj2html_type whips_flails_subtypes[] = {$/;"	v	typeref:struct:obj2html_type[]
white_power	zone.h	/^    int white_power, dark_power, magi_power; \/* power of races present *\/$/;"	m	struct:zone_data	typeref:typename:int
wil	structs.h	/^    signed char wil;$/;"	m	struct:char_ability_data	typeref:typename:signed char
wild_fighting_data	structs.h	/^    wild_fighting_data()$/;"	f	struct:wild_fighting_data
wild_fighting_data	structs.h	/^struct wild_fighting_data : public specialization_info {$/;"	s
wild_fighting_effect	fight.cc	/^int wild_fighting_effect(char_data* attacker, int damage)$/;"	f	typeref:typename:int
wild_fighting_handler	warrior_spec_handlers.h	/^class wild_fighting_handler {$/;"	c	namespace:player_spec
wild_fighting_handler	wild_fighting_handler.cpp	/^wild_fighting_handler::wild_fighting_handler(char_data* in_character)$/;"	f	class:player_spec::wild_fighting_handler
wild_fighting_handler.o	Makefile	/^wild_fighting_handler.o : wild_fighting_handler.cpp warrior_spec_handlers.h structs.h$/;"	t
will_die	structs.h	/^    bool will_die;$/;"	m	struct:combat_result_struct	typeref:typename:bool
will_teach	structs.h	/^    long will_teach;$/;"	m	struct:char_special2_data	typeref:typename:long
willpower	structs.h	/^    sh_int willpower; \/* strength in mental fights *\/$/;"	m	struct:char_point_data	typeref:typename:sh_int
wimp_level	structs.h	/^    int wimp_level; \/* Below this # of hit points, flee! *\/$/;"	m	struct:char_special2_data	typeref:typename:int
wimpy	structs.h	/^    int wimpy;$/;"	m	struct:follower_file_elem	typeref:typename:int
witness	db.h	/^    sh_int witness;$/;"	m	struct:crime_record_type	typeref:typename:sh_int
witness_type	db.h	/^    sh_int witness_type;$/;"	m	struct:crime_record_type	typeref:typename:sh_int
wizlist	db.cc	/^char* wizlist = 0; \/* list of higher gods		*\/$/;"	v	typeref:typename:char *
wizlock_default	consts.cc	/^char* wizlock_default = "The game is closed.  Please try again later.\\n\\r";$/;"	v	typeref:typename:char *
wizlock_msg	act_wiz.cc	/^char* wizlock_msg = 0; \/* wizlock message              *\/$/;"	v	typeref:typename:char *
wizutil_options	act_wiz.cc	/^} wizutil_options[] = {$/;"	v	typeref:struct:__anon85c5388a0108[]
word_length	modify.cc	/^int word_length(char* str)$/;"	f	typeref:typename:int
world	db.cc	/^struct room_data world; \/\/ = 0;  new room_data; \/* class of rooms      	*\/$/;"	v	typeref:struct:room_data
world_map	db.cc	/^char world_map[WORLD_AREA + 1];$/;"	v	typeref:typename:char[]
world_singleton	singleton.h	/^    world_singleton()$/;"	f	class:world_singleton
world_singleton	singleton.h	/^    world_singleton(const weather_data* weather, const room_data* world)$/;"	f	class:world_singleton
world_singleton	singleton.h	/^class world_singleton {$/;"	c
worn_weight	structs.h	/^    sh_int worn_weight; \/* Worn weight :)                          *\/$/;"	m	struct:char_special_data	typeref:typename:sh_int
write_ban_list	ban.cc	/^void write_ban_list(void)$/;"	f	typeref:typename:void
write_command	shapezon.cc	/^void write_command(FILE* f, struct zone_tree* zon)$/;"	f	typeref:typename:void
write_exploits	db.cc	/^void write_exploits(char_data* ch, exploit_record* record)$/;"	f	typeref:typename:void
write_lvl	boards.h	/^    int write_lvl; \/* min level to write messages on this board *\/$/;"	m	struct:board_info_type	typeref:typename:int
write_message	boards.cc	/^void board_info_type::write_message(struct char_data* ch, char* arg, int num)$/;"	f	class:board_info_type	typeref:typename:void
write_message	boards.cc	/^void mail_info_type::write_message(struct char_data* ch, char* arg, int num)$/;"	f	class:mail_info_type	typeref:typename:void
write_object	shapeobj.cc	/^void write_object(FILE* f, struct obj_data* obj, int num)$/;"	f	typeref:typename:void
write_proto	shapemob.cc	/^void write_proto(FILE* f, struct char_data* m, int num)$/;"	f	typeref:typename:void
write_room	shaperom.cc	/^void write_room(FILE* f, struct room_data* m, int num)$/;"	f	typeref:typename:void
write_script	shapescript.cc	/^void write_script(FILE* f, struct char_data* ch)$/;"	f	typeref:typename:void
write_to_descriptor	comm.cc	/^int write_to_descriptor(int desc, char* txt)$/;"	f	typeref:typename:int
write_to_descriptor_new	comm.cc	/^int write_to_descriptor_new(int desc, char* txt)$/;"	f	typeref:typename:int
write_to_file	mail.cc	/^void write_to_file(void* buf, int size, long filepos)$/;"	f	typeref:typename:void
write_to_output	comm.cc	/^void write_to_output(const char* txt, struct descriptor_data* t)$/;"	f	typeref:typename:void
write_to_q	comm.cc	/^void write_to_q(char* txt, struct txt_q* queue)$/;"	f	typeref:typename:void
write_to_q_lang	comm.cc	/^void write_to_q_lang(char* txt, struct txt_q* queue, int freq)$/;"	f	typeref:typename:void
write_zone	shapezon.cc	/^void write_zone(FILE* f, struct char_data* ch)$/;"	f	typeref:typename:void
x	protos.h	/^    int x, y, level;$/;"	m	struct:shape_zone	typeref:typename:int
x	zone.h	/^    int x, y; \/* NEW - zone coordinates, for the map*\/$/;"	m	struct:zone_data	typeref:typename:int
xp_to_level	limits.cc	/^int xp_to_level(int lvl)$/;"	f	typeref:typename:int
y	protos.h	/^    int x, y, level;$/;"	m	struct:shape_zone	typeref:typename:int
y	zone.h	/^    int x, y; \/* NEW - zone coordinates, for the map*\/$/;"	m	struct:zone_data	typeref:typename:int
year	structs.h	/^    sh_int year;$/;"	m	struct:time_info_data	typeref:typename:sh_int
zone	structs.h	/^    int zone; \/* Room zone (for resetting)          *\/$/;"	m	struct:room_data	typeref:typename:int
zone.o	Makefile	/^zone.o: zone.cc zone.h structs.h utils.h$/;"	t
zone_data	zone.h	/^struct zone_data {$/;"	s
zone_descr	protos.h	/^    char* zone_descr;$/;"	m	struct:shape_zone	typeref:typename:char *
zone_description	zone.h	/^    struct extra_descr_data* zone_description; \/* zone description *\/$/;"	m	struct:zone_data	typeref:struct:extra_descr_data *
zone_map	protos.h	/^    char* zone_map;$/;"	m	struct:shape_zone	typeref:typename:char *
zone_map	zone.h	/^    struct extra_descr_data* zone_map; \/* for zone map   *\/$/;"	m	struct:zone_data	typeref:struct:extra_descr_data *
zone_name	protos.h	/^    char* zone_name;$/;"	m	struct:shape_zone	typeref:typename:char *
zone_number	protos.h	/^    int zone_number;$/;"	m	struct:shape_zone	typeref:typename:int
zone_short_description	zone.h	/^    struct extra_descr_data* zone_short_description; \/* summary of a zone *\/$/;"	m	struct:zone_data	typeref:struct:extra_descr_data *
zone_table	zone.cc	/^struct zone_data* zone_table;$/;"	v	typeref:struct:zone_data *
zone_to_reset	zone.cc	/^    int zone_to_reset; \/* ref to zone_data *\/$/;"	m	struct:reset_q_element	typeref:typename:int	file:
zone_tree	protos.h	/^struct zone_tree {$/;"	s
zone_update	zone.cc	/^void zone_update(void)$/;"	f	typeref:typename:void
~combat_manager	combat_manager.cpp	/^combat_manager::~combat_manager()$/;"	f	class:game_rules::combat_manager
~damage_details	structs.h	/^    virtual ~damage_details() { }$/;"	f	class:damage_details
~room_data_extension	db.cc	/^room_data_extension::~room_data_extension()$/;"	f	class:room_data_extension
~singleton	singleton.h	/^    virtual ~singleton() { }$/;"	f	class:singleton
~specialization_data	structs.h	/^    ~specialization_data() { reset(); }$/;"	f	struct:specialization_data
~specialization_info	structs.h	/^    virtual ~specialization_info()$/;"	f	struct:specialization_info
~timed_damage_details	structs.h	/^    virtual ~timed_damage_details() { }$/;"	f	class:timed_damage_details
~wait_list	wait_functions.cpp	/^wait_list::~wait_list()$/;"	f	class:game_types::wait_list
~world_singleton	singleton.h	/^    virtual ~world_singleton() { }$/;"	f	class:world_singleton
